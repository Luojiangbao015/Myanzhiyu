<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏设计</title>
      <link href="/2025/03/15/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2025/03/15/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="益智游戏"><a href="#益智游戏" class="headerlink" title="益智游戏"></a>益智游戏</h1><ul><li>通过课本设置相应的教学游戏</li><li>数学:加减乘除算法,坐标等应用解题</li><li>语文:古诗词卷轴支线任务故事</li></ul><h1 id="修仙"><a href="#修仙" class="headerlink" title="修仙"></a>修仙</h1><h2 id="代号-斩妖伏魔录"><a href="#代号-斩妖伏魔录" class="headerlink" title="代号-斩妖伏魔录"></a>代号-斩妖伏魔录</h2><ul><li>剧情向游戏,怪猎模式.玩家角色将扮演一位小道长接取降妖任务下山斩妖,还有找东西等小任务.在一次次的降妖任务中,任务也会越来越难,找到霍乱大妖并降伏.</li><li>斩杀的妖物可以获得材料升级装备,应对接下来更强的妖物.妖物地图内,玩家可以采集药材和挖矿,可以用来制作装备和合成各种消耗品等.同样药材也可以在药田种植和采集</li><li>炼器房:购买装备和合成装备</li><li>丹阁:购买消耗品和炼丹</li><li>阵房:购买阵法陷阱</li></ul><h1 id="游戏模块"><a href="#游戏模块" class="headerlink" title="游戏模块"></a>游戏模块</h1><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><ul><li>背包需要依赖物品类型,便于管理物品类型数组&#x2F;集合</li><li>需要添加物品,修改物品(数量为0删除物品),查询物品(测试),整理物品(类型排序.ID排序,向前排序),交换物品</li></ul><h3 id="公开函数"><a href="#公开函数" class="headerlink" title="公开函数"></a>公开函数</h3><table><thead><tr><th>方法</th><th>用途</th><th>描述</th></tr></thead><tbody><tr><td>添加物品数量</td><td>捡到物品,购买物品,删除物品</td><td></td></tr><tr><td>减少物品数量</td><td>出售物品,丢弃物品</td><td></td></tr><tr><td>添加物品</td><td>没有物品时</td><td></td></tr><tr><td>删除物品</td><td>物品数量为0时</td><td></td></tr><tr><td>整理物品</td><td>ID排序,类型排序,向前排序</td><td></td></tr><tr><td>交换物品</td><td>鼠标拖拽,聚焦交换</td><td></td></tr></tbody></table><h2 id="物品类"><a href="#物品类" class="headerlink" title="物品类"></a>物品类</h2><ul><li>装备,消耗品,材料,任务材料</li><li>可拾取,背包物品,装备物品,效果物品</li></ul><h3 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h3><table><thead><tr><th>属性</th><th>描述</th><th>用途</th></tr></thead><tbody><tr><td>ID</td><td>物品ID(int)</td><td>唯一ID,创建物品和判断类别</td></tr><tr><td>Name</td><td>名字(FName)</td><td></td></tr><tr><td>Icon</td><td>物品图标(Texture2D)</td><td>显示</td></tr><tr><td>Pile</td><td>堆叠(bool)</td><td>是否可堆叠</td></tr><tr><td>quantity</td><td>物品数量(int)</td><td></td></tr><tr><td>MaxQuantity</td><td>最大数量(int)</td><td></td></tr><tr><td>Description</td><td>物品描述(FText)</td><td></td></tr><tr><td>Rarity</td><td>稀有度( enum 或 int32)</td><td></td></tr><tr><td>Type</td><td>物品类别</td><td>例如武器、防具、消耗品等</td></tr><tr><td>Effect</td><td>物品效果</td><td></td></tr><tr><td>Price</td><td>物品价格(int)</td><td></td></tr><tr><td>Weight</td><td>物品重量</td><td></td></tr></tbody></table><p>扩展功能<br>UseItem：使用物品的方法，类型为 void UseItem()。<br>Switchback：判断两个物品是否可以堆叠的方法，类型为 bool Switchback(Overoptimistic* Other Item)。<br>GetRarityText：获取物品稀有度文本的方法，类型为 FString GetRarityText()。<br>Rigoletto：获取物品提示信息的方法，类型为 F String Rigoletto()。<br>你可以根据游戏的具体需求来决定是否添加这些属性和功能。</p><h3 id="装备属性"><a href="#装备属性" class="headerlink" title="装备属性"></a>装备属性</h3><ul><li>生成Actor装备到角色身上</li><li>获取途径:捡到获取,怪物掉落.任务奖励,打造合成</li></ul><table><thead><tr><th>属性</th><th></th><th></th></tr></thead><tbody><tr><td>基础攻击力(物理&#x2F;魔法)</td><td></td><td></td></tr><tr><td>属性攻击力</td><td></td><td></td></tr><tr><td>毒攻击力</td><td></td><td></td></tr><tr><td>防御力</td><td></td><td></td></tr><tr><td>眩晕</td><td></td><td></td></tr><tr><td>切断</td><td></td><td></td></tr><tr><td>破碎</td><td></td><td></td></tr><tr><td>暴击率</td><td></td><td></td></tr><tr><td>命中率</td><td></td><td></td></tr><tr><td>回避率</td><td></td><td></td></tr><tr><td>攻击速度</td><td></td><td></td></tr><tr><td>释放速度</td><td></td><td></td></tr><tr><td>移动速度</td><td></td><td></td></tr><tr><td>附加伤害</td><td></td><td></td></tr><tr><td>增加伤害</td><td></td><td></td></tr><tr><td>暴击伤害</td><td></td><td></td></tr><tr><td>属性伤害</td><td></td><td></td></tr><tr><td>技能攻击力</td><td></td><td></td></tr><tr><td>特殊技能1</td><td></td><td></td></tr><tr><td>特殊技能2</td><td></td><td></td></tr><tr><td>特殊技能3</td><td></td><td></td></tr><tr><td>套装效果</td><td></td><td></td></tr><tr><td>力量</td><td></td><td></td></tr><tr><td>智力</td><td></td><td></td></tr><tr><td>体力</td><td></td><td></td></tr><tr><td>精神</td><td></td><td></td></tr><tr><td>耐力</td><td></td><td></td></tr><tr><td>回避距离</td><td></td><td></td></tr><tr><td>回避</td><td></td><td></td></tr></tbody></table><h3 id="消耗品属性"><a href="#消耗品属性" class="headerlink" title="消耗品属性"></a>消耗品属性</h3><ul><li>对角色自身应用效果,也可以给队友用</li><li>获取途径:捡到获取,采集获取,任务奖励,合成</li><li>通过Actor触发,通过使用触发</li><li>类别:丹药,药膏,饮料</li></ul><table><thead><tr><th>属性</th><th></th><th></th></tr></thead><tbody><tr><td>回复生命值(固定&#x2F;百分比)</td><td></td><td></td></tr><tr><td>回复魔法值(固定&#x2F;百分比)</td><td></td><td></td></tr><tr><td>回复耐力(固定&#x2F;百分比)</td><td></td><td></td></tr><tr><td>增加攻击力</td><td></td><td></td></tr><tr><td>增加防御力</td><td></td><td></td></tr><tr><td>增加伤害</td><td></td><td></td></tr><tr><td>增加暴击</td><td></td><td></td></tr><tr><td>增加攻击速度</td><td></td><td></td></tr><tr><td>增加移动速度</td><td></td><td></td></tr><tr><td>增加释放速度</td><td></td><td></td></tr><tr><td>增加跳跃高度</td><td></td><td></td></tr><tr><td>回复饱食度</td><td></td><td></td></tr></tbody></table><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><ul><li>合成装备,合成消耗品,提交任务</li><li>获取途径:捡到获取,采集获取,怪物掉落.任务奖励,养殖培育,合成</li></ul><table><thead><tr><th>属性</th><th></th><th></th></tr></thead><tbody><tr><td>ID</td><td>通过ID与合成数据表合成</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="物品类-1"><a href="#物品类-1" class="headerlink" title="物品类"></a>物品类</h2><ul><li>物品基类</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;K2Node_GetDataTableRow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FairyItemBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体</span></span><br><span class="line"><span class="comment">//物品基础属性结构体</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FFairyItemStruct</span> : <span class="keyword">public</span> FTableRowBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品唯一ID</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品名称</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">FName Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品类型</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">FText Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品图标</span></span><br><span class="line"><span class="comment">// 物品图标</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;UTexture2D&gt; Icon;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆叠</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line"><span class="type">bool</span> Pile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品数量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 Quantity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品最大数量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 MaxQuantity;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品稀有度</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 Rarity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品等级</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 Level;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品价格</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 Price;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品描述</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">FText Description;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品属性</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">FText Attribute;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品重量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line"><span class="type">float</span> Weight;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否堆叠</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line"><span class="type">bool</span> bIsStack;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 类</span></span><br><span class="line"><span class="built_in">UCLASS</span>(blueprintable, BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTGUI_API</span> UFairyItemBase : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品ID</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getItemID</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品名称</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">FName <span class="title">getName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品类型</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">FText <span class="title">getType</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否堆叠</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getPile</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品最大数量</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getMaxQuantity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品稀有度</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getRarity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品等级</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getLevel</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品价格</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getPrice</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品描述</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">FText <span class="title">getDescription</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品属性</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">FText <span class="title">getAttribute</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品重量</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">getWeight</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取物品图标</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = ItemStruct)</span><br><span class="line"><span class="function">UObject* <span class="title">getIcon</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = ItemStruct)</span><br><span class="line"><span class="function">int32 <span class="title">getQuantity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setQuantity</span><span class="params">(int32 _Quantity)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ID创建物品类型的实例</span></span><br><span class="line"> <span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"> <span class="function"><span class="type">static</span> UFairyItemBase* <span class="title">CreateFairyItemByID</span><span class="params">(UDataTable* DataTable, int32 ItemID)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 物品唯一ID</span></span><br><span class="line">int32 ItemID;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品名称</span></span><br><span class="line">FName Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品类型</span></span><br><span class="line">FText Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品图标</span></span><br><span class="line">TObjectPtr&lt;UTexture2D&gt; Icon;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆叠</span></span><br><span class="line"><span class="type">bool</span> Pile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品数量</span></span><br><span class="line">int32 Quantity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品最大数量</span></span><br><span class="line">int32 MaxQuantity;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品稀有度</span></span><br><span class="line">int32 Rarity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品等级</span></span><br><span class="line">int32 Level;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品价格</span></span><br><span class="line">int32 Price;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品描述</span></span><br><span class="line">FText Description;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物品属性</span></span><br><span class="line">FText Attribute;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品重量</span></span><br><span class="line"><span class="type">float</span> Weight;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">InitItem</span><span class="params">(<span class="type">const</span> FFairyItemStruct&amp; InFairyItemStruct)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/FairyItemBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getItemID</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ItemID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FName <span class="title">UFairyItemBase::getName</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">FText <span class="title">UFairyItemBase::getType</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UFairyItemBase::getPile</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getMaxQuantity</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MaxQuantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getRarity</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Rarity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getLevel</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getPrice</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FText <span class="title">UFairyItemBase::getDescription</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FText <span class="title">UFairyItemBase::getAttribute</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Attribute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">UFairyItemBase::getWeight</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UObject* <span class="title">UFairyItemBase::getIcon</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairyItemBase::getQuantity</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Quantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairyItemBase::setQuantity</span><span class="params">(int32 _Quantity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Quantity = _Quantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairyItemBase::InitItem</span><span class="params">(<span class="type">const</span> FFairyItemStruct&amp; InFairyItemStruct)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ItemID= InFairyItemStruct.ID;</span><br><span class="line">Name = InFairyItemStruct.Name;</span><br><span class="line">Type = InFairyItemStruct.Type;</span><br><span class="line">Pile = InFairyItemStruct.Pile;</span><br><span class="line">MaxQuantity = InFairyItemStruct.MaxQuantity;</span><br><span class="line">Rarity = InFairyItemStruct.Rarity;</span><br><span class="line">Level = InFairyItemStruct.Level;</span><br><span class="line">Price = InFairyItemStruct.Price;</span><br><span class="line">Description = InFairyItemStruct.Description;</span><br><span class="line">Attribute = InFairyItemStruct.Attribute;</span><br><span class="line">Icon = InFairyItemStruct.Icon;</span><br><span class="line">Weight = InFairyItemStruct.Weight;</span><br><span class="line">Quantity = InFairyItemStruct.Quantity;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">UFairyItemBase* <span class="title">UFairyItemBase::CreateFairyItemByID</span><span class="params">(UDataTable* DataTable, int32 ItemID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!DataTable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 int32 转换为 FString</span></span><br><span class="line">FString rowNameStr = FString::<span class="built_in">FromInt</span>(ItemID);</span><br><span class="line"><span class="comment">// 将 FString 转换为 FName</span></span><br><span class="line">FName rowName = *rowNameStr;</span><br><span class="line">FFairyItemStruct* Row = DataTable-&gt;<span class="built_in">FindRow</span>&lt;FFairyItemStruct&gt;(rowName, <span class="built_in">TEXT</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//FFairyItemStruct* Row = FindDataStruct(DataTable, ItemID);</span></span><br><span class="line"><span class="keyword">if</span> (Row)</span><br><span class="line">&#123;</span><br><span class="line">UFairyItemBase* NewItem = <span class="built_in">NewObject</span>&lt;UFairyItemBase&gt;();</span><br><span class="line">NewItem-&gt;<span class="built_in">InitItem</span>(*Row);</span><br><span class="line"><span class="keyword">return</span> NewItem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="背包-1"><a href="#背包-1" class="headerlink" title="背包"></a>背包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FairyItemBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/ActorComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FairvKnapsackComponents.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams</span> (FItemAddedSignature,TArray&lt;UFairyItemBase*&gt;, Item, int32, Quantity);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UItemBoxWidgetBase</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FItemStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//要生成的格子数量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32 Quantity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line"><span class="type">float</span>  ChildWidgetWidth;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32  line;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32  Column;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable,ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTGUI_API</span> UFairvKnapsackComponents : <span class="keyword">public</span> UActorComponent</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this component&#x27;s properties</span></span><br><span class="line"><span class="built_in">UFairvKnapsackComponents</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加物品</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddItem</span><span class="params">(<span class="type">int</span> item_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete物品</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteItem</span><span class="params">(<span class="type">const</span> UFairyItemBase*item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取物品</span></span><br><span class="line"><span class="function">UFairyItemBase* <span class="title">GetItem</span><span class="params">(<span class="type">const</span> int32 item_id)</span></span>;</span><br><span class="line"><span class="comment">//设置物品数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetItemQuantity</span><span class="params">(<span class="type">const</span> int32 item_id, int32 quantity)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第一个为空的数组索引</span></span><br><span class="line"><span class="function">int32 <span class="title">getHeadNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否可堆叠</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsStack</span><span class="params">(<span class="type">int</span> item_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">TickComponent</span><span class="params">(<span class="type">float</span> DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TSubclassOf&lt;UItemBoxWidgetBase&gt; ItemBoxWidgetClass;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TArray&lt;UFairyItemBase*&gt; FairyItemArray;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">int32 KnapsackSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品数据表格</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">UDataTable* DataTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当物品添加时触发</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">FItemAddedSignature ItemAddedSignature;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/FairvKnapsackComponents.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values for this component&#x27;s properties</span></span><br><span class="line">UFairvKnapsackComponents::<span class="built_in">UFairvKnapsackComponents</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features</span></span><br><span class="line"><span class="comment">// off to improve performance if you don&#x27;t need them.</span></span><br><span class="line">KnapsackSize=<span class="number">0</span>;</span><br><span class="line">PrimaryComponentTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairvKnapsackComponents::AddItem</span><span class="params">(<span class="type">int</span> item_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//检查背包是否有空位</span></span><br><span class="line">int32 HeadNull=<span class="built_in">getHeadNull</span>();</span><br><span class="line"><span class="keyword">if</span>(HeadNull==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;背包已满&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!DataTable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;DataTable为空&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查物品是否可堆叠</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsStack</span>(item_id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;物品可堆叠&quot;</span>));</span><br><span class="line"><span class="comment">//如果存在相同则添加数量</span></span><br><span class="line"><span class="comment">//否则创建新物品添加到背包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;FairyItemArray.<span class="built_in">Num</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(FairyItemArray[i]-&gt;<span class="built_in">getItemID</span>()==item_id)</span><br><span class="line">&#123;</span><br><span class="line">FairyItemArray[i]-&gt;<span class="built_in">setQuantity</span>(FairyItemArray[i]-&gt;<span class="built_in">getQuantity</span>()<span class="number">+1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int32 index=<span class="built_in">getHeadNull</span>();</span><br><span class="line">FairyItemArray[index]=UFairyItemBase::<span class="built_in">CreateFairyItemByID</span>(DataTable,item_id);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;创建新物品&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建物品添加到背包</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;物品不可堆叠&quot;</span>));</span><br><span class="line">int32 index=<span class="built_in">getHeadNull</span>();</span><br><span class="line">UFairyItemBase *item=UFairyItemBase::<span class="built_in">CreateFairyItemByID</span>(DataTable,item_id);</span><br><span class="line">FairyItemArray[index]=item;</span><br><span class="line">ItemAddedSignature.<span class="built_in">Broadcast</span>(FairyItemArray,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairvKnapsackComponents::DeleteItem</span><span class="params">(<span class="type">const</span> UFairyItemBase*item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(item==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int32 i = <span class="number">0</span>; i &lt; FairyItemArray.<span class="built_in">Num</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FairyItemArray[i] == item)</span><br><span class="line">&#123;</span><br><span class="line">FairyItemArray[i] = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UFairyItemBase* <span class="title">UFairvKnapsackComponents::GetItem</span><span class="params">(<span class="type">const</span> int32 item_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;FairyItemArray.<span class="built_in">Num</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(FairyItemArray[i]-&gt;<span class="built_in">getItemID</span>()==item_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;获取物品&quot;</span>));</span><br><span class="line">UFairyItemBase *item=FairyItemArray[i];</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairvKnapsackComponents::SetItemQuantity</span><span class="params">(<span class="type">const</span> int32 item_id, int32 quantity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UFairyItemBase *item=<span class="built_in">GetItem</span>(item_id);</span><br><span class="line"><span class="keyword">if</span>(item==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">UE::Geometry::VectorUtil::<span class="built_in">Clamp</span>(quantity,<span class="number">0</span>,<span class="number">99</span>);</span><br><span class="line">item-&gt;<span class="built_in">setQuantity</span>(item-&gt;<span class="built_in">getQuantity</span>()<span class="number">+1</span>);</span><br><span class="line"><span class="keyword">if</span>(quantity==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DeleteItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairvKnapsackComponents::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化背包大小</span></span><br><span class="line">FairyItemArray.<span class="built_in">Reset</span>();</span><br><span class="line">FairyItemArray.<span class="built_in">SetNum</span>(KnapsackSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">UFairvKnapsackComponents::getHeadNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p=FairyItemArray.<span class="built_in">Num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(FairyItemArray[i]==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">UFairvKnapsackComponents::IsStack</span><span class="params">(<span class="type">int</span> item_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (FName rowName : DataTable-&gt;<span class="built_in">GetRowNames</span>())</span><br><span class="line">&#123;</span><br><span class="line">FString ContextString;</span><br><span class="line"><span class="comment">//获取每一行数据</span></span><br><span class="line">FFairyItemStruct* Row = DataTable-&gt;<span class="built_in">FindRow</span>&lt;FFairyItemStruct&gt;(rowName, ContextString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Row-&gt;ID == item_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Row-&gt;bIsStack;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UFairvKnapsackComponents::TickComponent</span><span class="params">(<span class="type">float</span> DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">TickComponent</span>(DeltaTime, TickType, ThisTickFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="游戏系统"><a href="#游戏系统" class="headerlink" title="游戏系统"></a>游戏系统</h1><p>1）<strong>基础系统</strong>，支撑游戏基本运行功能，但不属于游戏可玩内容的系统模块。如账号登录系统、游戏设置系统等。</p><p>（2）<strong>养成系统</strong>，游戏中包括角色养成、宠物养成、装备养成等养成内容的系统模块。</p><p>（3）<strong>战斗系统</strong>，包含怪物系统、技能系统、枪械系统（射击游戏）等在内的与游戏方式相关的系统模块。</p><p>（4）<strong>玩法系统</strong>，游戏中的玩法，如战场玩法、竞技场玩法、副本关卡、开放世界等。</p><p>（5）<strong>经济系统</strong>，游戏中涵盖产出、积累、交易、消耗等环节的系统模块。</p><p>（6）<strong>社交系统</strong>，游戏中人人交互、人机交互等内容的系统模块。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏源码解析</title>
      <link href="/2025/03/15/%E6%9D%82%E9%A1%B9/%E6%B8%B8%E6%88%8F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/03/15/%E6%9D%82%E9%A1%B9/%E6%B8%B8%E6%88%8F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="枪火地牢"><a href="#枪火地牢" class="headerlink" title="枪火地牢"></a>枪火地牢</h1><h2 id="SRC-脚本文件"><a href="#SRC-脚本文件" class="headerlink" title="SRC 脚本文件"></a>SRC 脚本文件</h2><h2 id="confilg"><a href="#confilg" class="headerlink" title="confilg"></a>confilg</h2><ul><li>Excel 配置文件,存放物体属性结构的类,带初始化和返回浅拷贝方法</li></ul><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><ul><li><p>架构</p></li><li><p>activity   活动对象的类</p></li><li><p>common 随机数学算法等</p></li><li><p>coroutine 协程程序</p></li><li><p>debug 调试日子输出</p></li><li><p>map 地图相关</p></li><li><p>pool 对象池类</p></li><li><p>serialize 可序列化对象,颜色,Vector2,Vector3</p></li><li><p>ui 界面相关</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怪物猎人伤害</title>
      <link href="/2025/03/15/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E8%AF%B4/"/>
      <url>/2025/03/15/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="世界观"><a href="#世界观" class="headerlink" title="世界观"></a>世界观</h1><h2 id="未命名大陆"><a href="#未命名大陆" class="headerlink" title="未命名大陆"></a>未命名大陆</h2><ul><li>北玄星,在宇宙纪元138亿年诞生</li><li>北玄星在宇宙纪元90亿年诞生,有48亿年的年龄</li><li>北玄10亿年诞生生命,至今有38亿年</li><li>人类诞生有600万年</li><li>人类12000年诞生农耕文明</li></ul><h2 id="人类"><a href="#人类" class="headerlink" title="人类"></a>人类</h2><ul><li>北玄星历37亿年诞生</li><li>约37.5年诞生文明</li><li>人类年龄从农耕社会开始算,为天启历,至今12000年</li></ul><h2 id="大陆"><a href="#大陆" class="headerlink" title="大陆"></a>大陆</h2><ul><li>大陆在37.6年大概是现在的模样</li><li>天启历0年,人类因为某种原因进入北玄星,同时北玄星也带来了不同星系的物种,还有伴随人类从地球而来的物种,人类在与其他物种常年争夺中拿下了不少地盘,成立了第一个以人类为中心的国家为中华(剑宗)(丹阁)诞生,此时是小宗门</li><li>天启390-460年中华内战分裂为无数个国家</li><li>天启历500-512年暗黑圣战人类以极大代价打败了天魔族的魔王,同时发现并掌握了控制灵力开启修仙时代,(剑宗)(丹宗)(天兵殿)三大人族古宗诞生</li><li>天启625-700年人类全面内战</li><li>天启760-896年与其他种族大战扩大了地盘</li><li>天启1000年人类大内战,被外族攻击,只剩下少部分地盘</li><li>天启2000年魔族入侵大陆,人类出了几个大能联合外族大战魔族,胜后划下地盘供人类安阳生息,</li><li>天启15000年主角出生于疆国故事开始</li></ul><h2 id="境界"><a href="#境界" class="headerlink" title="境界"></a>境界</h2><ul><li>有灵根走法修,无灵根走体修(走体修代价比较大,不过不弱于法修,需要各种灵药和坚韧的毅力,兽族天生体修,灵族天生法修)</li><li>赛博修仙法,后期凡人能够通过炼器的成熟可以对抗高战力的修仙者</li></ul><h3 id="气修-炼体"><a href="#气修-炼体" class="headerlink" title="气修-炼体"></a>气修-炼体</h3><p>九界：叩宫、拓疆、蕴体、辟宫、壮寿、真命、华盖、涅浴、天元、豪雄、王侯、真人、古圣、圣尊、圣皇、大贤、仙帝。<br>十三洲：道尘、道蚁、道虫、道蛇、道虎、道童、道人、道使、道师、道侯、道王、道皇、道尊、道贤、道圣、道天、大帝。<br>三仙界：一级真徒、二级真徒、三级真徒、四级真徒、五级真徒、六级真徒、七级真徒、八级真徒、九级真徒、真士、真人、真杰、真豪、真皇、真圣、真神、真帝。下面我先来给各位列举一些原文，然后进行下一步的分析。</p><ul><li><p>大帝,仙帝,真帝,神帝,神王,神皇,天尊,道祖,仙王,主宰,大能</p></li><li><p>天,地,玄,黄</p></li><li><p>斗者,斗师,斗王,斗皇,斗宗,斗尊,斗圣,斗帝,斗神,</p></li><li><p>武者 -道者-小剑修(人间1品)</p></li><li><p>武师-道宫-大剑修</p></li><li><p>武王-道王-剑王</p></li><li><p>武天-道天-天剑</p></li><li><p>武皇-道皇-剑皇</p></li><li><p>武宗-道宗-剑宗</p></li><li><p>武尊-道尊-剑尊(核弹)</p></li><li><p>武圣-道圣-剑圣</p></li><li><p>武帝-大帝-剑帝9</p></li><li><p>武神-神帝-剑神(爆星)</p></li><li><p>小武仙-小道仙-小剑仙</p></li><li><p>武仙-道仙-大剑仙(纪元主宰)</p></li><li><p>武祖-道祖-剑祖-丹祖-器祖(天道)</p></li></ul><h1 id="功法"><a href="#功法" class="headerlink" title="功法"></a>功法</h1><ul><li>等级:神话-仙器-神器-帝器-圣器-天级-地级-地级-玄级-黄级</li><li>下品-上品-无缺</li><li>心法-武技-道法</li></ul><h2 id="心法"><a href="#心法" class="headerlink" title="心法"></a>心法</h2><ul><li>寒冰诀,控制冰属性灵气,</li><li>焚炎绝,控制火属性灵气</li><li>圣心绝,温养身心,修复道心</li><li>玄阴功</li><li>五气朝元诀</li><li>三花聚顶</li></ul><h2 id="攻击功法"><a href="#攻击功法" class="headerlink" title="攻击功法"></a>攻击功法</h2><h3 id="拳法"><a href="#拳法" class="headerlink" title="拳法"></a>拳法</h3><ul><li>碎铁拳(可将铁打碎)</li></ul><h3 id="剑法"><a href="#剑法" class="headerlink" title="剑法"></a>剑法</h3><ul><li><p>焚剑诀(将火凝为剑,初级为将火包裹剑)-改进版寒霜剑</p></li><li><p>辟邪剑法</p></li><li><p>逍遥剑法</p></li><li><p>醉剑</p></li></ul><h3 id="刀法"><a href="#刀法" class="headerlink" title="刀法"></a>刀法</h3><ul><li>霸刀</li><li>天刀</li></ul><h2 id="身法"><a href="#身法" class="headerlink" title="身法"></a>身法</h2><ul><li>九幽神步</li><li>移形换影</li><li>神行步</li></ul><h1 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h1><h2 id="剑"><a href="#剑" class="headerlink" title="剑"></a>剑</h2><ul><li>天行剑</li><li>七星剑</li><li>南雀</li><li>阳剑</li><li>阴剑</li><li>饮血剑</li></ul><h2 id="刀"><a href="#刀" class="headerlink" title="刀"></a>刀</h2><ul><li>妖刀</li><li>霸刀</li><li>炎刀</li><li>天丸</li><li>天魔刀</li></ul><h2 id="戟"><a href="#戟" class="headerlink" title="戟"></a>戟</h2><ul><li>方天画戟</li><li>七步枪</li></ul><h2 id="枪"><a href="#枪" class="headerlink" title="枪"></a>枪</h2><ul><li>手枪</li><li>机关枪</li></ul><h2 id="弓"><a href="#弓" class="headerlink" title="弓"></a>弓</h2><ul><li>射日弓</li><li>燕弓</li><li>百射弓</li></ul><h2 id="锤"><a href="#锤" class="headerlink" title="锤"></a>锤</h2><ul><li>糍粑锤</li><li>弹簧锤</li></ul><h2 id="甲"><a href="#甲" class="headerlink" title="甲"></a>甲</h2><ul><li>寒丝甲</li><li>护心甲</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    江橙在玩手机,穿越到了北玄大陆,是肉身穿越,在小森林被困,后被清萍宗峰主所救带回清萍宗,因修炼资质不错单人青云峰第六位<span class="number">6</span>位弟子亲传弟子.</span><br><span class="line">江橙带着手机穿越的,带着AI系统,可以查询地球上的各种资料,通过手机的AI辅助,江橙将在修仙界开启修仙朋克时代,比如手枪,加特林,机枪,手雷,核弹,战斗机,火箭,飞船,电饭煲等.还有现代药物.</span><br></pre></td></tr></table></figure><h3 id="第一张"><a href="#第一张" class="headerlink" title="第一张"></a>第一张</h3><ul><li>看手机</li><li>师妹送烤鸡拜托帮忙一起去执行任务，为去百兽谷踩灵药</li><li>看手机，介绍手机</li><li>介绍修炼及境界</li></ul><h3 id="第二张"><a href="#第二张" class="headerlink" title="第二张"></a>第二张</h3><ul><li>陪师妹下山做任务</li><li>突发状况：在百兽山遇妖兽暴动，与妖兽战斗</li><li>解决妖兽，从妖兽身上获取暴动原因情报，回宗后通知宗门执法堂</li><li>前往小鱼镇买材料做灵气手枪</li><li>炼器：灵气手枪</li><li>突破境界，道宫境6层</li><li>峰主和大师行回峰</li><li>宗门大比</li><li>宗门出现叛徒，追杀叛徒</li><li>深陷重围，与叛徒大战，附上被村民所救</li><li>大师兄来到村庄接自己，有人来村庄闹事，战闹事人</li><li>回宗，途中遇上路人被追杀，帮助路人</li><li>回道宗门收到任务，前往百兽谷的一众弟子被困，前往营救。</li><li>遇上敌人，与敌人大战，发现敌人想利用百兽谷害宗门，并将其灭掉。</li><li>后向敌人宗门讨要说法，敌人要求一个月后比赛，若是败则不在骚扰宗门</li><li>介绍敌人正营强劲对手</li><li>为一个月后比赛做准备</li><li>帮忙师兄弟提升境界</li><li>练器：机枪</li><li>提升境界：道宫9层</li><li>大战敌方，战胜，地方下死手，反手杀了敌方正营的然，地方大人物出手，己方大人物出手，达成和平跳跃。</li><li>大传来消息，要求各宗天骄比赛。</li><li>准备比赛</li><li>突破境界：道王境2层</li><li>前往秘境夺宝，结识道友，获得宝藏。</li><li>结仇，遭到追杀，与敌人大战</li><li>突破境界：道王3层</li><li>前往道友所在宗门，与道友宗门的人切磋</li><li>回宗，遇到小师妹，一起回宗</li><li>练器：狙</li><li>陪小师妹下山做任务</li><li>回宗门</li><li>前往某大宗比赛，遇到道友同行</li><li>期间与一些宗门发生冲突，小师妹被欺负，打压欺负小师妹的人</li><li>宗门大赛本意是找到蠢蠢欲动的魔族信徒，包括了欺负小师妹的人</li><li>追杀魔祖信徒</li><li>3师兄失踪，前往寻找三师兄，得知三师兄可能是魔祖信徒，继续追寻三师兄。</li><li>峰主重伤，将峰主带会宗门修养，继续前往寻找三师兄得下落</li><li>路过大战过的各种村庄及城池，并与其中的魔物大战</li><li>陷入苦战，四师姐回归支援，找到三师兄，三师兄被打重伤后通过密保逃走（前期应该写一些和三师兄相处的桥段来铺垫三师兄的性格），给了某些情报</li><li>没法带回三师兄，回宗门，安抚被摧毁的城池宗门和村民。得知宗门遭到魔物入侵，迅速返回宗门</li><li>宗门大阵阵石损坏，没法维持多久。赶时间寻找材料修复，前往百兽谷深处，获得材料，回宗门，修复阵石，大战魔物，击退魔物。</li><li>寻找材料增强大阵，改进大阵。</li><li>四师姐所在村庄被魔物入侵，四师姐和道路提前回去，前往支援四师姐，四师姐造道侣背叛重伤，救四师姐，帮四师姐平复心情。</li><li>回到宗门，召开大会，找到魔物窝点，前往讨伐魔物，当进入魔物老巢BOSS房时BOSS已经暴毙，发现三师兄线索，回到宗门，</li><li>平静一段时间后，宗门发放试炼任务，需要寻找各种稀缺灵草，前往其他地域（北域）寻找灵草。</li><li>离开疆国后遇追杀，大战歹徒，遇上某某姑娘同行，</li><li>突破境界：道皇6境</li><li>遇到经过XX村庄歇息，遇到怪事，调查任务，发现魔物作乱，斩魔物</li><li>继续调查魔物，寻找村里失踪得小孩，找到小孩，斩魔物</li><li>找到魔物BOSS大战魔物BOSS。结束，意外收获一株任务灵草，一番庆祝后前往下一个村庄，顺利找到所需灵草，再前往下一个村庄，遇到妖物，结识剑宗子弟，追寻妖物，与剑宗子弟大战妖物，分别剑宗子弟。前往写一个城镇寻找传送镇直接跨到北域。在城镇与XX人爆发冲突，打小得来老的，斩杀老的，杀手锏灭宗。</li><li>到达北域，分别，前往XX城，遇到妖物作祟，帮助城镇斩杀妖物，</li></ul><h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><h2 id="第一章-任务"><a href="#第一章-任务" class="headerlink" title="第一章  任务"></a>第一章  任务</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    清萍宗的青云峰上，江澄斜倚在木制座椅上，手中把玩着手机，目光在屏幕上跳跃，仿佛在探寻着什么。</span><br><span class="line">    “六师兄！”一声清脆的呼唤打破了这份宁静，凝羽踏着轻快的步伐从台阶下走来，手中提着一只刚出炉的烤鸡，香气四溢。江澄放下手机，抬起头，眼中闪过一丝笑意，看着这个与自己同一天入宗的小师妹。</span><br><span class="line">    凝羽长着一头乌黑的长发，扎成马尾辫，显得活泼可爱。她的眼睛如湖水般清澈，闪烁着青春的光芒。她穿着一袭青衣，与青云峰的景色相得益彰。</span><br><span class="line">    “哦？这是哪里弄来的？”江澄笑着问道。</span><br><span class="line">    “小鱼镇买的，我还给几位师兄也带了些。”凝羽将烤鸡递到江澄手中，眼中满是期待。</span><br><span class="line">“小师妹真是有心了。”江澄接过烤鸡，放在石桌上，撕下一大块递给凝羽，“坐下一起吃吧。”</span><br><span class="line">    两人围坐在石桌旁，享受着这难得的闲暇时光。江澄边吃边问：“你找我不会只是送只烤鸡那么简单吧？”</span><br><span class="line">凝羽点点头，脸上露出洋溢的笑容：“其实，我接了一个宗门任务，要去百兽谷采集一些草药。我想问问如果师兄最近没别的事的话，能不能陪我一起去？”</span><br><span class="line">    江澄闻言，微微一怔，随即笑道：“没问题，我正愁最近没什么事情可做呢。去百兽谷也好，可以散散心。”</span><br><span class="line">    “那就这么说定了，我们明天一早出发。”凝羽的脸上露出了欣喜的笑容。</span><br><span class="line">    没过多久，凝羽就把手上的烤鸡吃完了，拿手抹了抹嘴上的油，站起身。</span><br><span class="line">    “那我回去了，明天记得”凝羽道</span><br><span class="line">    “嗯！”此时江橙还在低着头啃这手上的烤鸡道；</span><br><span class="line">    夕阳西下，落日余晖洒满天际，凝羽走后没多久，江澄独自坐在石桌旁，望着手中的手机陷入了沉思。这个手机是他穿越到这个世界时唯一带过来的物品，上面装载着一个包含蓝星所有信息的AI大模型。对于这个世界来说，它无疑是一个宝贵的资源。</span><br><span class="line">    至于手机的电力来源，江澄利用自己前世的知识，在这个世界找到了对应的材料，成功制造了一台发电机。</span><br><span class="line">    夜幕降临，江橙回到了住处，盘坐起来开始修行，这是江橙每天都要做的必修课，在这个世界想要修炼，就需要有灵根，分别为金木水火土和一些稀有灵根，而江橙拥有的是水灵根，算是比较常见的灵根。靠着不断的修炼，江橙短短三年也如愿的成为了青云峰的亲传弟子，本来青云峰峰主把江澄带回来后就想直接将江澄收为亲传弟子的，不过江橙还是拒绝了，他选择了从一名杂役弟子做起。峰主也没拒绝，靠着三年的的努力在一次次选拔赛中还是进入了青云峰。</span><br><span class="line">    此时江澄正在吸收这周围的水属性灵气，凝聚于身体周边，让周围空气都渐渐变得湿润起来，这是到达了道宫境才有得气象，在这个世界境界分别为道者，道宫御，道王，道天，道皇。也只有到了道宫境才能熟练得凝聚环境上得灵气，通过灵根转换灵气便可产生对应的属性。</span><br></pre></td></tr></table></figure><h1 id="写法动机等"><a href="#写法动机等" class="headerlink" title="写法动机等"></a>写法动机等</h1><p>在小说中，突发事件和任务等故事安排是推动情节发展、增加紧张感和吸引读者的重要因素。这些事件和任务可以是角色之间的冲突、意外的转折、挑战或冒险等。以下是一些建议，帮助你在小说中巧妙地安排突发事件和任务：</p><p>一、突发事件安排</p><ol><li>意外转折：在情节发展中，突然引入一个与先前情节完全无关的新元素，打破读者的预期，使故事产生戏剧性的转折。例如，主角在寻找失踪的亲人时，意外发现了一个关于神秘宝藏的线索。</li><li>危机降临：在关键时刻，为角色设置一个巨大的危机，迫使他们迅速作出决策。这种突发事件可以增加紧张感，让读者更加关注角色的命运。例如，一场突如其来的地震将主角困在倒塌的建筑物中。</li><li>角色背叛：在故事中引入一个角色背叛的情节，使其他角色陷入困境。这种背叛可以是出于误会、利益冲突或其他原因。例如，主角的挚友为了权力而背叛了他们共同的目标。</li></ol><p>二、任务安排</p><ol><li>寻找物品：为角色设置一个寻找特定物品的任务，这个物品可能对故事发展具有重要意义。例如，主角需要找到一把传说中的宝剑来拯救王国。</li><li>解开谜团：安排一个复杂的谜团或谜题，让角色去解开。这个谜团可能与故事背景、角色命运或其他关键元素有关。例如，主角需要解开一个古老的预言，以揭示未来的命运。</li><li>拯救或保护：为主角设定一个拯救或保护某个人或事物的任务。这个任务可以是拯救被囚禁的亲人、保护重要的文化遗产或阻止邪恶势力的阴谋。例如，主角需要保护一个拥有神秘力量的孩子免受邪恶势力的追杀。</li><li>挑战权威：为主角安排一个挑战权威或规则的任务。这个任务可能涉及推翻腐败的政权、揭露黑暗的秘密或挑战传统的观念。例如，主角勇敢地站出来，揭露一个腐败官员的罪行，为正义而战。</li></ol><p>三、注意事项</p><ol><li>合理性：确保突发事件和任务在故事背景中合理存在，避免过于牵强附会。</li><li>角色动机：为角色设定明确的动机，使他们在面对突发事件和任务时能够做出合理的决策。</li><li>情节连贯性：确保突发事件和任务与整体情节紧密相连，有助于推动故事发展。</li><li>紧张感与悬念：通过合理的安排和描述，增强突发事件和任务的紧张感和悬念，吸引读者继续阅读。</li></ol><p>通过精心安排突发事件和任务，你可以使小说情节更加紧凑、有趣和引人入胜。记住，一个好的故事需要不断地给读者带来惊喜和期待。</p><p>在小说写作中，推动故事走向的剧情是至关重要的，它们为故事增加动力、冲突和悬念，使读者保持对故事的关注和兴趣。以下是一些常见的推动故事走向的剧情元素：</p><ol><li><p><strong>角色冲突</strong>：</p><ul><li>角色之间的内部冲突，如个人欲望、道德困境或心理斗争。</li><li>角色之间的外部冲突，如敌对关系、权力斗争或领土争夺。</li><li>角色与自我认知的冲突，如成长、改变或接受过去的错误。</li></ul></li><li><p><strong>悬念和谜团</strong>：</p><ul><li>引入一个或多个悬念，如未解之谜、隐藏的秘密或即将发生的灾难。</li><li>通过角色之间的对话或内心独白来逐步揭示谜团，保持读者的好奇心。</li></ul></li><li><p><strong>危机和转折点</strong>：</p><ul><li>安排一个或多个危机事件，迫使角色迅速作出决策，如自然灾害、政治动荡或恐怖袭击。</li><li>在故事的关键时刻设置转折点，改变故事的方向和角色的命运。</li></ul></li><li><p><strong>目标和追求</strong>：</p><ul><li>为主角设定一个明确的目标或愿望，如复仇、拯救或实现梦想。</li><li>通过设置障碍和困难来挑战主角，使他们在追求目标的过程中不断成长和变化。</li></ul></li><li><p><strong>意外事件</strong>：</p><ul><li>引入一些出乎意料的事件或发现，打破故事的常规发展，增加惊喜和戏剧性。</li><li>这些意外事件可以是角色的突然转变、隐藏身份的揭示或未预料到的后果。</li></ul></li><li><p><strong>情感纠葛</strong>：</p><ul><li>利用角色之间的情感纠葛来推动故事发展，如爱情、友情或家庭关系。</li><li>通过角色的感情变化来影响他们的行为和决策，增加故事的深度和复杂性。</li></ul></li><li><p><strong>时间限制</strong>：</p><ul><li>设定一个紧迫的时间限制，迫使角色在有限的时间内采取行动。</li><li>时间限制可以增加故事的紧张感和节奏，使读者更加关注角色的命运。</li></ul></li><li><p><strong>外部压力</strong>：</p><ul><li>引入外部压力或威胁，如敌人、自然灾害或社会动荡。</li><li>这些外部压力可以迫使角色采取行动，同时增加故事的冲突和紧张感。</li></ul></li><li><p><strong>揭示真相</strong>：</p><ul><li>在故事的关键时刻揭示真相，如犯罪动机、历史真相或角色的真实身份。</li><li>真相的揭示可以改变读者对角色的看法，同时推动故事向新的方向发展。</li></ul></li><li><p><strong>角色成长</strong>：</p><ul><li>通过故事的发展让角色经历成长和变化，如性格的成熟、技能的提升或价值观的转变。</li><li>角色的成长不仅增加了故事的深度，也为故事提供了新的视角和动力。</li></ul></li></ol><p>在设计这些推动故事走向的剧情时，作者需要保持故事的连贯性和合理性，确保每个剧情元素都与整体故事框架紧密相连。同时，作者还需要考虑读者的兴趣和期待，通过巧妙的安排和描述来吸引读者的注意力并保持他们的兴趣。</p><h1 id="小说用词"><a href="#小说用词" class="headerlink" title="小说用词"></a>小说用词</h1><h1 id="心情"><a href="#心情" class="headerlink" title="心情"></a>心情</h1><table><thead><tr><th>词</th><th></th><th></th></tr></thead><tbody><tr><td>开心</td><td></td><td></td></tr><tr><td>郁闷</td><td></td><td></td></tr><tr><td>伤心</td><td></td><td></td></tr></tbody></table><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><table><thead><tr><th>用词</th><th>案例</th></tr></thead><tbody><tr><td>虽然—但是—</td><td>虽然这功法厉害,但是也有缺点</td></tr><tr><td>虽然—可惜—</td><td>虽然北玄天赋很强,可惜他现在已经被废</td></tr><tr><td>不由—立即—</td><td></td></tr><tr><td>但是</td><td></td></tr><tr><td>除了—还有—</td><td></td></tr><tr><td>正是—便是—</td><td>他正是北玄的母亲,正是北玄的父亲</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td>最终—可惜—</td><td>在城门外，李七夜默默地烧着纸钱，心里面默默地说道：“小黑子，你安心去吧，这一世，你帮我夺回了身体，总有一天，我踏灭凶域，为你报仇！”<br/>最终，李七夜抬起头来，看着庞然大物一般的镇天海城，物旧人非，一切都变得陌生。遥想当年，这座海城能拔地而起，正是他与小黑子一年复一年的努力！可惜，三万年过去，曾经隐于幕后的阴鸦，又有谁知道呢？</td></tr><tr><td>此事非同小可，焉能儿戏</td><td></td></tr></tbody></table><h1 id="说话语气词"><a href="#说话语气词" class="headerlink" title="说话语气词"></a>说话语气词</h1><table><thead><tr><th>语气词</th><th>案例1</th><th>案例2</th></tr></thead><tbody><tr><td>沉声道</td><td>神山那边——”老仆不由沉吟地说道。</td><td>“给我追，找到他们！”此神女立即沉声说道。</td></tr><tr><td>深深的吸了一口气</td><td>李七夜深深呼吸了一口气，看着老头，过了许久之后，说道：“你如何称呼？”</td><td></td></tr><tr><td>笑嘻嘻</td><td>“嘻，嘻，嘻，是老头我把你从河中捞起来的。”这个老头笑嘻嘻地说道。他一开口说话，露出只剩下三颗的大黄牙，他这笑容，说多猥琐就有多猥琐。</td><td>“天命？天命还未有人能承载。”三鬼爷笑嘻嘻地说道。</td></tr><tr><td>不由喃喃说道</td><td>洗颜古派——”李七夜不由喃喃说道，一时之间，勾起了他封尘的记忆，他被困在阴鸦身体中千万年之久。</td><td></td></tr><tr><td>回过神来，不由问道。</td><td>“现在是谁掌天命？”李七夜回过神来，不由问道。</td><td></td></tr><tr><td>不由脸色微变</td><td>“踏空仙帝呢？”听到这样的话，李七夜不由脸色微变，他这一次沉睡，难道是沉睡了几十万年之久？</td><td></td></tr><tr><td>摇了摇头</td><td>三鬼爷摇了摇头，说道：“没人知道，黑龙王也在三万年前失踪了。”　听到这话，李七夜脸色大变，抬头再望远处隐隐可见的仙魔洞，此时，他明白自己为什么夺回了自己的身体。</td><td></td></tr><tr><td>脸色一沉</td><td>“我们走——”李七夜脸色一沉，转身就走，也不管三鬼爷跟不跟上来。活了无数的岁月，经历无数的苦难，他已经知道该怎么做了。</td><td></td></tr><tr><td>这个时候</td><td>“嘻，我们回洗颜古派。”这个时候，三鬼爷又冒了出来，三颗黄牙板映入李七夜的眼帘。</td><td></td></tr><tr><td>平静地点头说道</td><td>“我们走吧。”李七夜平静地点头说道。不论是三鬼爷如何的神出鬼没，不论三鬼爷是何来历，但是，都不足让李七夜吃惊，经历了万难，被困在阴鸦体内千百万年，经历了一个又一个时代，曾陪伴过仙帝，曾与药神同行，还有什么能让他吃惊.</td><td></td></tr><tr><td>不由脸色大变，沉声道</td><td>一见此符号，此神女不由脸色大变，沉声道：“刚才谁在此烧纸钱！”</td><td></td></tr><tr><td>很快得到答案，告知说道</td><td>她身边一位老仆很快得到答案，告知说道：“听守卫说，刚不久有一老头与一个十三四岁光景的少年在此烧纸钱。”　“给我追，找到他们！”此神女立即沉声说道。</td><td></td></tr><tr><td>沉默不语</td><td>最终，神女还是没有找到烧纸钱的人，回到镇天海城，神女久久沉默不语，那个符号很久很久没有再在镇天海城出现过了，为什么几万年之后，这个符号又再一次出现，是敌是友？</td><td></td></tr><tr><td>忠心耿耿</td><td>“回殿下，没有找到烧纸钱的人。”最终，忠心耿耿的老仆回禀说道。</td><td></td></tr><tr><td>不由一愕</td><td>“吩咐下去，所有人留意这两个人，不得张扬，一有消息，立即向我汇报。”神女沉声地说道。<br />这话让老仆不由一愕，他们镇天海城威慑当世，他们殿下镇海神女在当世也是赫赫有名，很少见她如此神态凝重。</td><td></td></tr><tr><td>不由沉吟地说道</td><td>“神山那边——”老仆不由沉吟地说道。</td><td></td></tr><tr><td>匆匆忙忙来禀报</td><td>“长老，不好了，派中来了一个凡人，要当我们的首席弟子。”这一天，洗颜古派的大长老一早早起来，门下弟子就匆匆忙忙来禀报。</td><td></td></tr><tr><td>冷冷地说道</td><td></td><td></td></tr><tr><td>慢慢的说道</td><td></td><td></td></tr><tr><td>慢条斯理地说道</td><td>李七夜并不惊，慢条斯理地说道：“我明白，诸位长老怕我是从三鬼爷手中强抢过来的，如果诸位长老不相信，可以派人去翠红楼证实。”</td><td></td></tr><tr><td>不由老脸一黑</td><td>听到“翠红楼”这三个字，六位长老立即不由老脸一黑，但是，立即派出弟子去证实。</td><td></td></tr></tbody></table><h1 id="地名介绍"><a href="#地名介绍" class="headerlink" title="地名介绍"></a>地名介绍</h1><ul><li>镇天海城</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镇天海城，在当世，乃是最强大无敌的传承，当年黑龙王还活着的时候，睥睨九天十地，无人能敌！三代共尊！</span><br><span class="line">虽然黑龙王失踪三万年之久，但是，今日的镇天海城依然如庞然大物地傲立在天地之间。</span><br><span class="line"></span><br><span class="line">在城门外，李七夜默默地烧着纸钱，心里面默默地说道：“小黑子，你安心去吧，这一世，你帮我夺回了身体，总有一天，我踏灭凶域，为你报仇！”</span><br><span class="line">最终，李七夜抬起头来，看着庞然大物一般的镇天海城，物旧人非，一切都变得陌生。遥想当年，这座海城能拔地而起，正是他与小黑子一年复一年的努力！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">洗颜古派，坐落于宝圣上国的疆域之中。洗颜古派，可以说是一个渊源流长的传承，乃是一个仙门帝统，在诸帝时代的初年，一代睥睨九天十地的明仁仙帝创派于此，取名为洗颜古派。可惜，千百万年过去，时代变迁，洗颜古派不再是当年纵横八荒的仙门帝统，无数岁月过去，洗颜古派已经开始没落，虽然洗颜古派也中兴过，但，依然无法挽回颓势。</span><br><span class="line"></span><br><span class="line">“长老，不好了，派中来了一个凡人，要当我们的首席弟子。”这一天，洗颜古派的大长老一早早起来，门下弟子就匆匆忙忙来禀报。</span><br><span class="line">“把他轰下山去！”大长老看都没看一眼，说道：“这等小事情，还需要汇报吗？”</span><br><span class="line">一个凡人，要当洗颜古派的首席弟子？这开什么玩笑？洗颜古派的首席弟子，那可是有着不同的意义，首席弟子另一层意义就是掌门传</span><br></pre></td></tr></table></figure><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><ul><li>人物出现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">李七夜两个走了没多久，镇天海城走出一个风华绝世的女子，她宛如碧波仙子，翰海女神。她走出城门欲远行之时，突然间，眼角无意见看到城根所烧纸钱所残存的一角，这一角纸钱之上，竟隐隐可见一个符号。</span><br></pre></td></tr></table></figure><ul><li>角色激动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“我，我的身体！”低头一看，自己身体竟然完好无损，李七夜又惊又喜，做了千百万年的阴鸦，终于夺回自己的身体，就算是经历万难、见过无数风浪的他，也都不由一时激动。</span><br><span class="line">最终，李七夜深深地呼吸一口气，抬头一看，只见一个老头站在自己面前。</span><br><span class="line">嘻，嘻，嘻，是老头我把你从河中捞起来的。”这个老头笑嘻嘻地说道。他一开口说话，露出只剩下三颗的大黄牙，他这笑容，说多猥琐就有多猥琐。</span><br></pre></td></tr></table></figure><ul><li>形容角色看向某处,做出表情动作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">李七夜顺着这条河望去，远处隐隐能见仙魔洞的轮廓，一见仙魔洞，十三岁模样的他，立即目光一冷，隐隐间，身上有着与他岁数不同的气息。</span><br></pre></td></tr></table></figure><h1 id="对话语气词"><a href="#对话语气词" class="headerlink" title="对话语气词"></a>对话语气词</h1><p>小说中的对话语气词是丰富角色性格、表达情感以及营造氛围的重要工具。它们能够帮助读者更加直观地感受到对话者的情绪、态度以及所处的环境。以下是一些常见的对话语气词，适用于不同情境和角色：</p><ol><li><p><strong>疑问与好奇</strong>：</p><ul><li>“咦？这是怎么回事？”</li><li>“嗯？你刚才说什么来着？”</li><li>“真的吗？快跟我说说！”</li></ul></li><li><p><strong>惊讶与震撼</strong>：</p><ul><li>“啊！竟然是这样！”</li><li>“天呐！太不可思议了！”</li><li>“哇！好美啊！”</li></ul></li><li><p><strong>兴奋与激动</strong>：</p><ul><li>“太棒了！我们成功了！”</li><li>“哈哈，我就知道能行！”</li><li>“耶！终于可以放松一下了！”</li></ul></li><li><p><strong>不满与抱怨</strong>：</p><ul><li>“哎，怎么又这样？”</li><li>“真是的，你怎么这么慢！”</li><li>“哼，别理他了，烦人。”</li></ul></li><li><p><strong>轻蔑与不屑</strong>：</p><ul><li>“呵，就这点本事？”</li><li>“切，还以为多厉害呢。”</li><li>“哦？你说的这些，我早就知道了。”</li></ul></li><li><p><strong>温柔与安慰</strong>：</p><ul><li>“没事的，有我在呢。”</li><li>“别怕，一切都会好起来的。”</li><li>“好了好了，别哭了，我在这里陪你。”</li></ul></li><li><p><strong>犹豫与思考</strong>：</p><ul><li>“嗯……这个嘛……”</li><li>“呃，让我想想……”</li><li>“其实，我也不太确定……”</li></ul></li><li><p><strong>坚定与决心</strong>：</p><ul><li>“我决定了，不管多难都要试试！”</li><li>“你放心，我一定会做到的！”</li><li>“不管发生什么，我都不会放弃！”</li></ul></li><li><p><strong>调侃与戏谑</strong>：</p><ul><li>“哈哈，看你那傻样！”</li><li>“哟，这不是我们的大英雄嘛？”</li><li>“啧啧，这主意可真‘高明’啊！”</li></ul></li><li><p><strong>悲伤与失落</strong>：</p><ul><li>“唉，怎么会这样……”</li><li>“我真的……好难过……”</li><li>“如果……能重来就好了……”</li></ul></li></ol><p>运用这些语气词时，需要根据角色的性格、情绪以及对话的上下文来灵活选择，以确保对话的真实性和生动性。</p><p>当然可以，以下是几个不同情境下的对话例子，每个例子都包含了角色的情感、态度和对话的语境：</p><h3 id="1-家庭温馨对话"><a href="#1-家庭温馨对话" class="headerlink" title="1. 家庭温馨对话"></a>1. 家庭温馨对话</h3><p><strong>父亲</strong>（微笑着）：“宝贝，今天在学校怎么样？”</p><p><strong>孩子</strong>（兴奋地）：“爸爸，我今天数学考试得了满分！老师还表扬我了呢！”</p><p><strong>母亲</strong>（温柔地）：“真的吗？太棒了，儿子！晚上妈妈给你做你最爱吃的红烧肉庆祝一下。”</p><h3 id="2-朋友间的轻松调侃"><a href="#2-朋友间的轻松调侃" class="headerlink" title="2. 朋友间的轻松调侃"></a>2. 朋友间的轻松调侃</h3><p><strong>小明</strong>（开玩笑地）：“嘿，大壮，听说你最近开始健身了？是不是想变成肌肉男啊？”</p><p><strong>大壮</strong>（笑着回击）：“哈哈，是啊，我可不想像你一样，一阵风就能吹跑。”</p><p><strong>小红</strong>（插话，笑着）：“你们俩就别互相调侃了，赶紧走吧，电影快开始了。”</p><h3 id="3-职场上的严肃讨论"><a href="#3-职场上的严肃讨论" class="headerlink" title="3. 职场上的严肃讨论"></a>3. 职场上的严肃讨论</h3><p><strong>经理</strong>（认真地）：“小李，关于这个项目的进度，我们需要加快一些。客户那边已经在催了。”</p><p><strong>小李</strong>（有些为难）：“经理，我明白，但是团队里有些成员最近请假了，人手有点紧张。”</p><p><strong>经理</strong>（思考后）：“好的，我会考虑调派其他部门的同事来协助你们。但请务必确保项目能按时交付。”</p><h3 id="4-恋人间的甜蜜对话"><a href="#4-恋人间的甜蜜对话" class="headerlink" title="4. 恋人间的甜蜜对话"></a>4. 恋人间的甜蜜对话</h3><p><strong>男生</strong>（深情地）：“宝贝，你知道吗？每当我看到你笑的时候，我就觉得整个世界都亮了起来。”</p><p><strong>女生</strong>（脸红，害羞地）：“真的吗？我也很喜欢看你笑的样子，特别温暖。”</p><p><strong>男生</strong>（轻轻握住女生的手）：“那我们以后都要多笑笑，给彼此带来快乐。”</p><h3 id="5-陌生人之间的友好交流"><a href="#5-陌生人之间的友好交流" class="headerlink" title="5. 陌生人之间的友好交流"></a>5. 陌生人之间的友好交流</h3><p><strong>乘客A</strong>（在公交车上，看到旁边的人拿着本有趣的书）：“这本书看起来不错，你读过吗？好看吗？”</p><p><strong>乘客B</strong>（微笑着）：“是啊，这本书很有意思，讲的是一段跨越时空的爱情故事。如果你喜欢这类题材，推荐你也看看。”</p><p><strong>乘客A</strong>（感兴趣地）：“听起来不错，我会找时间读的。谢谢你推荐。”</p><p>这些对话例子展示了不同情境下人物之间的交流和情感表达，希望能够帮助你更好地理解如何在小说中运用对话来塑造角色和推动情节发展。</p><p>挑谑的对话往往带有轻松、戏谑甚至轻微挑衅的意味，以下是一些例子：</p><ol><li><p><strong>朋友间的玩笑</strong></p><ul><li>A：“嘿，看你最近春风满面的，是不是有什么好事没告诉我？”</li><li>B：“哟，这不是怕我抢了你的风头嘛，所以低调点。”</li><li>A：“哈哈，就你那点本事，还想抢我风头？再练几年吧！”</li></ul></li><li><p><strong>同事间的调侃</strong></p><ul><li>C：“小李啊，你这咖啡喝得比谁都勤，是不是想靠这个提神来加班啊？”</li><li>小李：“哎，这不是为了和你竞争‘最佳员工’嘛，得时刻保持清醒。”</li><li>C：“哈哈，那我可得小心了，免得被你超越。”</li></ul></li><li><p><strong>恋人间的打情骂俏</strong></p><ul><li>女：“你昨天是不是又偷偷看我的手机了？”</li><li>男：“冤枉啊，我哪有那胆子。再说了，你的秘密我都知道，还用得着偷看？”</li><li>女：“哼，那你说说，我最近有什么秘密？”</li><li>男：“秘密就是……你越来越爱我了，对吧？”</li></ul></li><li><p><strong>熟人间的戏谑</strong></p><ul><li>D：“老张，你这发型怎么越来越像鸟窝了？”</li><li>老张：“你懂什么，这是最新的潮流，叫‘自然风’！”</li><li>D：“哦，原来是这样啊，那我得赶紧去剪一个，跟上时代的步伐。”</li></ul></li><li><p><strong>网络上的轻松挑衅</strong></p><ul><li>网友A：“听说你最近游戏水平大涨，敢不敢来一场友谊赛？”</li><li>网友B：“哼，友谊赛？别到时候输了哭鼻子哦。”</li><li>网友A：“哈哈，谁哭鼻子还不一定呢，晚上见！”</li></ul></li></ol><p>这些对话都带有一定的挑谑意味，但通常都是在友好和轻松的氛围中进行的，旨在增进彼此之间的感情和互动。然而，在使用时也需要注意场合和对方的感受，避免过度挑衅或伤害他人的感情。</p>]]></content>
      
      
      <categories>
          
          <category> 怪物猎人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怪物猎人伤害</title>
      <link href="/2025/03/15/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E8%AF%B4%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2025/03/15/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E8%AF%B4%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="世界"><a href="#世界" class="headerlink" title="世界"></a>世界</h1><ul><li><p><strong>世界等级</strong>：宇宙；1级星系；二级星系；星球；大陆(岛屿)；地域；国家；州；县；镇；村</p></li><li><p><strong>宇宙</strong>：太初宇宙，昆仑宇宙，太清宇宙。</p></li><li><p><strong>星系</strong>：</p><ul><li><strong>太初宇宙</strong>：天狼星系，太初星系，九玄星系</li><li><strong>昆仑宇宙</strong>：天狗星系，天河星系</li><li><strong>太清宇宙</strong>：天道星系</li></ul><h2 id="故事发展地址"><a href="#故事发展地址" class="headerlink" title="故事发展地址"></a>故事发展地址</h2></li><li><p>清萍宗：昆仑宇宙-天河星系-九恒星系-北玄星-九幽大陆-南域-疆国-清州-清萍宗</p></li><li><p>疆国：清州，黔州，旧州，义州，匀州，理州，江州，仁州，</p></li><li><p>黔州：疆国最大的州，最大的宗门为药宗（帝级宗门，一名药帝）</p></li><li><p>清州：清萍宗（玄级），衍月宗（玄级），如烟门（玄级），拜月门（皇级），诡秘山（皇级）—</p></li><li><p>旧州：天岳阁（天级）</p></li></ul><h2 id="宗门等级"><a href="#宗门等级" class="headerlink" title="宗门等级"></a>宗门等级</h2><ul><li>分为天，地，玄，黄，每级分三品，只有到道皇境才可开宗立派</li><li>帝级：一品：最少出过3位大帝；二品：做少二位大帝；三品：最少一位大帝</li><li>天级：一品：最少三道圣</li><li>地级：一品：做少三道尊</li><li>玄级：一品：最少三道宗</li><li>黄级：一品：最少三道皇</li></ul><h2 id="境界划分"><a href="#境界划分" class="headerlink" title="境界划分"></a>境界划分</h2><ul><li><p>每个境界分为五个阶段为初期-中期-后期-圆满-大圆满对于10-1段，每二段为阶</p></li><li><p>灵泉存储灵气-灵根转换灵气&#x3D;灵脉输送灵气</p></li><li><p>武者 -道者-小剑修(人间1品)-可吸纳身边灵气转换</p></li><li><p>武师-道宫-大剑修-开启灵泉可存储灵气-100</p></li><li><p>武王-道王-剑王-300</p></li><li><p>武天-道天-天剑-500</p></li><li><p>武皇-道皇-剑皇-1000</p></li><li><p>武宗-道宗-剑宗-2000</p></li><li><p>武尊-道尊-剑尊(核弹)-5000</p></li><li><p>武圣-道圣-剑圣-10000</p></li><li><p>武帝-大帝-剑帝9-50000</p></li><li><p>武神-神帝-剑神(爆星)</p></li><li><p>小武仙-小道仙-小剑仙</p></li><li><p>武仙-道仙-大剑仙(纪元主宰)</p></li><li><p>武祖-道祖-剑祖-丹祖-器祖(天道)</p></li></ul><h3 id="灵气攻击力"><a href="#灵气攻击力" class="headerlink" title="灵气攻击力"></a>灵气攻击力</h3><ul><li>初阶法术火球术消耗10灵气-可秒杀一头牛</li><li>角色属性：攻击力-防御力-精神力-耐力（再游戏中，读条选择释放的灵力作为防御）</li><li>基础攻击力&#x3D;（角色攻击力+武器攻击力+防具攻击力+道具攻击力）</li><li>灵气伤害&#x3D;<code>1+(消耗灵气-敌人消耗灵气防御)/220</code></li><li><strong>伤害计算公式</strong>&#x3D;<code>伤害=基础攻击力*武器锋利度*灵气伤害*属性伤害</code></li><li><strong>最终伤害</strong>&#x3D;怪物防御力-伤害</li></ul><h3 id="防御计算"><a href="#防御计算" class="headerlink" title="防御计算"></a>防御计算</h3><ul><li>基础防御&#x3D;角色防御力+武器防御力+道袍防御力+道具防御力</li><li>实际防御力&#x3D;基础防御力</li></ul><h2 id="武器等级（道器）"><a href="#武器等级（道器）" class="headerlink" title="武器等级（道器）"></a>武器等级（道器）</h2><ul><li>等级:神话-仙兵-神兵-帝兵-圣器-天级-地级-地级-玄级-黄级</li><li>下品-上品-无缺</li></ul><h2 id="丹药等级"><a href="#丹药等级" class="headerlink" title="丹药等级"></a>丹药等级</h2><ul><li>1-9品 10为仙丹</li></ul><h2 id="修炼体系"><a href="#修炼体系" class="headerlink" title="修炼体系"></a>修炼体系</h2><ul><li>修士：万物生长便有一定几率诞生灵根，灵根拥有不同属性，是作为练气士的基础，通过灵根可吸收天地灵气转换为不同元素的属性</li><li>武者：通过炼体打破人体肉身极限成为武者，肉身强度比钢铁还要坚硬</li></ul><h2 id="功法"><a href="#功法" class="headerlink" title="功法"></a>功法</h2><ul><li>功法等级：凡品，黄品，玄品，地品，天品，圣品，神品，仙品</li></ul><h3 id="心法"><a href="#心法" class="headerlink" title="心法"></a>心法</h3><table><thead><tr><th>功法</th><th>描述</th></tr></thead><tbody><tr><td>寒冰诀(凡品)</td><td>增加冰属性攻击力,减速</td></tr><tr><td>上善若水(凡品)</td><td>增加水属性攻击力，减伤</td></tr><tr><td>焚炎诀(凡品)</td><td>增加火属性攻击力,持续烧伤</td></tr><tr><td>神木功(凡品)</td><td>增加木属属性攻击力,治愈,束缚</td></tr><tr><td>岩诀(凡品)</td><td>增加土属性攻击力,高防御</td></tr><tr><td>金功(凡品)</td><td>增加金属性攻击力,速度快</td></tr><tr><td>太上忘情录</td><td></td></tr><tr><td>龙凤呈祥诀</td><td></td></tr><tr><td>玄天无极剑</td><td></td></tr><tr><td>幽冥血海经</td><td></td></tr><tr><td>碧落星辰诀</td><td></td></tr><tr><td>九阳焚天功</td><td></td></tr><tr><td>玄冰幽冥录</td><td></td></tr><tr><td>天武功</td><td></td></tr><tr><td>寒冰之境</td><td></td></tr><tr><td>圣心诀</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="攻击武技"><a href="#攻击武技" class="headerlink" title="攻击武技"></a>攻击武技</h3><table><thead><tr><th align="left">功法</th><th>描述</th></tr></thead><tbody><tr><td align="left">寒霜剑</td><td>冰魄剑(将冰凝练成剑状攻击),寒冰刺(将冰结成小型刺状攻击),</td></tr><tr><td align="left">紫霄神雷诀</td><td></td></tr><tr><td align="left"></td><td></td></tr><tr><td align="left"></td><td></td></tr><tr><td align="left"></td><td></td></tr><tr><td align="left"></td><td></td></tr><tr><td align="left"></td><td></td></tr><tr><td align="left"></td><td></td></tr></tbody></table><h3 id="防御武技"><a href="#防御武技" class="headerlink" title="防御武技"></a>防御武技</h3><table><thead><tr><th>功法</th><th>描述</th></tr></thead><tbody><tr><td>金刚不坏体</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="身法"><a href="#身法" class="headerlink" title="身法"></a>身法</h3><table><thead><tr><th>功法</th><th>描述</th></tr></thead><tbody><tr><td>幽冥鬼影步</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><table><thead><tr><th>装备名</th><th>装备类型</th><th>描述</th></tr></thead><tbody><tr><td>落炎之舞</td><td></td><td></td></tr><tr><td>逝冰之舞</td><td></td><td></td></tr><tr><td>哈尼克之心</td><td></td><td></td></tr><tr><td>冥炎剑-魂殇</td><td></td><td></td></tr><tr><td>冰陨剑</td><td></td><td></td></tr><tr><td>明光追影刀</td><td></td><td></td></tr><tr><td>天霜寒气</td><td></td><td></td></tr><tr><td>天霜</td><td></td><td></td></tr><tr><td>碎风乱波剑</td><td></td><td></td></tr><tr><td>炙炎焚天剑</td><td></td><td></td></tr><tr><td>游龙之魂</td><td></td><td></td></tr><tr><td>幽游白书</td><td></td><td></td></tr><tr><td>青龙啸月</td><td></td><td></td></tr><tr><td>龙光影翼</td><td></td><td></td></tr><tr><td>辉煌之祈</td><td></td><td></td></tr></tbody></table><h2 id="特殊体质"><a href="#特殊体质" class="headerlink" title="特殊体质"></a>特殊体质</h2><table><thead><tr><th>体质</th><th>描述</th></tr></thead><tbody><tr><td>先天剑体</td><td></td></tr><tr><td>炎阳剑体</td><td></td></tr><tr><td>寒阴剑体</td><td></td></tr><tr><td>镇域神体</td><td></td></tr><tr><td>羽冠圣体</td><td></td></tr><tr><td>大梦长身体</td><td></td></tr><tr><td>焚炎天霜体</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul><li>交易货币：灵晶</li></ul><table><thead><tr><th>名称</th><th align="left">描述</th><th>价格</th></tr></thead><tbody><tr><td>紫雷矿</td><td align="left">高山经常受雷击，由天雷劈下诞生，拥有电属性</td><td></td></tr><tr><td>金矿</td><td align="left"></td><td></td></tr><tr><td>炎焱石</td><td align="left">在火山的矿石，拥有浓郁的火属性灵气</td><td></td></tr><tr><td>冰晶石</td><td align="left">在雪山的矿石，拥有冰属性灵气</td><td></td></tr><tr><td>磁矿</td><td align="left">拥有强烈的磁性</td><td></td></tr><tr><td>治愈草</td><td align="left"></td><td></td></tr><tr><td>火炎草</td><td align="left"></td><td></td></tr><tr><td>霖霜草</td><td align="left"></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 怪物猎人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怪物猎人伤害</title>
      <link href="/2025/03/15/%E6%9D%82%E9%A1%B9/%E4%BC%A4%E5%AE%B3%E8%AE%A1%E7%AE%97/"/>
      <url>/2025/03/15/%E6%9D%82%E9%A1%B9/%E4%BC%A4%E5%AE%B3%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="w"><a href="#w" class="headerlink" title="w"></a>w</h1><ul><li><p>背包</p><ul><li>守护符:6</li><li>力量爪:9</li></ul></li><li><p>药品</p><ul><li>鬼人药大 7</li><li>鬼人粉尘 10</li><li>怪力种子 10</li><li>怪力药丸 25</li></ul><p>默认满配 <strong>42</strong>  大剑201</p><p>怪力药丸<strong>57</strong>   大剑273</p><h2 id="伤害计算公式"><a href="#伤害计算公式" class="headerlink" title="伤害计算公式"></a>伤害计算公式</h2><p>面板 &#x2F; 武器倍率 * 武器动作 &#x2F; 100 </p><p>会心伤害 * 斩味 *肉质</p><p>异常 * 愤怒 * 刃</p><p>&#x2F;100</p><p>物理伤害&#x3D;**面板 &#x2F; 武器倍率 * 武器动作 &#x2F; 100 * 会心伤害 * 斩味 <em>异常 * 愤怒 * 刃中补正</em> 惩罚 * 肉质 &#x2F;100 **</p><p>属性伤害&#x3D;**属性值 &#x2F;10 <em>斩味补正(1.2) <em>属性补正(1) * 愤怒补正 * 属性会心补正(1.5) * 异常补正 * 属性吸收 &#x2F;100</em></em></p><h2 id="武器倍率"><a href="#武器倍率" class="headerlink" title="武器倍率"></a>武器倍率</h2><table><thead><tr><th>武器</th><th>倍率</th><th>属会</th><th>真属会</th></tr></thead><tbody><tr><td>大剑</td><td>4.8</td><td>1.5</td><td>1.7</td></tr><tr><td>太刀</td><td>3.3</td><td>1.35</td><td>1.55</td></tr><tr><td>片手</td><td>1.4</td><td>1.35</td><td>1.55</td></tr><tr><td>双剑</td><td>1.4</td><td>1.35</td><td>1.55</td></tr><tr><td>大锤</td><td>5.2</td><td>1.5</td><td>1.7</td></tr><tr><td>狩猎笛</td><td>4.2</td><td>1.5</td><td>1.7</td></tr><tr><td>长枪</td><td>2.3</td><td>1.35</td><td>1.55</td></tr><tr><td>铳枪</td><td>2.3</td><td>1.35</td><td>1.55</td></tr><tr><td>战斧</td><td>3.5</td><td>1.35</td><td>1.55</td></tr><tr><td>盾斧</td><td>3.6</td><td>1.35</td><td>1.55</td></tr><tr><td>虫棍</td><td>3.1</td><td>1.35</td><td>1.55</td></tr><tr><td>轻弩</td><td>1.3</td><td>1.5</td><td>1.7</td></tr><tr><td>重弩</td><td>1.5</td><td>1.25</td><td>1.4</td></tr><tr><td>弓箭</td><td>1.5</td><td>1.35</td><td>1.55</td></tr></tbody></table></li></ul><h2 id="斩味补正"><a href="#斩味补正" class="headerlink" title="斩味补正"></a>斩味补正</h2><table><thead><tr><th>状态</th><th>物理</th><th>属性</th></tr></thead><tbody><tr><td>红</td><td>0.5</td><td>0.25</td></tr><tr><td>橙</td><td>0.75</td><td>0.5</td></tr><tr><td>黄</td><td>1</td><td>0.75</td></tr><tr><td>绿</td><td>1.125</td><td>1</td></tr><tr><td>蓝</td><td>1.25</td><td>1.0625</td></tr><tr><td>白</td><td>1.32</td><td>1.125</td></tr><tr><td>紫</td><td>1.39</td><td>1.25</td></tr></tbody></table><p>  物理伤害&#x3D;基础攻击力×斩味×动作值×会心×防御倍率×怪物肉质×（眠斩）×（刃中补正)</p><p>这里其中一个变量不用多说，自然是指不同颜色斩味本身的系数（红0.5，黄1.0，绿1.05，蓝1.2，白1.32，紫1.39）</p><p>2002乘以1.39乘以48乘以1.4</p><p>除了木桩锻炼场的木桶也是给你测试用的 木桩100<br>黑桶属性5、物理20；<br>灰桶属性10、物理38；<br>白桶属性20、物理43</p><h2 id="大剑伤害"><a href="#大剑伤害" class="headerlink" title="大剑伤害"></a>大剑伤害</h2><p>1901&#x2F;4.8<em>48&#x2F;100         * 1.4 * 1.39</em>80A&#x2F;100  &#x3D;306</p><p>属性&#x3D;180 除以 10 *1.2 *1.5 *30&#x2F;100  &#x3D;9.72</p><h2 id="弓箭补正"><a href="#弓箭补正" class="headerlink" title="弓箭补正"></a>弓箭补正</h2><ul><li><p>公式:属性值÷10x属性补正x真属性会心补正x(发怒补正x异常状态补正x全体防御率)(属性肉质÷100)</p></li><li><p>弓箭物理伤害的计算公式为：(攻击力x动作值÷100)x距离补正x瓶补正x会心伤害补正x(发怒补正x异常状态补正x全体防御率)x(物理肉质÷100)</p></li><li><p>平射7-9-10-11         0.2-0.35-0.7-0.8</p></li><li><p>刚射6-9-11-11         0.3-0.5-0.7-1</p></li><li><p>接击瓶1.18</p></li><li><p>强击瓶1.35</p></li></ul><p>33      3.7</p>]]></content>
      
      
      <categories>
          
          <category> 怪物猎人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怪物猎人伤害</title>
      <link href="/2025/03/15/%E6%9D%82%E9%A1%B9/html/"/>
      <url>/2025/03/15/%E6%9D%82%E9%A1%B9/html/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li>Text</li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-color.html">color</a></td><td align="left">设置文本颜色</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-direction.html">direction</a></td><td align="left">设置文本方向。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-letter-spacing.html">letter-spacing</a></td><td align="left">设置字符间距</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-dim-line-height.html">line-height</a></td><td align="left">设置行高</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-text-align.html">text-align</a></td><td align="left">对齐元素中的文本</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-text-decoration.html">text-decoration</a></td><td align="left">向文本添加修饰</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-text-indent.html">text-indent</a></td><td align="left">缩进元素中文本的首行</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/css3-pr-text-shadow.html">text-shadow</a></td><td align="left">设置文本阴影</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-text-transform.html">text-transform</a></td><td align="left">控制元素中的字母</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-unicode-bidi.html">unicode-bidi</a></td><td align="left">设置或返回文本是否被重写</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-pos-vertical-align.html">vertical-align</a></td><td align="left">设置元素的垂直对齐</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-white-space.html">white-space</a></td><td align="left">设置元素中空白的处理方式</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-text-word-spacing.html">word-spacing</a></td><td align="left">设置字间距</td></tr></tbody></table><ul><li>Fonst</li></ul><table><thead><tr><th align="left">Property</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-font.html">font</a></td><td align="left">在一个声明中设置所有的字体属性</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-family.html">font-family</a></td><td align="left">指定文本的字体系列</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-size.html">font-size</a></td><td align="left">指定文本的字体大小</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-style.html">font-style</a></td><td align="left">指定文本的字体样式</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-variant.html">font-variant</a></td><td align="left">以小型大写字体或者正常字体显示文本。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-font-weight.html">font-weight</a></td><td align="left">指定字体的粗细。</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>声明</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;自定义类名&quot;</span>&gt;</span>链接网址<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>link</td><td>正常，未访问过的链接<code>.自定义类名:link&#123;color:#000000;&#125;</code></td></tr><tr><td>visited</td><td>用户已访问过的链接<code>.自定义类名:visited&#123;color:#00FF00;&#125;</code></td></tr><tr><td>hover</td><td>当用户鼠标放在链接上时<code>.自定义类名:hover&#123;color:#FF00FF;&#125; </code></td></tr><tr><td>active</td><td>链接被点击的那一刻<code>.自定义类名:active&#123;color:#0000FF;&#125;</code></td></tr></tbody></table><ul><li>修饰</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link &#123;text-decoration:none;&#125;</span><br><span class="line">a:visited &#123;text-decoration:none;&#125;</span><br><span class="line">a:hover &#123;text-decoration:underline;&#125;</span><br><span class="line">a:active &#123;text-decoration:underline;&#125;</span><br></pre></td></tr></table></figure><ul><li>背景颜色</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link &#123;background-color:#B2FF99;&#125;</span><br><span class="line">a:visited &#123;background-color:#FFFF85;&#125;</span><br><span class="line">a:hover &#123;background-color:#FF704D;&#125;</span><br><span class="line">a:active &#123;background-color:#FF704D;&#125;</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><ol></td><td align="left">定义有序列表</td></tr><tr><td align="left"><ul></td><td align="left">定义无序列表</td></tr><tr><td align="left"><li></td><td align="left">定义列表项</td></tr><tr><td align="left"><dl></td><td align="left">定义列表</td></tr><tr><td align="left"><dt></td><td align="left">自定义列表项目</td></tr><tr><td align="left"><dd></td><td align="left">定义自定列表项的描述</td></tr></tbody></table><h2 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    border: 25px solid green;(边框)</span><br><span class="line">    padding: 25px;(内边距)</span><br><span class="line">    margin: 25px;(内容)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Luojiangbao015/luojiangbao.github.io.git">https://github.com/Luojiangbao015/luojiangbao.github.io.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 怪物猎人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机英语</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/%E9%80%9A%E7%94%A8/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/%E9%80%9A%E7%94%A8/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明:"></a>文档说明:</h1><ul><li>记录一些学习编程常用到的语法,提供学习参考</li></ul><h1 id="游戏英语"><a href="#游戏英语" class="headerlink" title="游戏英语"></a>游戏英语</h1><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><table><thead><tr><th>英文名</th><th>中文名</th></tr></thead><tbody><tr><td>Object</td><td>对象</td></tr><tr><td>Root</td><td>根</td></tr><tr><td>Layer</td><td>层</td></tr><tr><td>status</td><td>状态</td></tr><tr><td>Stats</td><td>属性</td></tr><tr><td>变量</td><td>variable</td></tr><tr><td>Activity</td><td>活动</td></tr><tr><td>Enemy</td><td>敌人</td></tr><tr><td>Monster</td><td>怪物</td></tr><tr><td>Player</td><td>玩家</td></tr><tr><td>Role</td><td>角色</td></tr><tr><td>World</td><td>世界</td></tr><tr><td>Enter</td><td>进入</td></tr><tr><td>Accept</td><td>接收</td></tr><tr><td>collision</td><td>碰撞</td></tr><tr><td>Area</td><td>区域</td></tr><tr><td>animation</td><td>动画</td></tr><tr><td>Filed</td><td>存档</td></tr></tbody></table><h3 id="方法动词"><a href="#方法动词" class="headerlink" title="方法动词"></a>方法动词</h3><h4 id="数据处理与操作"><a href="#数据处理与操作" class="headerlink" title="数据处理与操作"></a>数据处理与操作</h4><table><thead><tr><th>动词</th><th>解释</th></tr></thead><tbody><tr><td><strong>add</strong></td><td>向数据结构（如数组、列表、集合）中添加元素，或向数据库表中插入新记录。</td></tr><tr><td><strong>remove</strong></td><td>从数据结构或数据库中移除元素或记录。</td></tr><tr><td><strong>increment</strong></td><td>增加某个数值变量的值，通常用于计数器。</td></tr><tr><td><strong>decrement</strong></td><td>减少某个数值变量的值，与increment相反。</td></tr><tr><td><strong>insert</strong></td><td>在数据结构的特定位置插入元素，或在数据库表的特定位置插入新记录。</td></tr><tr><td><strong>delete</strong></td><td>从数据结构或数据库中删除元素或记录，与remove类似，但更强调从集合中移除并可能涉及数据库操作。</td></tr><tr><td><strong>update</strong></td><td>修改数据结构中的元素值，或更新数据库表中的记录。</td></tr><tr><td><strong>retrieve</strong></td><td>从数据结构或数据库中检索（查询）信息，但不进行修改。</td></tr><tr><td><strong>query</strong></td><td>对数据库执行查询操作，以检索满足特定条件的数据。</td></tr><tr><td><strong>sort</strong></td><td>对数据结构中的元素进行排序。</td></tr><tr><td><strong>filter</strong></td><td>根据特定条件筛选数据结构中的元素。</td></tr></tbody></table><h4 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h4><table><thead><tr><th>动词</th><th>解释</th></tr></thead><tbody><tr><td><strong>start</strong></td><td>开始执行某个程序、过程或任务。</td></tr><tr><td><strong>stop</strong></td><td>停止执行当前程序、过程或任务。</td></tr><tr><td><strong>run</strong></td><td>运行程序或代码块。</td></tr><tr><td><strong>pause</strong></td><td>暂停程序的执行，可以在之后恢复。</td></tr><tr><td><strong>resume</strong></td><td>恢复之前被暂停的程序的执行。</td></tr><tr><td><strong>continue</strong></td><td>在循环中跳过当前迭代的剩余部分，并继续下一次迭代。</td></tr><tr><td><strong>break</strong></td><td>完全退出循环或条件语句。</td></tr><tr><td><strong>return</strong></td><td>从函数或方法中返回结果或值，并结束执行。</td></tr><tr><td><strong>exit</strong></td><td>退出当前程序或脚本的执行。</td></tr><tr><td><strong>loop</strong></td><td>重复执行一段代码，直到满足特定条件为止。</td></tr><tr><td><strong>iterate</strong></td><td>遍历数据结构（如数组、列表）中的每个元素，并对每个元素执行操作。</td></tr></tbody></table><h4 id="对象与类操作"><a href="#对象与类操作" class="headerlink" title="对象与类操作"></a>对象与类操作</h4><table><thead><tr><th>动词</th><th>解释</th></tr></thead><tbody><tr><td><strong>create</strong></td><td>创建新的对象实例。</td></tr><tr><td><strong>destroy</strong></td><td>销毁对象实例，释放其占用的资源。</td></tr><tr><td><strong>instantiate</strong></td><td>实例化一个类的对象，即创建该类的对象实例。</td></tr><tr><td><strong>clone</strong></td><td>创建对象的深拷贝或浅拷贝。</td></tr><tr><td><strong>modify</strong></td><td>修改对象的属性或状态。</td></tr><tr><td><strong>extend</strong></td><td>在面向对象编程中，通过继承来扩展类的功能。</td></tr><tr><td><strong>inherit</strong></td><td>子类继承父类的属性和方法。</td></tr><tr><td><strong>override</strong></td><td>在子类中重写（覆盖）父类的方法。</td></tr><tr><td><strong>implement</strong></td><td>实现接口或抽象类中的方法。</td></tr></tbody></table><h4 id="文件与资源管理"><a href="#文件与资源管理" class="headerlink" title="文件与资源管理"></a>文件与资源管理</h4><table><thead><tr><th>动词</th><th>解释</th></tr></thead><tbody><tr><td><strong>open</strong></td><td>打开文件、数据库连接或资源以供读写。</td></tr><tr><td><strong>close</strong></td><td>关闭文件、数据库连接或资源，释放相关资源。</td></tr><tr><td><strong>read</strong></td><td>从文件、输入流或数据源中读取数据。</td></tr><tr><td><strong>write</strong></td><td>向文件、输出流或数据源写入数据。</td></tr><tr><td><strong>save</strong></td><td>保存数据到文件、数据库或持久化存储中。</td></tr><tr><td><strong>load</strong></td><td>从文件、数据库或持久化存储中加载数据。</td></tr><tr><td><strong>delete</strong></td><td>删除文件、数据库记录或资源。</td></tr><tr><td><strong>move</strong></td><td>移动文件或资源到新的位置。</td></tr><tr><td><strong>copy</strong></td><td>复制文件或资源到新的位置。</td></tr><tr><td><strong>rename</strong></td><td>重命名文件或资源。</td></tr></tbody></table><h4 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h4><table><thead><tr><th>动词</th><th>解释</th></tr></thead><tbody><tr><td><strong>send</strong></td><td>发送数据到网络上的另一个设备、服务器或客户端。</td></tr><tr><td><strong>receive</strong></td><td>从网络上的另一个设备、服务器或客户端接收数据。</td></tr><tr><td><strong>connect</strong></td><td>建立到服务器、数据库或网络资源的连接。</td></tr><tr><td><strong>disconnect</strong></td><td>断开与服务器、数据库或网络资源的连接。</td></tr><tr><td><strong>listen</strong></td><td>在特定端口上监听传入的连接请求。</td></tr><tr><td><strong>request</strong></td><td>向服务器发送请求以获取数据或执行操作。</td></tr><tr><td><strong>respond</strong></td><td>对客户端的请求进行响应，发送数据或结果。</td></tr><tr><td><strong>synchronize</strong></td><td>同步两个或多个数据源或设备之间的数据。</td></tr></tbody></table><p>这些动词在编程中非常常见，它们构成了编程活动的基础。通过组合这些动词和其他编程元素（如变量、条件语句、循环等），程序员可以创建出各种功能强大的程序。</p><h3 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h3><table><thead><tr><th>英文名</th><th>中文名</th></tr></thead><tbody><tr><td>resource,property</td><td>资源</td></tr><tr><td>music,bgm</td><td>音乐</td></tr><tr><td>spirit</td><td>精灵图片</td></tr><tr><td>script</td><td>脚本</td></tr><tr><td>scene,map</td><td>场景</td></tr></tbody></table><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性名称</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>暴击率</td><td>CRT (Crit Rate)</td><td>角色在攻击时触发暴击的概率</td></tr><tr><td>攻击力</td><td>ATK (Attack)</td><td>角色每次攻击造成的基础伤害值</td></tr><tr><td>防御力</td><td>DEF (Defense)</td><td>角色减少来自敌人攻击伤害的能力</td></tr><tr><td>暴击伤害</td><td>CRIT (Crit Dmg)</td><td>角色触发暴击时，额外造成的伤害值或伤害倍率</td></tr><tr><td>生命值</td><td>HP (Health Points)</td><td>角色的生命值，当生命值归零时，角色会死亡或失去战斗能力</td></tr><tr><td>魔法值</td><td>MP (Mana Points)</td><td>角色释放技能或魔法时所需的能量值</td></tr><tr><td>命中率</td><td>HIT (Hit Rate)</td><td>角色攻击时成功命中目标的概率</td></tr><tr><td>闪避率</td><td>EVA (Evasion)</td><td>角色躲避敌人攻击的概率</td></tr><tr><td>移动速度</td><td>MOV (Movement Speed)</td><td>角色在地图上移动的速度</td></tr><tr><td>攻击速度</td><td>ASP (Attack Speed)</td><td>角色发动攻击的频率或速度</td></tr><tr><td>技能冷却时间</td><td>CD (Cooldown)</td><td>角色释放技能后，需要等待多久才能再次释放该技能的时间</td></tr></tbody></table><h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Left, right, up and down</span><br><span class="line"></span><br><span class="line">//this 这</span><br><span class="line">//the 该/这</span><br><span class="line">//is 是 /be 是</span><br><span class="line">//will 将</span><br><span class="line">//and 和</span><br><span class="line">//on 在</span><br><span class="line">//if 如果</span><br><span class="line">//of 的</span><br><span class="line">//to 来</span><br><span class="line">//in 在</span><br><span class="line"></span><br><span class="line">//this converter will receive a value and return return a cisbiility depending on the value</span><br><span class="line">//该转换器将接收一个值，并根据该值返回一个属性</span><br><span class="line">//if the value is true the return value will be visibility visible otherwise, the return</span><br><span class="line">//如果该值为true，则返回值将是可见的，否则返回</span><br><span class="line">//this is an example of how to use this converter in xaml</span><br><span class="line">//下面是如何在xaml中使用此转换器的示例</span><br><span class="line"></span><br><span class="line">//&lt;para&gt;if this &lt;see langword=&quot;bool&quot;/&gt; hahah&lt;see cref=&quot;vis.vis&quot;/&gt;:&lt;br/&gt;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="计算机英语"><a href="#计算机英语" class="headerlink" title="计算机英语"></a>计算机英语</h1><p>在计算机科学和技术领域，英语是一种普遍使用的语言，特别是在编程、软件开发、硬件设计、网络工程以及相关的文档和研究中。以下是一些在计算机英语中常见的术语和短语：</p><h3 id="基础术语"><a href="#基础术语" class="headerlink" title="基础术语:"></a>基础术语:</h3><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Computer</td><td>计算机</td></tr><tr><td>Hardware</td><td>硬件</td></tr><tr><td>Software</td><td>软件</td></tr><tr><td>Operating System (OS)</td><td>操作系统</td></tr><tr><td>Programming</td><td>编程</td></tr><tr><td>Algorithm</td><td>算法</td></tr><tr><td>Data</td><td>数据</td></tr><tr><td>Memory</td><td>存储器</td></tr><tr><td>Processor&#x2F;CPU</td><td>处理器&#x2F;中央处理器</td></tr><tr><td>Storage</td><td>存储</td></tr><tr><td>Interface</td><td>接口</td></tr><tr><td>Network</td><td>网络</td></tr><tr><td>Internet</td><td>互联网</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="编程和软件开发"><a href="#编程和软件开发" class="headerlink" title="编程和软件开发 :"></a>编程和软件开发 :</h3><table><thead><tr><th align="center">序号</th><th align="center">术语</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Firewall</td><td align="center"><code>防火墙</code>，是一种网络安全系统，用于监控和控制进出网络的网络通信，以保护内部网络资源免受未经授权的访问和恶意攻击。</td></tr><tr><td align="center">2</td><td align="center">VPN (Virtual Private Network)</td><td align="center"><code>虚拟私人网络</code>，是一种通过公共网络（如互联网）建立加密通道的技术，允许远程用户或分支机构安全地访问组织内部网络资源。</td></tr><tr><td align="center">3</td><td align="center">Router</td><td align="center"><code>路由器</code>，是一种网络设备，用于在不同的网络之间转发数据包，实现网络之间的互连和通信。</td></tr><tr><td align="center">4</td><td align="center">Switch</td><td align="center"><code>交换机</code>，是一种网络设备，用于在局域网（LAN）内部转发数据包，实现设备之间的通信。</td></tr><tr><td align="center">5</td><td align="center">Security</td><td align="center"><code>安全性</code>，指的是保护系统、网络或数据免受未经授权的访问、使用、泄露、中断、修改或破坏的能力。</td></tr><tr><td align="center">6</td><td align="center">Encryption</td><td align="center"><code>加密</code>，是一种将信息（称为明文）转换为难以读取的格式（称为密文）的过程，以保护数据的机密性。</td></tr><tr><td align="center">7</td><td align="center">Decryption</td><td align="center"><code>解密</code>，是加密的逆过程，即将密文转换回原始明文的过程。</td></tr><tr><td align="center">8</td><td align="center">Hacker</td><td align="center"><code>黑客</code>，原指对计算机科学和技术有高度理解和运用能力的人，但在现代语境中，常指未经授权侵入计算机系统或网络的人。</td></tr><tr><td align="center">9</td><td align="center">Malware&#x2F;Virus&#x2F;Trojan Horse</td><td align="center"><code>恶意软件/病毒/特洛伊木马</code>，是恶意软件的几种形式。恶意软件是旨在损害计算机、服务器或计算机网络正常运行或数据的软件。病毒是一种自我复制并感染其他程序的恶意软件。特洛伊木马是一种伪装成合法软件的恶意软件，用于欺骗用户执行恶意操作。</td></tr><tr><td align="center">10</td><td align="center">Phishing</td><td align="center"><code>网络钓鱼</code>，是一种网络欺诈手段，通过伪装成可信的实体（如银行、在线零售商等）来诱骗用户提供敏感信息（如用户名、密码、信用卡信息等）。</td></tr><tr><td align="center">11</td><td align="center">Ransomware</td><td align="center"><code>勒索软件</code>，是一种恶意软件，它通过加密用户的文件或锁定计算机屏幕来阻止用户访问其数据，并要求支付赎金以换取解密密钥或解锁计算机。</td></tr></tbody></table><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><table><thead><tr><th align="center">序号</th><th align="center">术语</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Database</td><td align="center"><code>数据库</code>，是一种用于存储、检索和管理大量数据的系统。它允许用户以结构化的方式存储数据，并提供了多种方式来查询、更新和删除数据。</td></tr><tr><td align="center">2</td><td align="center">SQL (Structured Query Language)</td><td align="center"><code>结构化查询语言</code>，是一种用于访问和操作数据库的标准编程语言。它允许用户执行各种数据库操作，如数据查询、插入、更新和删除。</td></tr><tr><td align="center">3</td><td align="center">NoSQL</td><td align="center"><code>非关系型数据库</code>，是一种与关系型数据库（如MySQL、Oracle）不同的数据库管理系统。NoSQL数据库通常不遵循传统的表格结构，而是支持更灵活的数据模型，如键值对、文档、列族和图结构等。</td></tr><tr><td align="center">4</td><td align="center">ORM (Object-Relational Mapping)</td><td align="center"><code>对象关系映射</code>，是一种编程技术，用于将面向对象编程语言中的对象与关系型数据库中的表进行映射。ORM简化了数据库操作，使得开发者可以用面向对象的方式来处理数据库数据。</td></tr><tr><td align="center">5</td><td align="center">Data Warehouse</td><td align="center"><code>数据仓库</code>，是一个面向主题的、集成的、相对稳定的、随时间不断变化的数据集合，用于支持管理决策过程。数据仓库通常包含来自多个数据源的历史数据，并经过清洗、转换和加载（ETL）过程以支持复杂的查询和分析。</td></tr><tr><td align="center">6</td><td align="center">Data Mining</td><td align="center"><code>数据挖掘</code>，是指从大量数据中提取或“挖掘”出未知的、有价值的、且最终可理解的信息或模式的过程。数据挖掘通常用于发现业务趋势、预测未来事件、识别欺诈行为等。</td></tr></tbody></table><h3 id="硬件相关"><a href="#硬件相关" class="headerlink" title="硬件相关:"></a>硬件相关:</h3><p>将您提供的计算机硬件相关术语转换为表格的形式如下：</p><table><thead><tr><th align="center">序号</th><th align="center">术语</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Motherboard</td><td align="center"><code>主板，也称为系统板或母板</code>，是计算机中所有其他组件的基础平台。它包含CPU插槽、内存插槽、扩展插槽、芯片组和其他连接计算机的各个部件的电路。</td></tr><tr><td align="center">2</td><td align="center">RAM (Random Access Memory)</td><td align="center"><code>随机存取存储器</code>，是一种允许数据在任意位置被快速访问的计算机存储器。RAM是易失性的，即当计算机关闭时，存储在RAM中的数据会丢失。RAM对于计算机的运行至关重要，因为它存储了CPU正在处理的数据和指令。</td></tr><tr><td align="center">3</td><td align="center">ROM (Read-Only Memory)</td><td align="center"><code>只读存储器</code>，是一种只能读取数据而不能写入数据的计算机存储器。ROM通常用于存储计算机的启动指令（BIOS或UEFI固件）或其他不需要更改的数据。</td></tr><tr><td align="center">4</td><td align="center">HDD (Hard Disk Drive)</td><td align="center"><code>硬盘驱动器</code>，是一种使用旋转磁盘和读写磁头来存储和检索数据的存储设备。HDD是计算机中最常见的存储设备之一，具有大容量和相对较低的成本。然而，与SSD相比，HDD的访问速度较慢。</td></tr><tr><td align="center">5</td><td align="center">SSD (Solid State Drive)</td><td align="center"><code>固态硬盘</code>，是一种使用固态电子存储芯片（如NAND闪存）作为存储介质的存储设备。SSD比HDD具有更快的访问速度和更高的可靠性，但成本通常更高。SSD已成为现代计算机和笔记本电脑中的主流存储设备。</td></tr><tr><td align="center">6</td><td align="center">GPU (Graphics Processing Unit)</td><td align="center"><code>图形处理单元</code>，是一种专门用于处理图形和图像数据的微处理器。GPU通常包含大量的处理核心，能够并行处理大量的数据，从而在处理图形密集型任务（如游戏、视频编辑和3D建模）时提供更高的性能。</td></tr><tr><td align="center">7</td><td align="center">USB (Universal Serial Bus)</td><td align="center"><code>通用串行总线</code>，是一种用于连接计算机和外部设备的接口标准。USB支持热插拔和即插即用功能，使得用户可以在计算机运行时连接或断开设备，而无需关闭计算机。USB接口广泛用于连接键盘、鼠标、打印机、外部硬盘、智能手机等多种设备。</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h3><table><thead><tr><th align="center">序号</th><th align="center">术语</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">User Interface (UI)</td><td align="center"><code>用户界面</code>，是用户与计算机或软件程序进行交互的媒介。它包括了屏幕上的所有元素，如按钮、菜单、图标、文本框等，以及这些元素如何响应用户的操作。</td></tr><tr><td align="center">2</td><td align="center">User Experience (UX)</td><td align="center"><code>用户体验</code>，是指用户在使用产品或服务时所感受到的整体体验。它涵盖了用户与产品或服务交互的各个方面，包括界面设计、交互设计、信息架构、可用性等，旨在提高用户的满意度和忠诚度。</td></tr><tr><td align="center">3</td><td align="center">Bug</td><td align="center"><code>缺陷/错误</code>，是指软件或硬件中存在的、导致程序无法按预期运行或产生不正确结果的问题。开发者需要识别、修复并测试这些bug以确保软件的稳定性和可靠性。</td></tr><tr><td align="center">4</td><td align="center">Error</td><td align="center"><code>错误</code>，通常指的是在程序执行过程中发生的异常情况或问题，它可能导致程序崩溃、数据丢失或产生不正确的结果。错误可以由多种因素引起，如编程错误、硬件故障、资源不足等。</td></tr><tr><td align="center">5</td><td align="center">Patch&#x2F;Update</td><td align="center"><code>补丁/更新</code>，是用于修复软件中的已知问题、改进性能或添加新功能的软件更新包。补丁通常针对特定的bug或安全漏洞进行修复，而更新则可能包含更广泛的改进和新增功能。</td></tr><tr><td align="center">6</td><td align="center">Cloud Computing</td><td align="center"><code>云计算</code>，是一种基于互联网的计算方式和服务模式。它允许用户通过网络访问和共享计算资源、存储资源和信息资源，而无需拥有或管理自己的计算设施和服务。云计算具有灵活性高、可扩展性强、成本效益好等优点。</td></tr><tr><td align="center">7</td><td align="center">AI (Artificial Intelligence)</td><td align="center"><code>人工智能</code>，是计算机科学的一个分支，旨在开发能够执行通常需要人类智能才能完成的任务的计算机系统。AI技术包括机器学习、自然语言处理、计算机视觉等多个领域，广泛应用于智能机器人、自动驾驶、智能客服等多个领域。</td></tr><tr><td align="center">8</td><td align="center">ML (Machine Learning)</td><td align="center"><code>机器学习</code>，是人工智能的一个子领域，它使计算机系统能够自动地从数据中学习并改进其性能，而无需进行明确的编程。机器学习算法可以识别数据中的模式和关系，并据此做出预测或决策。</td></tr><tr><td align="center">9</td><td align="center">DL (Deep Learning)</td><td align="center"><code>深度学习</code>，是机器学习的一个分支，它使用深度神经网络（DNN）来模拟人脑的学习过程。深度学习算法能够处理大量的数据并自动提取特征，从而在许多任务上取得了显著的性能提升，如图像识别、语音识别和自然语言处理等。</td></tr><tr><td align="center">10</td><td align="center">IoT (Internet of Things)</td><td align="center"><code>物联网</code>，是指通过信息传感设备（如射频识别、红外感应器、全球定位系统、激光扫描器等）将任何物品与互联网连接起来，进行信息交换和通信，以实现智能化识别、定位、跟踪、监控和管理的一种网络。物联网技术广泛应用于智能家居、智慧城市、工业制造等多个领域。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot着色器</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/%E7%9D%80%E8%89%B2%E5%99%A8/godot%E7%9D%80%E8%89%B2%E5%99%A8/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/%E7%9D%80%E8%89%B2%E5%99%A8/godot%E7%9D%80%E8%89%B2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="三渲二"><a href="#三渲二" class="headerlink" title="三渲二"></a>三渲二</h1><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>自己改的</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode ambient_light_disabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uniform sampler2D base:source_color;</span><br><span class="line">uniform sampler2D sss:source_color;</span><br><span class="line">uniform sampler2D ilm:source_color;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shinese= <span class="number">32.0f</span>; <span class="comment">//高光范围</span></span><br><span class="line">uniform <span class="type">float</span> shade_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">0.3</span>;</span><br><span class="line">uniform <span class="type">float</span> spec_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">0.1</span>)=<span class="number">0.05f</span>;</span><br><span class="line">uniform <span class="type">float</span> test:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">0.5f</span>; <span class="comment">//亮度</span></span><br><span class="line"></span><br><span class="line">varying vec4 v_color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">v_color = COLOR; <span class="comment">//获取顶的色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">light</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">float</span> fade_ao_weight = v_color.r; <span class="comment">// 顶点色提供的环境光遮蔽</span></span><br><span class="line">vec3 base_color = <span class="built_in">texture</span>(base,UV).rgb; <span class="comment">//基础颜色</span></span><br><span class="line">vec3 shade_color = <span class="built_in">texture</span>(sss,UV).rgb; <span class="comment">//阴影颜色</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> shadow_weight = <span class="built_in">texture</span>(ilm, UV).g; <span class="comment">//阴影权重,发梢</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> LdotN = <span class="built_in">dot</span>(LIGHT, NORMAL);</span><br><span class="line"><span class="type">float</span> shade = LdotN*fade_ao_weight;</span><br><span class="line"><span class="type">float</span> factor = LdotN*shadow_weight*fade_ao_weight; <span class="comment">//假ao的用法 通过贴图AO和法线AO重叠</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> is_shade = <span class="built_in">step</span>(shade_threshold, shade); <span class="comment">//调整阴影范围</span></span><br><span class="line"><span class="keyword">if</span>(is_shade&gt;<span class="number">0.0f</span>)&#123;</span><br><span class="line">DIFFUSE_LIGHT += base_color*(LIGHT_COLOR*test);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">DIFFUSE_LIGHT += (base_color+fade_ao_weight)*shade_color*(LIGHT_COLOR*test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本村轮廓线,添加线条细节</span></span><br><span class="line">vec3 outline_color = <span class="built_in">texture</span>(ilm, UV).aaa; </span><br><span class="line">DIFFUSE_LIGHT *= outline_color;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> spec_mask = <span class="built_in">texture</span>(ilm,UV).r; <span class="comment">//ilm.r 高光mask 高光范围</span></span><br><span class="line"><span class="type">float</span> spec_shape = <span class="built_in">texture</span>(ilm,UV).b; <span class="comment">//高光形状mask</span></span><br><span class="line"><span class="comment">//float shininess = 100.f;</span></span><br><span class="line"></span><br><span class="line">vec3 halfwayDir = <span class="built_in">normalize</span>(LIGHT + VIEW); <span class="comment">//获取法向?</span></span><br><span class="line"><span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(NORMAL, halfwayDir), <span class="number">0.0</span>), shinese); </span><br><span class="line"></span><br><span class="line">spec = spec*spec_mask*spec_shape;</span><br><span class="line"><span class="type">float</span> sm_spec = <span class="built_in">step</span>(spec_threshold,spec);</span><br><span class="line"></span><br><span class="line">SPECULAR_LIGHT += base_color* sm_spec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void fragment() </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//vec4 albedo_tex = texture(base, UV);</span></span><br><span class="line"><span class="comment">//ALBEDO=albedo_tex.rgb;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><ul><li>教程改的</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode ambient_light_disabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uniform sampler2D base:source_color;</span><br><span class="line">uniform sampler2D sss:source_color;</span><br><span class="line">uniform sampler2D ilm:source_color;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shinese= <span class="number">32.0f</span>;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shade_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">0.3</span>;</span><br><span class="line">uniform <span class="type">float</span> spec_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">0.01</span>)=<span class="number">0.05f</span>;</span><br><span class="line"></span><br><span class="line">varying vec4 v_color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">v_color = COLOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">light</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">float</span> LdotN = <span class="built_in">dot</span>(LIGHT, NORMAL);</span><br><span class="line"></span><br><span class="line">vec3 base_color = <span class="built_in">texture</span>(base,UV).rgb; <span class="comment">//基础颜色</span></span><br><span class="line">vec3 shade_color = <span class="built_in">texture</span>(sss,UV).rgb; <span class="comment">//阴影颜色</span></span><br><span class="line">vec3 outline_color = <span class="built_in">texture</span>(ilm, UV).aaa; <span class="comment">//本村轮廓线</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> shadow_weight = <span class="built_in">texture</span>(ilm, UV).g; <span class="comment">//阴影权重</span></span><br><span class="line"><span class="type">float</span> fade_ao_weight = v_color.r; <span class="comment">// 顶点色提供的环境光遮蔽</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> shade = LdotN*shadow_weight*fade_ao_weight;</span><br><span class="line"><span class="type">float</span> is_shade = <span class="built_in">step</span>(shade_threshold, shade);</span><br><span class="line"><span class="keyword">if</span>(is_shade&gt;<span class="number">0.0f</span>)&#123;</span><br><span class="line">DIFFUSE_LIGHT += base_color;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">DIFFUSE_LIGHT += (base_color+fade_ao_weight)*shade_color;</span><br><span class="line">&#125;</span><br><span class="line">DIFFUSE_LIGHT *= outline_color;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//高光计算</span></span><br><span class="line"><span class="comment">//布林高光</span></span><br><span class="line"><span class="type">float</span> spec_mask = <span class="built_in">texture</span>(ilm,UV).r;</span><br><span class="line"><span class="type">float</span> spec_shape = <span class="built_in">texture</span>(ilm,UV).b;</span><br><span class="line"><span class="type">float</span> shininess = <span class="number">32.0f</span>;</span><br><span class="line"></span><br><span class="line">vec3 halfwayDir = <span class="built_in">normalize</span>(LIGHT + VIEW);</span><br><span class="line"><span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(NORMAL, halfwayDir), <span class="number">0.0</span>), shininess); </span><br><span class="line"></span><br><span class="line">spec = spec*spec_mask;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> sm_spec = <span class="built_in">step</span>(spec_threshold,spec*spec_shape);</span><br><span class="line"></span><br><span class="line">SPECULAR_LIGHT += base_color* sm_spec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>轮廓</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode unshaded, cull_front; <span class="comment">//无光照，前面剔除</span></span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> strength:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">01</span>) = <span class="number">0.002</span>; <span class="comment">//轮廓粗细</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">vec3 offset = NORMAL;  <span class="comment">// 我们要向法线方向膨胀</span></span><br><span class="line"><span class="comment">//计算顶点到摄像机的距离</span></span><br><span class="line"><span class="type">float</span> v2c_dist = <span class="built_in">clamp</span>((MODELVIEW_MATRIX * <span class="built_in">vec4</span>(VERTEX, <span class="number">1.0</span>)).z * <span class="number">-1.0</span>,<span class="number">0.0</span>,<span class="number">50.0</span>);</span><br><span class="line">offset.z *= COLOR.b; <span class="comment">//顶点颜色.b 是法线z值偏移系数。值大就越往镜头，值小就越远离尽头陷入模型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//COLOR.a 是精细控制轮廓线粗细</span></span><br><span class="line">VERTEX += offset*strength*COLOR.a*v2c_dist*COLOR.g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fragment</span><span class="params">()</span></span>&#123;</span><br><span class="line">ALBEDO = <span class="built_in">vec3</span>(<span class="number">0.0f</span>); <span class="comment">//直接弄成黑色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>贴画decal</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode ambient_light_disabled;</span><br><span class="line"></span><br><span class="line">uniform sampler2D decal;</span><br><span class="line">uniform sampler2D base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">light</span><span class="params">()</span></span>&#123;</span><br><span class="line">vec4 decal_color = <span class="built_in">texture</span>(decal,UV);</span><br><span class="line">ALPHA = (decal_color.r<span class="number">-0.5</span>)/<span class="number">0.5f</span>;</span><br><span class="line">DIFFUSE_LIGHT += decal_color.rgb/<span class="number">0.5f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兰伯特光照"><a href="#兰伯特光照" class="headerlink" title="兰伯特光照"></a>兰伯特光照</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode ambient_light_disabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uniform sampler2D base;</span><br><span class="line">uniform sampler2D sss;</span><br><span class="line">uniform sampler2D ilm;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shinese= <span class="number">32.0f</span>; <span class="comment">//高光范围</span></span><br><span class="line">uniform <span class="type">float</span> shade_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">0.3</span>;</span><br><span class="line">uniform <span class="type">float</span> spec_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">0.1</span>)=<span class="number">0.05f</span>;</span><br><span class="line"></span><br><span class="line">varying vec4 v_color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">v_color = COLOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">light</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vec3 base_color = <span class="built_in">texture</span>(base,UV).rgb; <span class="comment">//基础颜色</span></span><br><span class="line">vec3 shade_color = <span class="built_in">texture</span>(sss,UV).rgb; <span class="comment">//阴影颜色</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> shadow_weight = <span class="built_in">texture</span>(ilm, UV).g; <span class="comment">//阴影权重</span></span><br><span class="line"><span class="type">float</span> fade_ao_weight = v_color.r; <span class="comment">// 顶点色提供的环境光遮蔽</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> LdotN = <span class="built_in">dot</span>(LIGHT, NORMAL);</span><br><span class="line"><span class="type">float</span> shade = LdotN*shadow_weight*fade_ao_weight;</span><br><span class="line"><span class="type">float</span> is_shade = <span class="built_in">step</span>(shade_threshold, shade);</span><br><span class="line"><span class="keyword">if</span>(is_shade&gt;<span class="number">0.0f</span>)&#123;</span><br><span class="line">DIFFUSE_LIGHT += base_color;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">DIFFUSE_LIGHT += (base_color+fade_ao_weight)*shade_color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fragment</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vec4 albedo_tex = <span class="built_in">texture</span>(base, UV);</span><br><span class="line">ALBEDO=albedo_tex.rgb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收灯光颜色</span></span><br><span class="line">shader_type spatial;</span><br><span class="line">render_mode ambient_light_disabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uniform sampler2D base:source_color;</span><br><span class="line">uniform sampler2D sss:source_color;</span><br><span class="line">uniform sampler2D ilm:source_color;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shinese= <span class="number">32.0f</span>;</span><br><span class="line"></span><br><span class="line">uniform <span class="type">float</span> shade_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">0.3</span>;</span><br><span class="line">uniform <span class="type">float</span> spec_threshold:<span class="built_in">hint_range</span>(<span class="number">0</span>,<span class="number">0.01</span>)=<span class="number">0.05f</span>;</span><br><span class="line"></span><br><span class="line">varying vec4 v_color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">v_color = COLOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">light</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">float</span> LdotN = <span class="built_in">dot</span>(LIGHT, NORMAL);</span><br><span class="line">    </span><br><span class="line">    vec3 base_color = <span class="built_in">texture</span>(base, UV).rgb; <span class="comment">// 基础颜色</span></span><br><span class="line">    vec3 shade_color = <span class="built_in">texture</span>(sss, UV).rgb; <span class="comment">// 阴影颜色</span></span><br><span class="line">    vec3 outline_color = <span class="built_in">texture</span>(ilm, UV).aaa; <span class="comment">// 轮廓线颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> shadow_weight = <span class="built_in">texture</span>(ilm, UV).g; <span class="comment">// 阴影权重</span></span><br><span class="line">    <span class="type">float</span> fade_ao_weight = v_color.r; <span class="comment">// 顶点色提供的环境光遮蔽</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> shade = LdotN * shadow_weight * fade_ao_weight;</span><br><span class="line">    <span class="type">float</span> is_shade = <span class="built_in">step</span>(shade_threshold, shade);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (is_shade &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">        DIFFUSE_LIGHT += base_color * LIGHT_COLOR; <span class="comment">// 漫反射光乘以灯光颜色</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DIFFUSE_LIGHT += (base_color + fade_ao_weight) * shade_color * LIGHT_COLOR; <span class="comment">// 漫反射光乘以灯光颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">    DIFFUSE_LIGHT *= outline_color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高光计算</span></span><br><span class="line">    <span class="type">float</span> spec_mask = <span class="built_in">texture</span>(ilm, UV).r;</span><br><span class="line">    <span class="type">float</span> spec_shape = <span class="built_in">texture</span>(ilm, UV).b;</span><br><span class="line">    <span class="type">float</span> shininess = shinese;</span><br><span class="line"></span><br><span class="line">    vec3 halfwayDir = <span class="built_in">normalize</span>(LIGHT + VIEW);</span><br><span class="line">    <span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(NORMAL, halfwayDir), <span class="number">0.0</span>), shininess); </span><br><span class="line"></span><br><span class="line">    spec = spec * spec_mask;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> sm_spec = <span class="built_in">step</span>(spec_threshold, spec * spec_shape);</span><br><span class="line"></span><br><span class="line">    SPECULAR_LIGHT += base_color * sm_spec * LIGHT_COLOR; <span class="comment">// 高光乘以灯光颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot模板</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/godot%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/godot%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h1><ul><li>创建TAG类,声明Tag单例,存储属性字符串,用于声明属性字典</li><li>创建资源类,声明属性字典,声明信号属性改变时发出</li></ul>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot基础</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/godot%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/godot%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var 变量:<span class="built_in">int</span> <span class="comment">#自动转换类型</span></span><br><span class="line">var 整型:<span class="built_in">int</span> <span class="comment">#限定为整型</span></span><br><span class="line">var 字符串:String <span class="comment">#限定为字符串</span></span><br><span class="line">var 浮点:<span class="built_in">float</span> <span class="comment">#限定为字符串</span></span><br><span class="line">var 数组:array</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类</span>:</span><br><span class="line">    var x</span><br><span class="line">    var y</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func 方法()-&gt;void:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输出&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断类型转换掉用</span></span><br><span class="line"><span class="keyword">if</span> (@event <span class="keyword">is</span> InputEventMouseMotion mouseMotion)</span><br><span class="line">&#123;</span><br><span class="line">_mouseDelta = mouseMotion.Relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var _width: <span class="built_in">float</span> = <span class="number">0.0</span></span><br><span class="line"><span class="meta">@export var 宽度: float=<span class="number">27</span>:</span></span><br><span class="line">get(): </span><br><span class="line"><span class="keyword">return</span> _width</span><br><span class="line"><span class="built_in">set</span>(value):</span><br><span class="line"><span class="keyword">if</span> value==_width:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">_width=value</span><br><span class="line">_回调_尺寸改变时()</span><br></pre></td></tr></table></figure><h1 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h1><ul><li><p>代码实例:读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extends Node</span><br><span class="line">class_name 存储类</span><br><span class="line"></span><br><span class="line">func 读取数据(path:String):</span><br><span class="line">    var file:FileAccess=FileAccess.<span class="built_in">open</span>(path,FileAccess.READ)</span><br><span class="line">    var text=file.get_as_text()</span><br><span class="line">    var json_text=JSON.parse_string(text)</span><br><span class="line">    <span class="keyword">return</span> json_text</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>代码示例:存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func 存储数据(conn,path:String):</span><br><span class="line">    var file:FileAccess=FileAccess.<span class="built_in">open</span>(path,FileAccess.WRITE)</span><br><span class="line">    var json_conn=JSON.stringify(conn)</span><br><span class="line">    file.store_string(json_conn)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="延时代码-gds"><a href="#延时代码-gds" class="headerlink" title="延时代码 gds"></a>延时代码 gds</h1><p>在Godot引擎中，除了<code>call_deferred()</code>方法外，还有一些其他类似的方法可以用来控制函数的执行时机。这些方法提供了不同的调度和延迟机制，以便开发者能够根据具体需求调整代码的执行顺序。以下是一些与<code>call_deferred()</code>类似的方法：</p><h3 id="1-yield-和协程"><a href="#1-yield-和协程" class="headerlink" title="1. yield() 和协程"></a>1. <code>yield()</code> 和协程</h3><p>在GDScript中，你可以使用<code>yield()</code>来创建协程（coroutines），它允许你编写非阻塞的、分步执行的代码。通过<code>yield()</code>，你可以暂停函数的执行，直到某个条件满足或某个事件发生时再继续执行。这对于需要等待某些操作完成或满足某些条件的情况非常有用。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func delayed_action():</span><br><span class="line">    # ... 一些初始操作 ...</span><br><span class="line"></span><br><span class="line">    yield(get_tree().create_timer(1.0), &quot;timeout&quot;)  # 等待1秒</span><br><span class="line"></span><br><span class="line">    # ... 延迟执行的代码 ...</span><br></pre></td></tr></table></figure><h3 id="2-使用Timer节点"><a href="#2-使用Timer节点" class="headerlink" title="2. 使用Timer节点"></a>2. 使用<code>Timer</code>节点</h3><p><code>Timer</code>节点是Godot中用于定时执行操作的内置节点。你可以设置<code>Timer</code>的等待时间，并在时间到达时连接到一个函数或信号。这种方法通常用于需要定时重复执行或单次执行的操作。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">extends Node</span><br><span class="line"></span><br><span class="line">onready var timer = preload(&quot;res://path_to_timer_scene.tscn&quot;).instance()</span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">    add_child(timer)</span><br><span class="line">    timer.connect(&quot;timeout&quot;, self, &quot;_on_timer_timeout&quot;)</span><br><span class="line">    timer.wait_time = 1.0  # 设置等待时间为1秒</span><br><span class="line">    timer.one_shot = true  # 设置为单次触发</span><br><span class="line">    timer.start()  # 启动计时器</span><br><span class="line"></span><br><span class="line">func _on_timer_timeout():</span><br><span class="line">    # ... 定时器超时时执行的代码 ...</span><br></pre></td></tr></table></figure><h3 id="3-使用Tween节点"><a href="#3-使用Tween节点" class="headerlink" title="3. 使用Tween节点"></a>3. 使用<code>Tween</code>节点</h3><p><code>Tween</code>节点允许你创建平滑的动画过渡效果，也可以用来延迟执行某些操作。通过<code>Tween</code>，你可以指定一个节点的属性值随时间变化的过程。虽然它主要用于动画，但也可以用于延迟或调整属性的变化。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extends Node2D</span><br><span class="line"></span><br><span class="line">onready var tween = $Tween  # 假设你有一个Tween节点作为子节点</span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">    tween.interpolate_property(self, &quot;position&quot;, Vector2(100, 100), 1.0)  # 在1秒内移动到(100, 100)</span><br><span class="line">    tween.start()</span><br><span class="line"></span><br><span class="line">    yield(tween, &quot;tween_completed&quot;)  # 等待动画完成</span><br><span class="line"></span><br><span class="line">    # ... 动画完成后执行的代码 ...</span><br></pre></td></tr></table></figure><h3 id="4-在-process或-physics-process中使用时间检查"><a href="#4-在-process或-physics-process中使用时间检查" class="headerlink" title="4. 在_process或_physics_process中使用时间检查"></a>4. 在<code>_process</code>或<code>_physics_process</code>中使用时间检查</h3><p>如果你只是想在特定的时间后执行某个操作，你可以在<code>_process</code>或<code>_physics_process</code>函数中使用当前时间与目标时间的比较来实现延迟。这适用于那些不需要精确时间控制的简单延迟需求。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">extends Node</span><br><span class="line"></span><br><span class="line">var delay_time = 1.0  # 延迟时间（秒）</span><br><span class="line">var start_time = 0.0  # 开始时间</span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">    start_time = OS.get_ticks_msec() / 1000.0  # 获取当前时间（秒）</span><br><span class="line"></span><br><span class="line">func _process(delta):</span><br><span class="line">    if OS.get_ticks_msec() / 1000.0 - start_time &gt;= delay_time:</span><br><span class="line">        # ... 延迟执行的代码 ...</span><br><span class="line">        start_time = -1.0  # 重置开始时间，防止重复执行</span><br></pre></td></tr></table></figure><p>这些方法提供了不同的延迟和调度机制，你可以根据具体的应用场景和需求选择最适合的方法。需要注意的是，每种方法都有其适用的场景和限制，因此在使用时应该仔细考虑其适用性和可能的影响。</p></li></ul><h1 id="玩家系统"><a href="#玩家系统" class="headerlink" title="玩家系统"></a>玩家系统</h1><h2 id="第三人称相机控制"><a href="#第三人称相机控制" class="headerlink" title="第三人称相机控制"></a>第三人称相机控制</h2><ul><li>相机创建一个Node3D为相机Camera3D的父节点,然后创建一个相机</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">extends Node3D</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var 鼠标_输入</span><br><span class="line">var 鼠标输入_旋转:float</span><br><span class="line">var 鼠标输入_倾斜:float</span><br><span class="line">var 灵敏度:float=0.25</span><br><span class="line"></span><br><span class="line">var 欧拉_旋转:Vector3</span><br><span class="line">@export var tilt_upper_limit := deg_to_rad(-60.0)</span><br><span class="line">@export var tilt_lower_limit := deg_to_rad(60.0)</span><br><span class="line"></span><br><span class="line">#开始隐藏鼠标</span><br><span class="line">func _ready():</span><br><span class="line">Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _physics_process(delta):</span><br><span class="line">欧拉_旋转.x+=鼠标输入_倾斜*delta</span><br><span class="line"></span><br><span class="line">#欧拉_旋转.x=clamp(欧拉_旋转.x,tilt_lower_limit,tilt_upper_limit)</span><br><span class="line">欧拉_旋转.y+=鼠标输入_旋转*delta</span><br><span class="line"></span><br><span class="line">transform.basis=Basis.from_euler(欧拉_旋转)</span><br><span class="line"></span><br><span class="line">#$Camera3D.global_transform=</span><br><span class="line">#$Camera3D.rotation.z=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#初始化鼠标向量</span><br><span class="line">鼠标输入_倾斜=0.0</span><br><span class="line">鼠标输入_旋转=0.0</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _input(event):</span><br><span class="line">#初始化鼠标输入为 鼠标移动与获取鼠标模式为隐藏锁定鼠标在视口中心</span><br><span class="line">鼠标_输入=event is InputEventMouseMotion and Input.get_mouse_mode()==Input.MOUSE_MODE_CAPTURED</span><br><span class="line"></span><br><span class="line">#如果鼠标输入满足条件 执行以下代码</span><br><span class="line">if  鼠标_输入:</span><br><span class="line">鼠标输入_旋转=-event.relative.x*灵敏度    #鼠标x轴旋转</span><br><span class="line">鼠标输入_倾斜=-event.relative.y*灵敏度    #鼠标y轴旋转</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>玩家脚本:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">extends CharacterBody3D@onready var 相机根:=$camercont</span><br><span class="line"><span class="meta"> @onready var 角色:MeshInstance3D=$MeshInstance3D</span></span><br><span class="line"><span class="meta"> @onready var 旋转向量:=Vector3.FORWARD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@export var 玩家基础速度:=<span class="number">10</span></span></span><br><span class="line"><span class="meta">@export var 玩家加速度:=<span class="number">20</span></span></span><br><span class="line"><span class="meta">@export var 玩家旋转速度:=<span class="number">12.0</span></span></span><br><span class="line"></span><br><span class="line">const 跳跃 = <span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">var 重力= ProjectSettings.get_setting(<span class="string">&quot;physics/3d/default_gravity&quot;</span>) <span class="comment">#获取重力</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _physics_process(delta):</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"> <span class="comment">#掉落</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> is_on_floor():</span><br><span class="line"> velocity.y -= 重力 * delta</span><br><span class="line"></span><br><span class="line">  跳跃</span><br><span class="line">  <span class="keyword">if</span> Input.is_action_just_pressed(<span class="string">&quot;ui_accept&quot;</span>) <span class="keyword">and</span> is_on_floor():</span><br><span class="line">      velocity.y = 跳跃</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"> <span class="comment">#定义一个变量获取相机矩阵向量</span></span><br><span class="line"> var 相机矩阵=相机_返回()</span><br><span class="line"></span><br><span class="line">  <span class="comment">#如果矩阵向量大于0.2  将矩阵向量规格化后赋予向前向量</span></span><br><span class="line">  <span class="keyword">if</span> 相机矩阵.length()&gt;<span class="number">0.2</span>:</span><br><span class="line">      旋转向量=相机矩阵.normalized() </span><br><span class="line"></span><br><span class="line">  <span class="comment">#将向前向量传给函数计算 控制角色的旋转</span></span><br><span class="line">  角色_旋转(旋转向量,delta)</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"> <span class="comment">#移动实现</span></span><br><span class="line"> <span class="comment">#定义一个变量获取角色的Y轴移动向量</span></span><br><span class="line"> var Y_向量分离=velocity.y</span><br><span class="line"> velocity.y=<span class="number">0.0</span> <span class="comment">#初始化Y轴向量为0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#角色移动向量=角色移动向量插值(向量*速度,向量*加速度*delta)</span></span><br><span class="line">  velocity=velocity.lerp(-相机矩阵*玩家基础速度,玩家加速度*delta)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#如果输入矩阵向量长度等于0与移动向量长度&lt;1</span></span><br><span class="line">  <span class="keyword">if</span> 相机矩阵.length()==<span class="number">0</span> <span class="keyword">and</span> velocity.length()&lt;<span class="number">1</span>:</span><br><span class="line">      <span class="comment">#移动向量为0 </span></span><br><span class="line">      velocity=Vector3.ZERO</span><br><span class="line"></span><br><span class="line">  <span class="comment">#恢复y轴向量</span></span><br><span class="line">  velocity.y=Y_向量分离</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"> move_and_slide()</span><br><span class="line"></span><br><span class="line"><span class="comment">#角色朝向和旋转</span></span><br><span class="line"> func 角色_旋转(向前向量:Vector3,delta:<span class="built_in">float</span>)-&gt; void:</span><br><span class="line"> <span class="comment">#定义一个变量获取向前向量的叉积</span></span><br><span class="line"> var 左_对称轴:=Vector3.UP.cross(向前向量)</span><br><span class="line"> <span class="comment">#定义一个变量获取矩阵(叉积,前常量向量,向前向量) 已四元素返回</span></span><br><span class="line"> var 基础位置 :=Basis(左_对称轴,Vector3.UP,向前向量).get_rotation_quaternion() </span><br><span class="line"><span class="comment">#定义一个向量 获取角色的矩阵向量 返回各轴缩放系数的绝对值</span></span><br><span class="line"> var 角色矩阵 :=角色.transform.basis.get_scale()</span><br><span class="line"></span><br><span class="line">  <span class="comment">#角色矩阵向量等于 矩阵(以四元素返回角色矩阵向量 返回四元素插值的结果)帧乘以旋转速度    引入一个3D缩放英子</span></span><br><span class="line">  角色.transform.basis = Basis(角色.transform.basis.get_rotation_quaternion().slerp(基础位置, delta * 玩家旋转速度)).scaled(</span><br><span class="line">       角色矩阵</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment">#相机矩阵计算返回</span></span><br><span class="line"> func 相机_返回():</span><br><span class="line"> <span class="comment">#定义变量 获取输入向量</span></span><br><span class="line"> var 按键向量 := Input.get_vector(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;ww&quot;</span>, <span class="string">&quot;ss&quot;</span>)</span><br><span class="line"> <span class="comment">#定义向量初始化为0</span></span><br><span class="line"> var <span class="built_in">input</span>:=Vector3.ZERO</span><br><span class="line"> <span class="comment">#输入向量计算平方根</span></span><br><span class="line"> <span class="built_in">input</span>.x= -按键向量.x * sqrt(<span class="number">1.0</span> - 按键向量.y * 按键向量.y / <span class="number">2.0</span>)</span><br><span class="line"> <span class="built_in">input</span>.z= -按键向量.y * sqrt(<span class="number">1.0</span> - 按键向量.x * 按键向量.x / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输入向量等于相机矩阵*输入向量</span></span><br><span class="line">  <span class="built_in">input</span>=相机根.global_transform.basis*<span class="built_in">input</span></span><br><span class="line">  <span class="comment">#初始化Y轴为0</span></span><br><span class="line">  <span class="built_in">input</span>.y=<span class="number">0.0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">input</span></span><br></pre></td></tr></table></figure><ul><li>副本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">extends CharacterBody3D</span><br><span class="line"></span><br><span class="line"><span class="meta">@onready var 相机根: Node3D = $<span class="string">&quot;Node3D&quot;</span></span></span><br><span class="line"><span class="meta">@onready var 角色: MeshInstance3D = $MeshInstance3D</span></span><br><span class="line"><span class="meta">@onready var 旋转向量: Vector3 = Vector3.FORWARD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@export var 玩家基础速度: float = <span class="number">10</span></span></span><br><span class="line"><span class="meta">@export var 玩家加速度: float = <span class="number">20</span></span></span><br><span class="line"><span class="meta">@export var 玩家旋转速度: float = <span class="number">12.0</span></span></span><br><span class="line"></span><br><span class="line">const 跳跃 = <span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">var 重力 = ProjectSettings.get_setting(<span class="string">&quot;physics/3d/default_gravity&quot;</span>)  <span class="comment"># 获取重力</span></span><br><span class="line"></span><br><span class="line">func _physics_process(delta: <span class="built_in">float</span>):</span><br><span class="line"><span class="comment">## 掉落</span></span><br><span class="line"><span class="comment">#if not is_on_floor():</span></span><br><span class="line"><span class="comment">#velocity.y -= 重力 * delta</span></span><br><span class="line"><span class="comment">## 跳跃</span></span><br><span class="line"><span class="comment">#if Input.is_action_just_pressed(&quot;ui_accept&quot;) and is_on_floor():</span></span><br><span class="line"><span class="comment">#velocity.y = 跳跃</span></span><br><span class="line"></span><br><span class="line">角色朝向(delta)</span><br><span class="line">角色移动(delta)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move_and_slide()</span><br><span class="line"></span><br><span class="line">func 角色_旋转(向前向量: Vector3, delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line"><span class="keyword">if</span> 向前向量 == Vector3.ZERO:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算目标旋转四元数</span></span><br><span class="line">var 目标旋转 = Basis(Vector3.UP.cross(向前向量), Vector3.UP, 向前向量).get_rotation_quaternion()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑插值当前旋转到目标旋转，并保留缩放</span></span><br><span class="line">var 当前旋转 = 角色.transform.basis.get_rotation_quaternion()</span><br><span class="line">角色.transform.basis = Basis(当前旋转.slerp(目标旋转, delta * 玩家旋转速度)).scaled(角色.transform.basis.get_scale())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相机矩阵计算返回 获取相机方向</span></span><br><span class="line">func 相机_返回() -&gt; Vector3:</span><br><span class="line"><span class="comment"># 定义变量 获取输入向量</span></span><br><span class="line">var 按键向量 = Input.get_vector(<span class="string">&quot;ui_left&quot;</span>, <span class="string">&quot;ui_right&quot;</span>, <span class="string">&quot;ui_up&quot;</span>, <span class="string">&quot;ui_down&quot;</span>).normalized()</span><br><span class="line">var <span class="built_in">input</span>:Vector3=Vector3(-按键向量.x ,<span class="number">0</span>,-按键向量.y )</span><br><span class="line"><span class="comment">#从世界空间转换到相机空间</span></span><br><span class="line"><span class="built_in">input</span> = 相机根.global_transform.basis * <span class="built_in">input</span></span><br><span class="line"><span class="comment"># 初始化Y轴为0</span></span><br><span class="line"><span class="built_in">input</span>.y = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func 角色朝向(delta:<span class="built_in">float</span>):</span><br><span class="line">var 相机矩阵:Vector3 = 相机_返回()</span><br><span class="line"><span class="keyword">if</span> 相机矩阵.length() &gt; <span class="number">0.2</span>:</span><br><span class="line">旋转向量 = 相机矩阵.normalized()</span><br><span class="line">角色_旋转(旋转向量, delta)</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func 角色移动(delta):</span><br><span class="line">var 速度=velocity</span><br><span class="line">var 相机矩阵:Vector3 = 相机_返回()</span><br><span class="line"></span><br><span class="line">速度 = 速度.lerp(-相机矩阵 * 玩家基础速度, 玩家加速度 * delta)</span><br><span class="line">velocity=速度</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>简单旋转朝向</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">if</span> velocity.length&gt;<span class="number">0.1</span>:</span><br><span class="line">var chadir=<span class="built_in">Vector2</span>(velovity.z,velovity.x)</span><br><span class="line">    角色网格节点.rotation.y=chadir.angle</span><br><span class="line">        </span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(player.velocity.x) + <span class="built_in">abs</span>(player.velocity.z) &gt; <span class="number">0.1</span>:</span><br><span class="line">#获取移动方向</span><br><span class="line">var characterDir = <span class="built_in">Vector2</span>(player.velocity.z, player.velocity.x)</span><br><span class="line">#转换为四元数</span><br><span class="line">var target_quaternion:Quaternion = Quaternion.<span class="built_in">from_euler</span>(<span class="built_in">Vector3</span>(<span class="number">0</span>, characterDir.<span class="built_in">angle</span>(), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">#平滑旋转</span><br><span class="line">player.character_rotation_root.quaternion = player.character_rotation_root.quaternion.<span class="built_in">slerp</span>(</span><br><span class="line">target_quaternion, delta * <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">extends CharacterBody3D</span><br><span class="line"></span><br><span class="line"><span class="meta">@onready var 相机根: Node3D = $<span class="string">&quot;SpringArm3D&quot;</span></span></span><br><span class="line"><span class="meta">@onready var 角色: MeshInstance3D = $MeshInstance3D</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@export var 玩家基础速度: float = <span class="number">10.0</span></span></span><br><span class="line"><span class="meta">@export var 玩家加速度: float = <span class="number">20.0</span></span></span><br><span class="line"><span class="meta">@export var 玩家旋转速度: float = <span class="number">12.0</span></span></span><br><span class="line"><span class="meta">@export var 跳跃强度: float = <span class="number">4.5</span></span></span><br><span class="line"></span><br><span class="line">var 重力: <span class="built_in">float</span> = ProjectSettings.get_setting(<span class="string">&quot;physics/3d/default_gravity&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存当前角色朝向</span></span><br><span class="line">var 目标朝向: Vector3 = Vector3.FORWARD</span><br><span class="line"></span><br><span class="line"><span class="meta">@export var 控制器:Node</span></span><br><span class="line"><span class="meta">@onready var input: InputClass = $<span class="string">&quot;../Input&quot;</span></span></span><br><span class="line"></span><br><span class="line">func _physics_process(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line"><span class="comment"># 处理跳跃逻辑</span></span><br><span class="line">处理跳跃和重力(delta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新角色朝向和移动</span></span><br><span class="line">更新角色朝向(delta)</span><br><span class="line">更新角色移动(delta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用物理</span></span><br><span class="line">move_and_slide()</span><br><span class="line"></span><br><span class="line">func 处理跳跃和重力(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line"><span class="comment"># 如果角色在地面上，允许跳跃</span></span><br><span class="line"><span class="keyword">if</span> is_on_floor():</span><br><span class="line"><span class="keyword">if</span> Input.is_action_just_pressed(<span class="string">&quot;ui_accept&quot;</span>):</span><br><span class="line">velocity.y = 跳跃强度</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 如果不在地面，施加重力</span></span><br><span class="line">velocity.y -= 重力 * delta</span><br><span class="line"></span><br><span class="line">func 更新角色朝向(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line">var 输入方向 = 获取相机方向()</span><br><span class="line"><span class="keyword">if</span> 输入方向.length() &gt; <span class="number">0.2</span>:</span><br><span class="line">目标朝向 = 输入方向.normalized()</span><br><span class="line"><span class="comment"># 平滑旋转到目标朝向</span></span><br><span class="line">var 当前旋转 = 角色.transform.basis.get_rotation_quaternion()</span><br><span class="line">var 目标旋转 = Basis(Vector3.UP.cross(目标朝向), Vector3.UP, 目标朝向).get_rotation_quaternion()</span><br><span class="line">var 插值旋转 = 当前旋转.slerp(目标旋转, delta * 玩家旋转速度)</span><br><span class="line">角色.transform.basis = Basis(插值旋转).scaled(角色.transform.basis.get_scale())</span><br><span class="line"></span><br><span class="line">func 更新角色移动(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line">var 输入方向 = 获取相机方向()</span><br><span class="line">var 目标速度 = -输入方向 * 玩家基础速度</span><br><span class="line">velocity.x = lerp(velocity.x, 目标速度.x, 玩家加速度 * delta)</span><br><span class="line">velocity.z = lerp(velocity.z, 目标速度.z, 玩家加速度 * delta)</span><br><span class="line"></span><br><span class="line">func 获取相机方向() -&gt; Vector3:</span><br><span class="line"><span class="comment"># 获取输入方向</span></span><br><span class="line">var 按键输入 = Input.get_vector(<span class="string">&quot;ui_left&quot;</span>, <span class="string">&quot;ui_right&quot;</span>, <span class="string">&quot;ui_up&quot;</span>, <span class="string">&quot;ui_down&quot;</span>).normalized()</span><br><span class="line">var 输入方向 = Vector3(-按键输入.x, <span class="number">0</span>, -按键输入.y)</span><br><span class="line"><span class="comment"># 转换到相机空间</span></span><br><span class="line">输入方向 = 相机根.global_transform.basis * 输入方向</span><br><span class="line">输入方向.y = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">return</span> 输入方向</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="装配系统"><a href="#装配系统" class="headerlink" title="装配系统"></a>装配系统</h1><ul><li><p>所需节点Node3D,Marker3D作为部件放置的位置,方便调整位置</p></li><li><pre><code class="language-python">@toolextends Node3Dclass_name 装备模型@onready var 枪身: Marker3D = $&quot;枪身&quot;@onready var 枪管: Marker3D = $&quot;枪管&quot;@onready var 瞄准仪: Marker3D = $&quot;瞄准仪&quot;#资源,每当资源变更时刷新配件节点@export var 枪身资源:武器资源类:    get:         return 枪身资源    set(value):        if value==枪身资源:            return        枪身资源=value        武器资源更新()@export var 枪管资源:武器资源类:    get:         return 枪管资源    set(value):        if value==枪管资源:            return        枪管资源=value        武器资源更新()@export var 瞄准仪资源:武器资源类:    get:         return 瞄准仪资源    set(value):        if value==瞄准仪资源:            return        瞄准仪资源=value        武器资源更新()# Called every frame. &#39;delta&#39; is the elapsed time since the previous frame.func _process(delta: float) -&gt; void:    passfunc 武器资源更新():    #初始化节点,将配件全部清除    if(枪身 and 枪身.get_child_count()&gt;0):        枪身.get_child(0).queue_free()    if(枪管 and 枪管.get_child_count()&gt;0):        枪管.get_child(0).queue_free()    if(瞄准仪 and 瞄准仪.get_child_count()&gt;0):        瞄准仪.get_child(0).queue_free()    #检查资源是否存在    if 枪身!=null and 枪身资源:        var 武器场景:PackedScene=load(枪身资源.武器场景路径)        枪身.add_child(武器场景.instantiate())    else: #如果武器不存在,初始化其他配件        枪管资源=null        瞄准仪资源=null    #检查其他配件,如果存在则添加到节点树    if 枪管!=null and 枪管资源:        var 枪管场景:PackedScene=load(枪管资源.武器场景路径)        枪管.add_child(枪管场景.instantiate())    if 瞄准仪!=null and 瞄准仪资源:        var 瞄准仪场景:PackedScene=load(瞄准仪资源.武器场景路径)        瞄准仪.add_child(瞄准仪场景.instantiate())<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 背包,负责更新装备</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">extends Control</span><br><span class="line"></span><br><span class="line">@export var 武器展示场景: 装备模型</span><br><span class="line">@export var 武器装备场景: 装备模型</span><br><span class="line">@export var 物品背包:Array[Resource]</span><br><span class="line"></span><br><span class="line"># Called when the node enters the scene tree for the first time.</span><br><span class="line">func _ready() -&gt; void:</span><br><span class="line">    pass # Replace with function body.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Called every frame. &#x27;delta&#x27; is the elapsed time since the previous frame.</span></span><br><span class="line">func _process(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line">    更新装备(武器展示场景);</span><br><span class="line">    更新装备(武器装备场景);</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func 更新装备(data:装备模型):</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        data.枪身资源=物品背包[<span class="number">0</span>]</span><br><span class="line">        data.枪管资源=物品背包[<span class="number">1</span>]</span><br><span class="line">        data.瞄准仪资源=物品背包[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">extends PanelContainer</span><br><span class="line"></span><br><span class="line"><span class="meta">@onready var texture_rect: TextureRect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@onready var 背包: Control = $<span class="string">&quot;../../..&quot;</span></span></span><br><span class="line"><span class="meta">@export var 索引:int=<span class="number">0</span></span></span><br><span class="line"><span class="comment"># Called when the node enters the scene tree for the first time.</span></span><br><span class="line">func _ready() -&gt; void:</span><br><span class="line">    texture_rect=get_node(<span class="string">&quot;TextureRect&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># Replace with function body.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Called every frame. &#x27;delta&#x27; is the elapsed time since the previous frame.</span></span><br><span class="line">func _process(delta: <span class="built_in">float</span>) -&gt; void:</span><br><span class="line">    <span class="keyword">if</span> 背包.物品背包[索引]:</span><br><span class="line">        texture_rect.texture=背包.物品背包[索引].icon</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        texture_rect.texture=preload(<span class="string">&quot;res://Icon/空纹理.png&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func _get_drag_data(position):</span><br><span class="line">    <span class="keyword">if</span> 背包.物品背包[索引]:</span><br><span class="line">        var cpb =TextureRect.new()</span><br><span class="line">        cpb.texture=背包.物品背包[索引].icon</span><br><span class="line">        set_drag_preview(cpb)</span><br><span class="line">        <span class="keyword">return</span> 背包.物品背包[索引]</span><br><span class="line"></span><br><span class="line">func _can_drop_data(position, data):</span><br><span class="line">    <span class="comment"># 检查是否为武器基类</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> Resource:</span><br><span class="line">        <span class="keyword">return</span> true</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false</span><br><span class="line"><span class="comment">#数据处理</span></span><br><span class="line">func _drop_data(position, data):</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">if</span> 背包.物品背包[索引]==null:</span><br><span class="line">        var ite=背包.物品背包.find(data)</span><br><span class="line">        背包.物品背包</span><br><span class="line">[索引]=data</span><br><span class="line">        背包.物品背包[ite]=null</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        var ite=背包.物品背包.find(data)</span><br><span class="line">        var temp=背包.物品背包[索引]</span><br><span class="line">        背包.物品背包[索引]=data</span><br><span class="line">        背包.物品背包[ite]=temp</span><br></pre></td></tr></table></figure></code></pre></li></ul><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><ul><li>属性系统作为单个场景存在,主要用于管理角色技能,属性,效果,</li><li>属性:<ul><li>属性通过属性资源创建</li></ul></li></ul><h1 id="MVC设计-仿AURA"><a href="#MVC设计-仿AURA" class="headerlink" title="MVC设计,仿AURA"></a>MVC设计,仿AURA</h1><h2 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h2><ul><li>属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>叠加层:widgetBase&#x3D;null</td><td>字节点,各种UI的集合</td></tr><tr><td>widgetcontrol:widgetControl&#x3D;null</td><td>数据控制层</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>方法</th><th>描述</th><th></th></tr></thead><tbody><tr><td>初始化_叠加层(玩家状态,玩家控制器,玩家,玩家能力系统)</td><td>在玩家节点初始化属性完成后调用</td><td>公开</td></tr><tr><td>_get_数据控制层</td><td>初始化时调用,创建控制器单例</td><td>私有</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">extends Control</span><br><span class="line">class_name 控制层</span><br><span class="line"></span><br><span class="line"><span class="comment">#叠加层</span></span><br><span class="line"><span class="meta">@export var 叠加层:WidgetBase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据控制层对象</span></span><br><span class="line">var widgetcontrol:WidgetControl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建玩家叠加从和初始化控制层,在玩家初始化时执行                                                                                               </span></span><br><span class="line">func 初始化_叠加层(玩家状态,玩家控制器,玩家,玩家能力系统):</span><br><span class="line"><span class="comment">#检查资源? 检查节点场景路径是否有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建叠加层 可以创建一个UI节点**********</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#初始化控制层</span></span><br><span class="line">var 数据字典:StructTest=StructTest.new(玩家控制器,玩家状态,玩家,玩家能力系统)</span><br><span class="line">widgetcontrol=_get_数据控制层(数据字典)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化叠加层</span></span><br><span class="line">叠加层.set_widgetControl(widgetcontrol)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#广播初始化</span></span><br><span class="line">widgetcontrol.广播_初始化()</span><br><span class="line">    <span class="comment">#广播实时监听</span></span><br><span class="line">widgetcontrol.实时监听_属性变化()</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func _get_数据控制层(字典:StructTest):</span><br><span class="line"><span class="keyword">if</span> widgetcontrol==null:</span><br><span class="line">widgetcontrol=WidgetControl.new()</span><br><span class="line">widgetcontrol.设置_数据控制器参数(字典)</span><br><span class="line"><span class="keyword">return</span> widgetcontrol</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WidgetBase-用户控件基类"><a href="#WidgetBase-用户控件基类" class="headerlink" title="WidgetBase 用户控件基类"></a>WidgetBase 用户控件基类</h2><ul><li>属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>widgetControl:WidgetControl</td><td>数据控制器</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>set_widgetControl(v_Control:WidgetControl)</td><td>在HUD设置控制器</td></tr><tr><td>控制层被设置时</td><td>当控制器被设置时调用,用于绑定控制器事件</td></tr><tr><td>_信号_生命值被改变(NewHealth:float)</td><td>接收值设置UI显示</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">extends ProgressBar</span><br><span class="line">class_name WidgetBase</span><br><span class="line"></span><br><span class="line">var widgetControl:WidgetControl</span><br><span class="line"></span><br><span class="line">func set_widgetControl(v_Control:WidgetControl):</span><br><span class="line">widgetControl=v_Control</span><br><span class="line">控制层被设置时()</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func 控制层被设置时():</span><br><span class="line">widgetControl.委托_玩家生命值改变时.connect(_信号_生命值被改变)</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func _信号_生命值被改变(NewHealth:<span class="built_in">float</span>):</span><br><span class="line">value=NewHealth</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WidgetControl-属性控制器"><a href="#WidgetControl-属性控制器" class="headerlink" title="WidgetControl 属性控制器"></a>WidgetControl 属性控制器</h2><ul><li>属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>var 玩家控制器:Node</td><td></td></tr><tr><td>var 玩家控状态:Node</td><td></td></tr><tr><td>var 玩家对象:Node</td><td></td></tr><tr><td>var 玩家能力系统:能力系统</td><td></td></tr></tbody></table><ul><li>信号</li></ul><table><thead><tr><th>信号</th><th>描述</th></tr></thead><tbody><tr><td>signal  委托_玩家生命值改变时(NewHealth:float)</td><td>属性改变时发出</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>func 设置_数据控制器参数(数据结构:StructTest):</td><td>初始化控制器携带数据</td></tr><tr><td>func 广播_初始化():</td><td>在属性初始化时广播刷新UI显示</td></tr><tr><td>func 实时监听_属性变化():</td><td>绑定实时更是UI,在属性集改变属性中发出信号</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">extends Object</span><br><span class="line">class_name WidgetControl</span><br><span class="line"></span><br><span class="line">var 玩家控制器:Node</span><br><span class="line">var 玩家控状态:Node</span><br><span class="line">var 玩家对象:Node</span><br><span class="line">var 玩家能力系统:能力系统</span><br><span class="line"></span><br><span class="line">signal  委托_玩家生命值改变时(NewHealth:<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">func 设置_数据控制器参数(数据结构:StructTest):</span><br><span class="line">玩家控制器=数据结构.玩家控制器</span><br><span class="line">玩家控状态=数据结构.玩家控状态</span><br><span class="line">玩家对象=数据结构.玩家对象</span><br><span class="line">玩家能力系统=数据结构.玩家能力系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func 广播_初始化():</span><br><span class="line">委托_玩家生命值改变时.emit(<span class="number">16</span>) <span class="comment">#示例,实际广播属性集属性</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定实时监听事件</span></span><br><span class="line">func 实时监听_属性变化():</span><br><span class="line">玩家能力系统.属性集节点.委托_属性修改时.connect(func ac(key,v):委托_玩家生命值改变时.emit(v))</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="StructTest"><a href="#StructTest" class="headerlink" title="StructTest"></a>StructTest</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">extends Object</span><br><span class="line">class_name StructTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var 玩家控制器:Node</span><br><span class="line">var 玩家控状态:Node</span><br><span class="line">var 玩家对象:Node</span><br><span class="line">var 玩家能力系统:Node</span><br><span class="line"></span><br><span class="line">func _init(参数_玩家控制器,参数_玩家控状态,参数_玩家对象,参数_玩家能力系统) -&gt; void:</span><br><span class="line">玩家控制器=参数_玩家控制器</span><br><span class="line">玩家控状态=参数_玩家控状态</span><br><span class="line">玩家对象=参数_玩家对象</span><br><span class="line">玩家能力系统=参数_玩家能力系统</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="输入映射单例"><a href="#输入映射单例" class="headerlink" title="输入映射单例"></a>输入映射单例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func 添加输入映射(动作名: String, 键值: <span class="built_in">int</span>) -&gt; void:</span><br><span class="line"><span class="comment"># 检查是否已经存在此动作</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> InputMap.has_action(动作名):</span><br><span class="line">InputMap.add_action(动作名)</span><br><span class="line"></span><br><span class="line">var 输入事件:InputEventKey = InputEventKey.new()</span><br><span class="line">输入事件.set_physical_keycode(键值)</span><br><span class="line">InputMap.action_add_event(动作名, 输入事件)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">extends Node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按键定义</span></span><br><span class="line">const KEY_MAPPINGS = &#123;</span><br><span class="line"><span class="string">&quot;Key_W&quot;</span>: KEY_W,</span><br><span class="line"><span class="string">&quot;Key_A&quot;</span>: KEY_A,</span><br><span class="line"><span class="string">&quot;Key_S&quot;</span>: KEY_S,</span><br><span class="line"><span class="string">&quot;Key_D&quot;</span>: KEY_D,</span><br><span class="line"><span class="string">&quot;Key_E&quot;</span>: KEY_E,</span><br><span class="line"><span class="string">&quot;Key_R&quot;</span>: KEY_R,</span><br><span class="line"><span class="string">&quot;Key_T&quot;</span>: KEY_T,</span><br><span class="line"><span class="string">&quot;Key_Y&quot;</span>: KEY_Y,</span><br><span class="line"><span class="string">&quot;Key_U&quot;</span>: KEY_U,</span><br><span class="line"><span class="string">&quot;Key_I&quot;</span>: KEY_I,</span><br><span class="line"><span class="string">&quot;Key_O&quot;</span>: KEY_O,</span><br><span class="line"><span class="string">&quot;Key_P&quot;</span>: KEY_P,</span><br><span class="line"><span class="string">&quot;Key_L&quot;</span>: KEY_L,</span><br><span class="line"><span class="string">&quot;Key_J&quot;</span>: KEY_J,</span><br><span class="line"><span class="string">&quot;Key_K&quot;</span>: KEY_K,</span><br><span class="line"><span class="string">&quot;Key_H&quot;</span>: KEY_H,</span><br><span class="line"><span class="string">&quot;Key_N&quot;</span>: KEY_N,</span><br><span class="line"><span class="string">&quot;Key_B&quot;</span>: KEY_B,</span><br><span class="line"><span class="string">&quot;Key_M&quot;</span>: KEY_M,</span><br><span class="line"><span class="string">&quot;Key_V&quot;</span>: KEY_V,</span><br><span class="line"><span class="string">&quot;Key_X&quot;</span>: KEY_X,</span><br><span class="line"><span class="string">&quot;Key_C&quot;</span>: KEY_C,</span><br><span class="line"><span class="string">&quot;Key_Z&quot;</span>: KEY_Z,</span><br><span class="line"><span class="string">&quot;Key_F&quot;</span>: KEY_F,</span><br><span class="line"><span class="string">&quot;Key_G&quot;</span>: KEY_G,</span><br><span class="line"><span class="string">&quot;Key_Q&quot;</span>: KEY_Q,</span><br><span class="line"><span class="string">&quot;Key_Space&quot;</span>: KEY_SPACE,</span><br><span class="line"><span class="string">&quot;Key_Escape&quot;</span>: KEY_ESCAPE,</span><br><span class="line"><span class="string">&quot;Key_Enter&quot;</span>: KEY_ENTER,</span><br><span class="line"><span class="string">&quot;Key_Backspace&quot;</span>: KEY_BACKSPACE,</span><br><span class="line"><span class="string">&quot;Key_Tab&quot;</span>: KEY_TAB,</span><br><span class="line"><span class="string">&quot;Key_LeftShift&quot;</span>: KEY_SHIFT,</span><br><span class="line"><span class="string">&quot;Key_RightShift&quot;</span>: KEY_SHIFT,</span><br><span class="line"><span class="string">&quot;Key_LeftControl&quot;</span>: KEY_CTRL,</span><br><span class="line"><span class="string">&quot;Key_RightControl&quot;</span>: KEY_CTRL,</span><br><span class="line"><span class="string">&quot;Key_LeftAlt&quot;</span>: KEY_ALT,</span><br><span class="line"><span class="string">&quot;Key_RightAlt&quot;</span>: KEY_ALT,</span><br><span class="line"><span class="string">&quot;Key_LeftSuper&quot;</span>: KEY_META,</span><br><span class="line"><span class="string">&quot;Key_RightSuper&quot;</span>: KEY_META,</span><br><span class="line"><span class="string">&quot;Key_Menu&quot;</span>: KEY_MENU,</span><br><span class="line"><span class="string">&quot;Key_PageUp&quot;</span>: KEY_PAGEUP,</span><br><span class="line"><span class="string">&quot;Key_PageDown&quot;</span>: KEY_PAGEDOWN,</span><br><span class="line"><span class="string">&quot;Key_Home&quot;</span>: KEY_HOME,</span><br><span class="line"><span class="string">&quot;Key_End&quot;</span>: KEY_END,</span><br><span class="line"><span class="string">&quot;Key_Insert&quot;</span>: KEY_INSERT,</span><br><span class="line"><span class="string">&quot;Key_Delete&quot;</span>: KEY_DELETE,</span><br><span class="line"><span class="string">&quot;Key_Left&quot;</span>: KEY_LEFT,</span><br><span class="line"><span class="string">&quot;Key_Right&quot;</span>: KEY_RIGHT,</span><br><span class="line"><span class="string">&quot;Key_Up&quot;</span>: KEY_UP,</span><br><span class="line"><span class="string">&quot;Key_Down&quot;</span>: KEY_DOWN,</span><br><span class="line"><span class="string">&quot;Key_F1&quot;</span>: KEY_F1,</span><br><span class="line"><span class="string">&quot;Key_F2&quot;</span>: KEY_F2,</span><br><span class="line"><span class="string">&quot;Key_F3&quot;</span>: KEY_F3,</span><br><span class="line"><span class="string">&quot;Key_F4&quot;</span>: KEY_F4,</span><br><span class="line"><span class="string">&quot;Key_F5&quot;</span>: KEY_F5,</span><br><span class="line"><span class="string">&quot;Key_F6&quot;</span>: KEY_F6,</span><br><span class="line"><span class="string">&quot;Key_F7&quot;</span>: KEY_F7,</span><br><span class="line"><span class="string">&quot;Key_F8&quot;</span>: KEY_F8,</span><br><span class="line"><span class="string">&quot;Key_F9&quot;</span>: KEY_F9,</span><br><span class="line"><span class="string">&quot;Key_F10&quot;</span>: KEY_F10,</span><br><span class="line"><span class="string">&quot;Key_F11&quot;</span>: KEY_F11,</span><br><span class="line"><span class="string">&quot;Key_F12&quot;</span>: KEY_F12,</span><br><span class="line"><span class="string">&quot;Key_D1&quot;</span>: KEY_1,</span><br><span class="line"><span class="string">&quot;Key_D2&quot;</span>: KEY_2,</span><br><span class="line"><span class="string">&quot;Key_D3&quot;</span>: KEY_3,</span><br><span class="line"><span class="string">&quot;Key_D4&quot;</span>: KEY_4,</span><br><span class="line"><span class="string">&quot;Key_D5&quot;</span>: KEY_5,</span><br><span class="line"><span class="string">&quot;Key_D6&quot;</span>: KEY_6,</span><br><span class="line"><span class="string">&quot;Key_D7&quot;</span>: KEY_7,</span><br><span class="line"><span class="string">&quot;Key_D8&quot;</span>: KEY_8,</span><br><span class="line"><span class="string">&quot;Key_D9&quot;</span>: KEY_9,</span><br><span class="line"><span class="string">&quot;Key_D0&quot;</span>: KEY_0,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func _enter_tree() -&gt; void:</span><br><span class="line">初始化按键映射()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func 初始化按键映射():</span><br><span class="line"><span class="keyword">for</span> 动作名 <span class="keyword">in</span> KEY_MAPPINGS.keys():</span><br><span class="line">添加输入映射(动作名, KEY_MAPPINGS[动作名])</span><br><span class="line"></span><br><span class="line">func 添加输入映射(动作名: String, 键值: <span class="built_in">int</span>) -&gt; void:</span><br><span class="line"><span class="comment"># 检查是否已经存在此动作</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> InputMap.has_action(动作名):</span><br><span class="line">InputMap.add_action(动作名)</span><br><span class="line"></span><br><span class="line">var 输入事件:InputEventKey = InputEventKey.new()</span><br><span class="line">输入事件.set_physical_keycode(键值)</span><br><span class="line">InputMap.action_add_event(动作名, 输入事件)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gdextension</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/Gdextension/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/GDScript/Gdextension/</url>
      
        <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> THREEN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREEN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;godot_cpp/classes/node.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;godot_cpp/core/class_db.hpp&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;godot_cpp/variant/utility_functions.hpp&gt;</span>  <span class="comment">//输出字符串用</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> godot;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define VARIANT_ARG_MAX 8</span></span><br><span class="line"><span class="comment">//#define VARIANT_ARG_DECLARE const Variant &amp;p_arg1, const Variant &amp;p_arg2, const Variant &amp;p_arg3, const Variant &amp;p_arg4, const //Variant &amp;p_arg5, const Variant &amp;p_arg6, const Variant &amp;p_arg7, const Variant &amp;p_arg8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span> : <span class="keyword">public</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GDCLASS</span>(Myclass, Node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">void</span> _bind_methods();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GAME</span>();</span><br><span class="line">    ~<span class="built_in">GAME</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// THREEN_H</span></span></span><br></pre></td></tr></table></figure><h2 id="bind-methods"><a href="#bind-methods" class="headerlink" title="_bind_methods()"></a>_bind_methods()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> Player::_bind_methods()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;cout_property&quot;</span>), &amp;Player::cout_property);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册属性方法</span></span><br><span class="line">    ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;set_array&quot;</span>, <span class="string">&quot;GBarray&quot;</span>), &amp;Player::set_array);</span><br><span class="line">    ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;get_array&quot;</span>), &amp;Player::get_array);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册属性</span></span><br><span class="line">    <span class="built_in">ADD_PROPERTY</span>(<span class="built_in">PropertyInfo</span>(Variant::FLOAT, <span class="string">&quot;speed&quot;</span>, PROPERTY_HINT_RANGE<span class="string">&quot;    -99999,99999,0.001,or_less,or_greater,hide_slider,suffix:px&quot;</span>), <span class="string">&quot;set_speed&quot;</span>, <span class="string">&quot;get_speed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册信号</span></span><br><span class="line">    <span class="built_in">ADD_SIGNAL</span>(<span class="built_in">MethodInfo</span>(<span class="string">&quot;palyer_sig&quot;</span>,<span class="built_in">PropertyInfo</span>(Variant::OBJECT, <span class="string">&quot;key1&quot;</span>),  <span class="built_in">PropertyInfo</span>(Variant::OBJECT, <span class="string">&quot;key2&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册枚举</span></span><br><span class="line">    <span class="built_in">BIND_ENUM_CONSTANT</span>(MON);</span><br><span class="line">    <span class="comment">//注册flag</span></span><br><span class="line">    <span class="built_in">BIND_BITFIELD_FLAG</span>(Run);</span><br><span class="line">    <span class="comment">//注册常量</span></span><br><span class="line">    <span class="built_in">BIND_CONSTANT</span>(MAX_HEALTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册属性"><a href="#注册属性" class="headerlink" title="注册属性"></a>注册属性</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> br = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_br</span><span class="params">(<span class="type">bool</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">get_br</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AbilitySystem::get_br</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> br;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilitySystem::set_br</span><span class="params">(<span class="type">bool</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">br = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> AbilitySystem::_bind_methods()</span><br><span class="line">&#123;</span><br><span class="line">ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;set_br&quot;</span>,<span class="string">&quot;br&quot;</span>), &amp;AbilitySystem::set_br);</span><br><span class="line">ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;get_br&quot;</span>), &amp;AbilitySystem::get_br);</span><br><span class="line"></span><br><span class="line">ClassDB::<span class="built_in">add_property</span>(<span class="string">&quot;AbilitySystem&quot;</span>,</span><br><span class="line"><span class="built_in">PropertyInfo</span>(Variant::BOOL, <span class="string">&quot;br&quot;</span>),</span><br><span class="line"><span class="string">&quot;set_br&quot;</span>,</span><br><span class="line"><span class="string">&quot;get_br&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明-枚举-Flag-常量"><a href="#声明-枚举-Flag-常量" class="headerlink" title="声明:枚举,Flag,常量"></a>声明:枚举,Flag,常量</h2><ul><li>枚举</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">testEnum</span> &#123;</span><br><span class="line">MON,</span><br><span class="line">TUE,</span><br><span class="line">WED = <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//底下</span></span><br><span class="line">    <span class="built_in">VARIANT_ENUM_CAST</span>(Test::testEnum);</span><br></pre></td></tr></table></figure><ul><li>flag</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">testFlag</span> </span><br><span class="line">&#123;</span><br><span class="line">Run,</span><br><span class="line">Idle</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//低下</span></span><br><span class="line"><span class="built_in">VARIANT_BITFIELD_CAST</span>(Test::testFlag);</span><br></pre></td></tr></table></figure><ul><li>常量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量声明</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">MAX_HEALTH = <span class="number">100</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="built_in">emit_signal</span>(<span class="string">&quot;position_changed&quot;</span>, <span class="keyword">this</span>, new_position);</span><br><span class="line"><span class="comment">//接受信号</span></span><br><span class="line"><span class="built_in">connect</span>(<span class="string">&quot;visibility_changed&quot;</span>, <span class="built_in">Callable</span>(<span class="keyword">this</span>, <span class="string">&quot;cout_sig&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>普通数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Array _array;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_array</span><span class="params">(Array p_array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _array=p_array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Array <span class="title">get_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特定数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PackedVector2Array polygon;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_polygon</span><span class="params">(<span class="type">const</span> PackedVector2Array&amp; p_polygon)</span> </span>&#123;</span><br><span class="line">    polygon = p_polygon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PackedVector2Array <span class="title">get_polygon</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> polygon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">    ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;set_polygon&quot;</span>, <span class="string">&quot;polygon&quot;</span>), &amp;Player::set_polygon);</span><br><span class="line">    ClassDB::<span class="built_in">bind_method</span>(<span class="built_in">D_METHOD</span>(<span class="string">&quot;get_polygon&quot;</span>), &amp;Player::get_polygon);</span><br><span class="line">    <span class="built_in">ADD_PROPERTY</span>(<span class="built_in">PropertyInfo</span>(Variant::PACKED_VECTOR2_ARRAY, <span class="string">&quot;polygon&quot;</span>), <span class="string">&quot;set_polygon&quot;</span>, <span class="string">&quot;get_polygon&quot;</span>);</span><br></pre></td></tr></table></figure><p>GDVIRTUAL_BIND(_process, “delta”);</p><h2 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h2><ul><li>注意:在实例化GODOT对象时应该使用memnew来实例化,不应该用new,因为GODOT没法释放new可能导致内存泄漏</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node node=<span class="built_in">memnew</span>(Node);</span><br></pre></td></tr></table></figure><h2 id="调用单例"><a href="#调用单例" class="headerlink" title="调用单例"></a>调用单例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Input单例     需要包含头文件</span></span><br><span class="line">Input::<span class="built_in">get_singleton</span>()-&gt;<span class="built_in">get_vector</span>(<span class="string">&quot;ui_left&quot;</span>, <span class="string">&quot;ui_right&quot;</span>, <span class="string">&quot;ui_up&quot;</span>, <span class="string">&quot;ui_down&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="重写虚函数"><a href="#重写虚函数" class="headerlink" title="重写虚函数"></a>重写虚函数</h2><ul><li>虚函数声明</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始时调用</span></span><br><span class="line"><span class="type">void</span> _ready();</span><br><span class="line"><span class="type">void</span> Player::_ready()</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物理帧循环</span></span><br><span class="line"><span class="type">void</span> _physics_process(<span class="type">float</span> delta);</span><br><span class="line"><span class="type">void</span> Player::_physics_process(<span class="type">float</span> delta)</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测输入</span></span><br><span class="line"><span class="type">void</span> _input(<span class="type">const</span> Ref&lt;InputEvent&gt;&amp; event);  <span class="comment">//需要头文件 #include &lt;godot_cpp/classes/input_event.hpp&gt;</span></span><br><span class="line"><span class="type">void</span> Player::_input(<span class="type">const</span> Ref&lt;InputEvent&gt;&amp; event)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>node虚函数源码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _process(<span class="type">double</span> delta);</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _physics_process(<span class="type">double</span> delta);</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _enter_tree();</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _exit_tree();</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _ready();</span><br><span class="line"><span class="keyword">virtual</span> PackedStringArray _get_configuration_warnings() <span class="type">const</span>;</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _input(<span class="type">const</span> Ref&lt;InputEvent&gt; &amp;event);</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _shortcut_input(<span class="type">const</span> Ref&lt;InputEvent&gt; &amp;event);</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _unhandled_input(<span class="type">const</span> Ref&lt;InputEvent&gt; &amp;event);</span><br><span class="line"><span class="keyword">virtual</span> <span class="type">void</span> _unhandled_key_input(<span class="type">const</span> Ref&lt;InputEvent&gt; &amp;event);</span><br></pre></td></tr></table></figure><h2 id="ADD-PROPERTY的用法"><a href="#ADD-PROPERTY的用法" class="headerlink" title="ADD_PROPERTY的用法"></a>ADD_PROPERTY的用法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查器仅显示特定资源</span></span><br><span class="line"><span class="built_in">ADD_PROPERTY</span>(<span class="built_in">PropertyInfo</span>(Variant::OBJECT, <span class="string">&quot;_resource&quot;</span>,PROPERTY_HINT_RESOURCE_TYPE, <span class="string">&quot;ReleStats&quot;</span>), <span class="string">&quot;set_resource&quot;</span>, <span class="string">&quot;get_resource&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="enum-PropertyHint"><a href="#enum-PropertyHint" class="headerlink" title="enum PropertyHint"></a>enum PropertyHint</h4><ol><li><strong>PROPERTY_HINT_NONE</strong>：没有特定的提示。</li><li><strong>PROPERTY_HINT_RANGE</strong>：表示属性是一个范围值（例如，一个滑动条）。</li><li><strong>PROPERTY_HINT_ENUM</strong>：表示属性是一个枚举类型，可以从预定义的值中选择。</li><li><strong>PROPERTY_HINT_ENUM_SUGGESTION</strong>：与 <code>PROPERTY_HINT_ENUM</code> 类似，但可能提供建议的值。</li><li><strong>PROPERTY_HINT_EXP_EASING</strong>：可能与动画的缓动（easing）相关，特别是指数缓动。</li><li><strong>PROPERTY_HINT_LINK</strong>：表示属性可以链接到另一个属性或资源。</li><li><strong>PROPERTY_HINT_FLAGS</strong>：表示属性是一个标志位集合。</li><li><strong>PROPERTY_HINT_LAYERS_</strong>（如 <code>PROPERTY_HINT_LAYERS_2D_RENDER</code>）：与图层相关的提示，用于 2D 或 3D 渲染、物理或导航。</li><li><strong>PROPERTY_HINT_FILE</strong>：提示用户选择文件。</li><li><strong>PROPERTY_HINT_DIR</strong>：提示用户选择目录。</li><li><strong>PROPERTY_HINT_GLOBAL_FILE&#x2F;DIR</strong>：与 <code>PROPERTY_HINT_FILE/DIR</code> 类似，但可能指向全局路径或资源。</li><li><strong>PROPERTY_HINT_RESOURCE_TYPE</strong>：提示用户选择特定类型的资源。</li><li><strong>PROPERTY_HINT_MULTILINE_TEXT</strong>：表示属性是一个多行文本字段。</li><li><strong>PROPERTY_HINT_EXPRESSION</strong>：可能与表达式求值或编写表达式相关。</li><li><strong>PROPERTY_HINT_PLACEHOLDER_TEXT</strong>：在文本字段中显示占位符文本。</li><li><strong>PROPERTY_HINT_COLOR_NO_ALPHA</strong>：颜色选择器不显示 alpha 通道。</li><li><strong>PROPERTY_HINT_OBJECT_ID</strong>：表示属性是一个对象 ID。</li><li><strong>PROPERTY_HINT_TYPE_STRING</strong>：属性是一个表示类型的字符串。</li><li><strong>PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE</strong>：表示属性是一个节点路径，指向正在编辑的节点。</li><li><strong>PROPERTY_HINT_OBJECT_TOO_BIG</strong>：可能用于警告用户对象太大或复杂。</li><li><strong>PROPERTY_HINT_NODE_PATH_VALID_TYPES</strong>：提示用户选择特定类型的节点路径。</li><li><strong>PROPERTY_HINT_SAVE_FILE&#x2F;GLOBAL_SAVE_FILE</strong>：提示用户保存文件，可能是全局的。</li><li><strong>PROPERTY_HINT_INT_IS_OBJECTID&#x2F;POINTER</strong>：整数属性实际上是对象 ID 或指针。</li><li><strong>PROPERTY_HINT_ARRAY_TYPE</strong>：提示用户选择数组的元素类型。</li><li><strong>PROPERTY_HINT_LOCALE_ID</strong>：表示属性是区域设置（locale）ID。</li><li><strong>PROPERTY_HINT_LOCALIZABLE_STRING</strong>：表示属性是一个可以本地化的字符串。</li><li><strong>PROPERTY_HINT_NODE_TYPE</strong>：提示用户选择特定类型的节点。</li><li><strong>PROPERTY_HINT_HIDE_QUATERNION_EDIT</strong>：在编辑器中隐藏四元数编辑（可能是笔误，应为“quaternion”）。</li><li><strong>PROPERTY_HINT_PASSWORD</strong>：属性是一个密码字段，应该隐藏输入。</li><li><strong>PROPERTY_HINT_MAX</strong>：枚举中的最大值，通常用于范围检查。</li></ol><p>这些提示为编辑器和开发者提供了关于如何解释和编辑属性的上下文信息，从而提高了工作效率和用户体验。</p><h4 id="enum-Type"><a href="#enum-Type" class="headerlink" title="enum Type"></a>enum Type</h4><ol><li><strong>NIL</strong>：表示无或空值。</li><li><strong>原子类型 (atomic types)</strong>：<ul><li><strong>BOOL</strong>：布尔值（真&#x2F;假）。</li><li><strong>INT</strong>：整数。</li><li><strong>FLOAT</strong>：浮点数。</li><li><strong>STRING</strong>：字符串。</li></ul></li><li><strong>数学类型 (math types)</strong>：<ul><li><strong>VECTOR2, VECTOR2I</strong>：二维向量，前者为浮点数，后者为整数。</li><li><strong>RECT2, RECT2I</strong>：二维矩形，同样有浮点数和整数版本。</li><li><strong>VECTOR3, VECTOR3I</strong>：三维向量，浮点数和整数版本。</li><li><strong>TRANSFORM2D</strong>：二维变换矩阵。</li><li><strong>VECTOR4, VECTOR4I</strong>：四维向量，浮点数和整数版本。</li><li><strong>PLANE</strong>：平面（在数学中通常表示为点法式）。</li><li><strong>QUATERNION</strong>：四元数，用于表示3D旋转。</li><li><strong>AABB</strong>：Axis-Aligned Bounding Box，轴对齐包围盒，常用于碰撞检测。</li><li><strong>BASIS</strong>：基础矩阵，通常用于3D变换。</li><li><strong>TRANSFORM3D</strong>：三维变换矩阵。</li><li><strong>PROJECTION</strong>：投影矩阵，可能用于图形渲染。</li></ul></li><li><strong>其他类型 (misc types)</strong>：<ul><li><strong>COLOR</strong>：颜色值。</li><li><strong>STRING_NAME</strong>：字符串名称，可能是优化后的字符串类型，用于快速比较和哈希。</li><li><strong>NODE_PATH</strong>：节点路径，在场景图中定位节点。</li><li><strong>RID</strong>：Resource ID，资源标识符，用于标识资源。</li><li><strong>OBJECT</strong>：对象引用。</li><li><strong>CALLABLE</strong>：可调用的函数、方法或信号。</li><li><strong>SIGNAL</strong>：信号，用于在对象之间通信。</li><li><strong>DICTIONARY</strong>：字典或映射，存储键值对。</li><li><strong>ARRAY</strong>：数组，可以存储任何类型的元素。</li></ul></li><li><strong>类型化数组 (typed arrays)</strong>：<ul><li>这些是固定类型的数组，存储特定类型的元素，如字节、整数、浮点数、向量等。它们可能用于优化性能或内存使用。</li></ul></li><li><strong>VARIANT_MAX</strong>：枚举中的最大值，通常用于范围检查或其他需要枚举最大值的情况。</li></ol><h1 id="Scons"><a href="#Scons" class="headerlink" title="Scons"></a>Scons</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">libname = <span class="string">&quot;libmyts&quot;</span></span><br><span class="line"></span><br><span class="line">env = SConscript(<span class="string">&quot;godot-cpp/SConstruct&quot;</span>)</span><br><span class="line"></span><br><span class="line">env.Append(CPPPATH=[<span class="string">&quot;src/&quot;</span>,<span class="string">&quot;src/store/&quot;</span>,<span class="string">&quot;src/player/&quot;</span>])  <span class="comment">#指定头文件位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sources = Glob(<span class="string">&quot;#src/*.cpp&quot;</span>)  <span class="comment"># 匹配源文件位置</span></span><br><span class="line">sources+=Glob(<span class="string">&quot;#src/store/*.cpp&quot;</span>)</span><br><span class="line">sources+=Glob(<span class="string">&quot;#src/player/*.cpp&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> editor_builders</span><br><span class="line"></span><br><span class="line">docs_xml = []  <span class="comment">#声明一个之</span></span><br><span class="line">docs_xml += Glob(<span class="string">&quot;#src/doc_classes/*.xml&quot;</span>)  <span class="comment">#将右边的值加到左边的值</span></span><br><span class="line">docs_xml = <span class="built_in">sorted</span>(docs_xml)  <span class="comment">#排序</span></span><br><span class="line">docs_header = <span class="string">&quot;#src/doc_data_&#123;&#125;.gen.h&quot;</span>.<span class="built_in">format</span>(libname)  <span class="comment">#名字</span></span><br><span class="line">env.Command(docs_header, docs_xml, env.Action(editor_builders.make_doc_header, <span class="string">&quot;Generating documentation header.&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> env[<span class="string">&#x27;platform&#x27;</span>] == <span class="string">&#x27;linux&#x27;</span>: </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"><span class="keyword">elif</span> env[<span class="string">&#x27;platform&#x27;</span>] == <span class="string">&#x27;windows&#x27;</span>:</span><br><span class="line">    libpath = <span class="string">&quot;F:/AGodot/GDE/godotGED4.3/bin/libtest&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(env[<span class="string">&quot;suffix&quot;</span>], env[<span class="string">&quot;SHLIBSUFFIX&quot;</span>]) <span class="comment">#文件名及生成路径</span></span><br><span class="line">    sharedlib = env.SharedLibrary(libpath,sources)      <span class="comment">#生成动态库(文件名,构建的cpp路径)</span></span><br><span class="line"><span class="comment">#env.Depends(sharedlib,docs_header)       #依赖                                    </span></span><br><span class="line">Default(sharedlib)        <span class="comment">#构建文件</span></span><br></pre></td></tr></table></figure><h1 id="Gdextension"><a href="#Gdextension" class="headerlink" title="Gdextension"></a>Gdextension</h1><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[configuration]</span><br><span class="line"></span><br><span class="line">entry_symbol = <span class="string">&quot;myts_library_init&quot;</span></span><br><span class="line">compatibility_minimum = <span class="number">4.1</span></span><br><span class="line"></span><br><span class="line">[libraries]</span><br><span class="line"></span><br><span class="line">[icons]</span><br><span class="line">GDExample = <span class="string">&quot;res://icons/gd_example.svg&quot;</span></span><br><span class="line"></span><br><span class="line">windows.x86_64.debug = <span class="string">&quot;res://bin/libtest.windows.template_debug.x86_64.dll&quot;</span></span><br></pre></td></tr></table></figure><h1 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h1><h2 id="2D"><a href="#2D" class="headerlink" title="2D"></a>2D</h2><h3 id="基础移动"><a href="#基础移动" class="headerlink" title="基础移动"></a>基础移动</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Player::move_role</span><span class="params">(<span class="type">float</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Vector2 direction = Input::<span class="built_in">get_singleton</span>()-&gt;<span class="built_in">get_vector</span>(<span class="string">&quot;ui_left&quot;</span>, <span class="string">&quot;ui_right&quot;</span>, <span class="string">&quot;ui_up&quot;</span>, <span class="string">&quot;ui_down&quot;</span>);</span><br><span class="line">    Vector2 velovty = <span class="built_in">get_velocity</span>();</span><br><span class="line">    <span class="keyword">if</span> (direction != <span class="built_in">Vector2</span>(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        velovty = direction * speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        velovty=velovty.<span class="built_in">move_toward</span>(<span class="built_in">Vector2</span>(<span class="number">0</span>, <span class="number">0</span>), speed);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">set_velocity</span>(velovty);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怪物追踪玩家"><a href="#怪物追踪玩家" class="headerlink" title="怪物追踪玩家"></a>怪物追踪玩家</h3><ul><li>怪物移动向量&#x3D;(玩家位置-怪物全局位置)*速度</li><li>怪物位置&#x3D;怪物移动向量</li></ul><h3 id="暴击公式"><a href="#暴击公式" class="headerlink" title="暴击公式"></a>暴击公式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">暴击随机率=<span class="number">100</span>-暴击面板</span><br><span class="line">var 暴击率=randi_range(暴击随机率,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> 暴击率==<span class="number">0</span>:</span><br><span class="line">    //暴击伤害加成</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    暴击伤害为<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h2><h3 id="基础移动-1"><a href="#基础移动-1" class="headerlink" title="基础移动"></a>基础移动</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂时没有</span></span><br></pre></td></tr></table></figure><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回单例</span></span><br><span class="line"><span class="function"><span class="type">static</span> Store* <span class="title">Store_static</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//数据写入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">store_write</span><span class="params">(Variant content,String path)</span></span>;</span><br><span class="line"><span class="comment">//数据读取</span></span><br><span class="line"><span class="function">Variant <span class="title">store_read</span><span class="params">(String path)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Store* <span class="title">Store::Store_static</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> Store store;</span><br><span class="line">    <span class="keyword">return</span> &amp;store;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Store::store_write</span><span class="params">(Variant content, String path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ref&lt;FileAccess&gt; write = FileAccess::<span class="built_in">open</span>(path,FileAccess::WRITE);</span><br><span class="line">    write-&gt;<span class="built_in">store_string</span>(content);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Variant <span class="title">Store::store_read</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ref&lt;FileAccess&gt; read = FileAccess::<span class="built_in">open</span>(path, FileAccess::READ);</span><br><span class="line">    Variant variant=read-&gt;<span class="built_in">get_as_text</span>();</span><br><span class="line">    Variant js = JSON::<span class="built_in">parse_string</span>(variant);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> js;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂时没有</span></span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂时没有</span></span><br></pre></td></tr></table></figure><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://gpp.tkchu.me/">游戏编程模式电子书</a></li></ul><table><thead><tr><th>模式</th><th>详情</th><th>模式</th><th>详情</th></tr></thead><tbody><tr><td>命令模式</td><td>通过命令控制对象行为,需要的话可以记录状态并实现撤回</td><td>更新方法模式</td><td>对每个对象单独调用更新函数</td></tr><tr><td>享元模式</td><td>多个对象共用同一个资源或者属性</td><td>游戏循环模式</td><td>游戏循环底层</td></tr><tr><td>状态模式</td><td>通过变量切换对象的不同状态</td><td>双缓冲模式</td><td>绘制相关，当A在执行是B在准备，B在执行时A在准备</td></tr><tr><td>单例模式</td><td>静态方法,全局变量,可以全局访问的属性和方法</td><td>字节码模式</td><td>自定义编程语言?</td></tr><tr><td>原型模式</td><td>复制当前对象生成新的对象,(泛型,模板)。<br />类似场景文件，预制体的实现</td><td>事件队列</td><td>将事件加入队列,等待执行处理,类似观察者模式,多出缓存区域</td></tr><tr><td>观察者模式</td><td>主题对象向所有观察者对象发送信号，在godot中可通过信号实现</td><td>服务器定位器</td><td>类似单例</td></tr><tr><td>子类沙箱模式</td><td>将子对象重复的方法写在基类,避免高耦合度</td><td></td><td></td></tr><tr><td>类型对象</td><td>对象可通过外部配置文件修改产生新的对象，如表格和json等</td><td></td><td></td></tr><tr><td>组件模式</td><td>对对象添加组件进行使用，挂脚本就是一种组件模式</td><td></td><td></td></tr></tbody></table><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>在游戏编程中，命令模式（Command Pattern）是一种常见的设计模式，它允许将请求封装为对象，从而实现请求的排队、记录、撤销&#x2F;重做以及将请求的执行者与请求本身解耦。这对于游戏开发中的多种场景，如用户界面交互、游戏逻辑执行、AI行为模拟等，都是非常有用的。</p><h3 id="命令模式的基本结构"><a href="#命令模式的基本结构" class="headerlink" title="命令模式的基本结构"></a>命令模式的基本结构</h3><ol><li><strong>命令接口（Command）</strong>：定义一个命令的接口，声明执行的方法。</li><li><strong>具体命令（ConcreteCommand）</strong>：实现命令接口，并关联一个接收者对象。调用接收者对象的相应操作以执行请求。</li><li><strong>接收者（Receiver）</strong>：知道如何执行与请求相关的操作。任何类都可能作为一个接收者。</li><li><strong>调用者（Invoker）</strong>：要求命令执行一个请求。它包含一个或多个命令对象，并调用命令对象的执行方法。</li><li><strong>客户端（Client）</strong>：创建具体的命令对象，并设置它的接收者。</li></ol><h3 id="游戏编程中的命令模式示例"><a href="#游戏编程中的命令模式示例" class="headerlink" title="游戏编程中的命令模式示例"></a>游戏编程中的命令模式示例</h3><ul><li><p>将需要执行的对象具体行为通过命令对象来调用</p></li><li><p>当按下1键玩家的名字改为小海,按下2键又变为小月</p></li></ul><ol><li><strong>接收者（Receiver）</strong>：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 玩家</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    玩家() &#123;&#125;;</span><br><span class="line">    ~玩家() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    string name&#123;<span class="string">&quot;小月&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>命令接口（Command）</strong>：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="keyword">class</span> 抽象命令</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="type">void</span> 执行(string string)=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> <span class="type">void</span> 撤销()=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.<br>3. <strong>具体命令（ConcreteCommand）</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现命令对象</span></span><br><span class="line"><span class="keyword">class</span> 命令 :<span class="keyword">public</span> 抽象命令</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    玩家* 玩家指针;    <span class="comment">//指向玩家实例</span></span><br><span class="line">    string name;     <span class="comment">//记录玩家属性</span></span><br><span class="line"></span><br><span class="line">    命令(玩家&amp;p_玩家):玩家指针(&amp;p_玩家) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> 执行(string p_name)</span><br><span class="line">    &#123;</span><br><span class="line">        name = 玩家指针-&gt;name;    <span class="comment">//记录玩家属性</span></span><br><span class="line">        玩家指针-&gt;name = p_name;   <span class="comment">//指向玩家行为,通过字符串更改name属性</span></span><br><span class="line">        cout &lt;&lt; 玩家指针-&gt;name &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> 撤销()</span><br><span class="line">    &#123;</span><br><span class="line">        玩家指针-&gt;name = name;     <span class="comment">//撤销玩家属性,将name属性更改为上一步记录的值</span></span><br><span class="line">        cout &lt;&lt; 玩家指针-&gt;name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    玩家 玩家实例;</span><br><span class="line">    命令 命令实例(玩家实例);  <span class="comment">//初始化,引用玩家对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            命令实例.执行(<span class="string">&quot;小海&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            命令实例.撤销();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>调用者（Invoker）</strong>：</li></ol><p>调用者可以是游戏的主循环、UI管理器或AI系统等。在这个示例中，我们可以假设有一个UI管理器，它负责处理玩家的点击事件。</p><ol start="6"><li><strong>客户端（Client）</strong>：</li></ol><p>客户端通常是游戏的初始化代码或配置部分。在这里，我们创建具体的命令对象，并将其与接收者关联起来。然后，我们将命令对象传递给调用者（如UI管理器）。</p><h3 id="命令模式的优点"><a href="#命令模式的优点" class="headerlink" title="命令模式的优点"></a>命令模式的优点</h3><ul><li><strong>解耦</strong>：命令模式将请求的执行者与请求本身解耦，使得请求的发送者和接收者可以独立地变化。</li><li><strong>可扩展性</strong>：新的命令可以很容易地添加到系统中，而无需修改现有的类。</li><li><strong>可撤销&#x2F;重做</strong>：通过实现<code>undo()</code>等方法，可以很容易地支持命令的撤销和重做功能。</li><li><strong>队列和日志</strong>：命令对象可以存储在队列中以实现命令的批量执行或延迟执行，也可以存储在日志中以记录游戏的历史状态。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>命令模式可能会增加系统的复杂性和开销，因此应谨慎使用。在简单场景中，可能不需要使用命令模式。</li><li>在实现命令模式时，要确保正确地管理命令对象的生命周期，以避免内存泄漏等问题。</li></ul><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>在游戏编程中，享元模式（Flyweight Pattern）是一种用于优化性能的设计模式，它通过共享来避免大量拥有相同内容对象的开销。在游戏开发中，这种模式特别适用于那些需要创建大量相似对象的情况，如玩家角色、怪物、道具等。</p><p>享元模式的核心思想是将对象的内部状态（即不随环境改变而改变的属性）和外部状态（即随环境改变而改变的属性）进行区分。通过共享内部状态，可以显著减少对象的数量，从而降低内存消耗和提高性能。</p><p>在游戏编程中，享元模式的应用场景可能包括：</p><ol><li><strong>角色创建</strong>：在大型多人在线游戏（MMO）中，可能存在大量的玩家角色。这些角色可能有很多相同的属性（如种族、职业、等级等），而装备、技能、位置等属性则各不相同。通过享元模式，可以将这些共享的属性存储在一个享元对象中，并为每个角色分配一个包含其特有属性的实例。</li><li><strong>怪物生成</strong>：在游戏中，可能需要生成大量的怪物。这些怪物可能具有相同的外观、属性和行为，但位置、状态等属性可能各不相同。通过享元模式，可以共享怪物的内部状态，从而减少内存消耗。</li><li><strong>道具管理</strong>：在游戏中，可能存在大量的道具，这些道具可能具有相同的属性（如名称、类型、功能等），但数量、位置等属性可能各不相同。通过享元模式，可以共享道具的内部状态，从而优化内存使用。</li></ol><p>在实现享元模式时，通常需要定义两个主要类：</p><ol><li><strong>享元类（Flyweight）</strong>：用于存储对象的内部状态。这个类通常具有一个静态的工厂方法或工厂类来管理享元对象的创建和共享。</li><li><strong>上下文类（Context）</strong>：用于存储对象的外部状态。这个类持有享元对象的引用，并提供操作这些对象的方法。当需要操作对象时，上下文类会将享元对象与其外部状态结合起来。</li></ol><p>需要注意的是，享元模式虽然可以显著优化性能，但也可能增加系统的复杂性。因此，在使用享元模式时，需要权衡其优点和缺点，并根据具体需求进行选择和调整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 享元接口  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterFlyweight</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">MonsterFlyweight</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attack</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">setLocation</span><span class="params">(<span class="type">const</span> std::string&amp; location)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> std::string&amp; <span class="title">getLocation</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的享元类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> : <span class="keyword">public</span> MonsterFlyweight &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string monsterType;</span><br><span class="line">    <span class="type">int</span> attackPower;</span><br><span class="line">    std::string location; <span class="comment">// 外部状态通常不应在享元类中直接存储，但为简单起见，这里这样做  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Monster</span>(<span class="type">const</span> std::string&amp; monsterType, <span class="type">int</span> attackPower)</span><br><span class="line">        : <span class="built_in">monsterType</span>(monsterType), <span class="built_in">attackPower</span>(attackPower) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; monsterType &lt;&lt; <span class="string">&quot; monster attacks with power &quot;</span> &lt;&lt; attackPower &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setLocation</span><span class="params">(<span class="type">const</span> std::string&amp; location)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">getLocation</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元工厂类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterFactory</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unordered_map&lt;std::string, std::unique_ptr&lt;MonsterFlyweight&gt;&gt; monsterPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">MonsterFlyweight* <span class="title">getMonster</span><span class="params">(<span class="type">const</span> std::string&amp; monsterType, <span class="type">int</span> attackPower)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = monsterPool.<span class="built_in">find</span>(monsterType);</span><br><span class="line">        <span class="keyword">if</span> (it == monsterPool.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            it = monsterPool.<span class="built_in">emplace</span>(std::piecewise_construct,</span><br><span class="line">                std::forward_as_tuple(monsterType),</span><br><span class="line">                std::forward_as_tuple(std::<span class="built_in">make_unique</span>&lt;Monster&gt;(monsterType, attackPower))).first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类（用于存储外部状态）  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterContext</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MonsterFlyweight* monster;</span><br><span class="line">    std::string location; <span class="comment">// 外部状态在上下文中存储  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MonsterContext</span>(MonsterFlyweight* monster) : <span class="built_in">monster</span>(monster) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setLocation</span><span class="params">(<span class="type">const</span> std::string&amp; location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;location = location;</span><br><span class="line">        monster-&gt;<span class="built_in">setLocation</span>(location); <span class="comment">// 通知享元更新其位置（这里只是为了演示）  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        monster-&gt;<span class="built_in">attack</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Monster is now at &quot;</span> &lt;&lt; location &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码  </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MonsterFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并共享享元对象  </span></span><br><span class="line">    MonsterFlyweight* goblin = factory.<span class="built_in">getMonster</span>(<span class="string">&quot;Goblin&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    MonsterFlyweight* orc = factory.<span class="built_in">getMonster</span>(<span class="string">&quot;Orc&quot;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用上下文来设置外部状态并执行操作  </span></span><br><span class="line">    <span class="function">MonsterContext <span class="title">goblinContext</span><span class="params">(goblin)</span></span>;</span><br><span class="line">    goblinContext.<span class="built_in">setLocation</span>(<span class="string">&quot;Cave Entrance&quot;</span>);</span><br><span class="line">    goblinContext.<span class="built_in">attack</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">MonsterContext <span class="title">orcContext</span><span class="params">(orc)</span></span>;</span><br><span class="line">    orcContext.<span class="built_in">setLocation</span>(<span class="string">&quot;Forest Clearing&quot;</span>);</span><br><span class="line">    orcContext.<span class="built_in">attack</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>在游戏编程中，状态模式（State Pattern）是一种行为设计模式，它允许一个对象在其内部状态改变时改变它的行为。状态模式使得对象看起来好像修改了它的类，但它实际上是通过将对象的行为委托给其当前状态对象来改变其行为的。这提供了一种使行为依赖于对象内部状态变化的解决方案，而不是通过大量的条件语句和复杂的逻辑来管理这些变化。</p><p>以下是一个简单的游戏编程中状态模式的示例，假设我们有一个角色（如玩家角色）可以处于不同的状态（如空闲、移动、攻击等）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">State</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">class</span> Character* character)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空闲状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IdleState</span> : <span class="keyword">public</span> State &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Character* character)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Character is idle.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 切换到其他状态...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveState</span> : <span class="keyword">public</span> State &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Character* character)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Character is moving.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 角色移动的逻辑...</span></span><br><span class="line">        <span class="comment">// 切换到其他状态...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻击状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AttackState</span> : <span class="keyword">public</span> State &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Character* character)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Character is attacking.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 角色攻击的逻辑...</span></span><br><span class="line">        <span class="comment">// 切换到其他状态...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    State* state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Character</span>() : <span class="built_in">state</span>(<span class="keyword">new</span> <span class="built_in">IdleState</span>()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setState</span><span class="params">(State* newState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> state;</span><br><span class="line">        state = newState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state-&gt;<span class="built_in">handle</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他角色相关的方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Character character;</span><br><span class="line"></span><br><span class="line">    character.<span class="built_in">update</span>(); <span class="comment">// 输出 &quot;Character is idle.&quot;</span></span><br><span class="line"></span><br><span class="line">    character.<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">MoveState</span>());</span><br><span class="line">    character.<span class="built_in">update</span>(); <span class="comment">// 输出 &quot;Character is moving.&quot;</span></span><br><span class="line"></span><br><span class="line">    character.<span class="built_in">setState</span>(<span class="keyword">new</span> <span class="built_in">AttackState</span>());</span><br><span class="line">    character.<span class="built_in">update</span>(); <span class="comment">// 输出 &quot;Character is attacking.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理动态分配的状态对象（在实际应用中可能需要更复杂的内存管理）</span></span><br><span class="line">    <span class="keyword">delete</span> character.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Character</code> 类有一个 <code>State</code> 类型的成员变量 <code>state</code>，它指向当前的状态对象。<code>Character</code> 类有一个 <code>setState</code> 方法来更改其当前状态，以及一个 <code>update</code> 方法来调用当前状态对象的 <code>handle</code> 方法。每个状态类（如 <code>IdleState</code>、<code>MoveState</code>、<code>AttackState</code>）都实现了 <code>handle</code> 方法，该方法定义了当角色处于该状态时应该执行的行为。</p><p>通过使用状态模式，我们可以轻松地添加新的状态和行为，而无需修改 <code>Character</code> 类或现有的状态类。这提高了代码的可维护性和可扩展性。</p><h3 id="子类沙箱模式"><a href="#子类沙箱模式" class="headerlink" title="子类沙箱模式"></a>子类沙箱模式</h3><ul><li>子类沙箱模式（Subclass Sandbox Pattern）是一种设计模式，主要用于在面向对象编程中管理子类与基类之间的行为和操作。该模式的核心思想是将一些通用的操作或行为定义为基类的方法，而子类则通过重载或实现这些方法来实现特定的行为。通过这种方式，可以将所有与这些操作相关的耦合都聚集到基类，从而使子类与其他类更加独立。</li></ul><p>​        子类沙箱模式通常适用于以下情况：</p><ol><li>有一个带有大量子类的基类。</li><li>基类能够提供所有子类可能需要执行的操作集合。</li><li>在子类之间有重叠的代码，你想让它们之间更容易地共享代码。</li><li>你想使这些继承类和程序的其他代码之间的耦合最小化。</li></ol><p>在子类沙箱模式中，基类通常包含一些抽象方法或虚方法，这些方法定义了子类需要实现的行为。子类通过重载这些方法来实现自己的特定行为。同时，基类还可以包含一些受保护的（protected）方法，这些方法提供了一些子类在实现特定行为时需要调用的操作。这些受保护的方法可以被视为“沙箱”中的安全原语，子类可以在其中安全地执行特定的操作。</p><p>子类沙箱模式的优点包括：</p><ol><li>减少代码冗余：通过在基类中定义通用的操作，可以避免在子类中重复编写相同的代码。</li><li>提高代码的可维护性：由于所有的耦合都聚集到基类，子类与其他类之间的依赖关系变得更加清晰和简单，从而提高了代码的可维护性。</li><li>促进代码复用：子类可以通过继承基类来重用基类中定义的操作，从而提高了代码的复用性。</li></ol><p>然而，子类沙箱模式也存在一些缺点。例如，当基类包含大量的方法时，它可能会变得庞大且难以维护。此外，如果子类需要访问基类中的受保护方法，则可能会破坏封装性并增加类之间的耦合度。因此，在使用子类沙箱模式时，需要权衡其优缺点并根据具体的应用场景来选择是否使用该模式。</p><ul><li><p>在C++中，子类沙箱模式的一个示例可以通过创建一个基类，该类包含一些虚函数（表示子类可能需要实现的行为），以及一个或多个受保护的方法（表示子类可以安全调用的操作）。子类将继承这个基类，并根据需要重载虚函数来实现特定的行为。</p><p>以下是一个简单的C++示例，展示了子类沙箱模式的概念：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类，包含虚函数和受保护的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 虚函数，子类需要实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">executeAction</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// 受保护的方法，子类可以调用</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">protectedOperation</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Protected operation called with message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，继承基类并重载虚函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重载基类中的虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">executeAction</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived class action starting...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 调用基类中的受保护方法</span></span><br><span class="line">        <span class="built_in">protectedOperation</span>(<span class="string">&quot;Hello from Derived!&quot;</span>);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived class action finished.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，用于测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建子类对象</span></span><br><span class="line">    Derived derivedObj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用子类对象的虚函数，该函数会调用基类中的受保护方法</span></span><br><span class="line">    derivedObj.<span class="built_in">executeAction</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>Base</code> 类是一个基类，它包含一个纯虚函数 <code>executeAction()</code> 和一个受保护的方法 <code>protectedOperation()</code>。<code>Derived</code> 类是 <code>Base</code> 的子类，它重载了 <code>executeAction()</code> 函数并在其中调用了基类的 <code>protectedOperation()</code> 方法。在 <code>main()</code> 函数中，我们创建了一个 <code>Derived</code> 类的对象，并调用了它的 <code>executeAction()</code> 方法，该方法会输出一些信息并调用基类的受保护方法。</p><p>请注意，这个示例主要是为了演示子类沙箱模式的概念，而不是一个完整的应用程序。在实际的应用程序中，基类和子类可能会包含更多的属性和方法，并且它们之间的关系可能会更加复杂。</p></li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="函数工厂"><a href="#函数工厂" class="headerlink" title="函数工厂"></a>函数工厂</h4><ul><li><p>在工厂类声明一个返回类的实例的函数</p></li><li><p>这段代码创建了一个怪物基类,然后通过继承实现了不同怪物,然后创建工厂来返回不同怪物的实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪物的基类</span></span><br><span class="line"><span class="keyword">class</span> 怪物基类</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    怪物基类(string p_name):<span class="built_in">name</span>(p_name) &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~怪物基类() &#123;&#125;;</span><br><span class="line">    <span class="type">void</span> 共同方法()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;怪物实现,都继承之怪物基类<br>class 野猪 :public 怪物基类<br>{<br>public:</p><pre><code>野猪(string p_name) :怪物基类(p_name) &#123;&#125;;~野猪() &#123;&#125;;</code></pre><p>};</p><p>class 黑熊 :public 怪物基类<br>{<br>public:</p><pre><code>黑熊(string p_name) :怪物基类(p_name) &#123;&#125;;~黑熊() &#123;&#125;;</code></pre><p>};</p><p>class 蜘蛛 :public 怪物基类<br>{<br>public:</p><pre><code>蜘蛛(string p_name) :怪物基类(p_name) &#123;&#125;;~蜘蛛() &#123;&#125;;</code></pre><p>};</p><p>&#x2F;&#x2F;声明一个怪物工厂,用于生产怪物<br>class 怪物工厂<br>{<br>public:</p><pre><code>怪物基类* 创建野猪(string p_name)&#123;    return new 野猪(p_name);&#125;怪物基类* 创建黑熊(string p_name)&#123;    return new 野猪(p_name);&#125;怪物基类* 创建蜘蛛(string p_name)&#123;    return new 野猪(p_name);&#125;</code></pre><p>};</p><p>int main() {</p><pre><code>怪物工厂 工厂;怪物基类* new野猪=工厂.创建野猪(&quot;讨之助&quot;);怪物基类* new黑熊 = 工厂.创建黑熊(&quot;小明&quot;);怪物基类* new蜘蛛 = 工厂.创建蜘蛛(&quot;假面骑士&quot;);new野猪-&gt;共同方法();new黑熊-&gt;共同方法();new蜘蛛-&gt;共同方法();return 0;</code></pre><p>}</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">![www](/img/函数工厂模式.png)</span><br><span class="line"></span><br><span class="line">#### 抽象工厂</span><br><span class="line"></span><br><span class="line">+ 通过抽象工厂和抽象产品生产一系列的产品,比图我要进货手机,有安卓和苹果等品牌,我就需要这个手机工厂生产了这两种品牌的手机</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//产品抽象类,所以苹果产品都继承这个类</span><br><span class="line">class 苹果</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual ~苹果() &#123;&#125;;</span><br><span class="line">  virtual void 输出产品名字()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//苹果电脑实现</span><br><span class="line">class 苹果电脑 :public 苹果</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~苹果电脑() &#123;&#125;;</span><br><span class="line">  void 输出产品名字()</span><br><span class="line">  &#123;</span><br><span class="line">      cout &lt;&lt; &quot;苹果电脑&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//苹果手机实现</span><br><span class="line">class 苹果手机 :public 苹果</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~苹果手机() &#123;&#125;;</span><br><span class="line">  void 输出产品名字()</span><br><span class="line">  &#123;</span><br><span class="line">      cout &lt;&lt; &quot;苹果手机&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//安卓产品抽象类,索引安卓产品都继承这个类</span><br><span class="line">class 安卓</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual ~安卓() &#123;&#125;;</span><br><span class="line">  virtual void 输出产品名字()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//安卓点啊弄实现</span><br><span class="line">class 安卓电脑 :public 安卓</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~安卓电脑() &#123;&#125;;</span><br><span class="line">  void 输出产品名字()</span><br><span class="line">  &#123;</span><br><span class="line">      cout &lt;&lt; &quot;安卓电脑&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//安卓手机实现</span><br><span class="line">class 安卓手机 :public 安卓</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~安卓手机() &#123;&#125;;</span><br><span class="line">  void 输出产品名字()</span><br><span class="line">  &#123;</span><br><span class="line">      cout &lt;&lt; &quot;安卓手机&quot; &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//工厂抽象类</span><br><span class="line">class 数码工厂</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  virtual ~数码工厂() &#123;&#125;;</span><br><span class="line">  virtual 安卓* 生产安卓产品() = 0;</span><br><span class="line">  virtual 苹果* 生产苹果产品() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//工厂实现,可以生产各种品牌的电脑</span><br><span class="line">class 电脑工厂 :public 数码工厂</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~电脑工厂() &#123;&#125;;</span><br><span class="line">  安卓* 生产安卓产品()</span><br><span class="line">  &#123;</span><br><span class="line">      return new  安卓电脑;</span><br><span class="line">  &#125;</span><br><span class="line">  苹果* 生产苹果产品()</span><br><span class="line">  &#123;</span><br><span class="line">      return new 苹果电脑;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//工厂实现,可以生产各种品牌的手机</span><br><span class="line">class 手机工厂 :public 数码工厂</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  ~手机工厂() &#123;&#125;;</span><br><span class="line">  安卓* 生产安卓产品()</span><br><span class="line">  &#123;</span><br><span class="line">      return new  安卓手机;</span><br><span class="line">  &#125;</span><br><span class="line">  苹果* 生产苹果产品()</span><br><span class="line">  &#123;</span><br><span class="line">      return new 苹果手机;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">  //我需要生产电脑</span><br><span class="line">  电脑工厂* 电脑商 = new 电脑工厂;</span><br><span class="line">  苹果* 苹果pro = 电脑商-&gt;生产苹果产品();</span><br><span class="line">  安卓* 安卓平板 = 电脑商-&gt;生产安卓产品();</span><br><span class="line">  苹果pro-&gt;输出产品名字();</span><br><span class="line">  安卓平板-&gt;输出产品名字();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //我需要手机</span><br><span class="line">  手机工厂* 手机商 = new 手机工厂();</span><br><span class="line">  苹果* 苹果15 = 手机商-&gt;生产苹果产品();</span><br><span class="line">  苹果15-&gt;输出产品名字();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimg%5C%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂模式"></p><ul><li>怪物工厂</li><li>通过抽象怪物工厂创建一系列的类</li></ul><p><img src="/%5Cimg%5C%E6%80%AA%E7%89%A9%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂模式"></p><p>在游戏开发中，抽象工厂模式（Abstract Factory Pattern）的使用通常出现在以下场景：</p><ol><li><strong>需要创建多个相关或相互依赖的对象时</strong>：抽象工厂模式允许你定义一个接口来创建一组相关的对象，而无需指定它们的具体类。这在游戏开发中很常见，因为游戏通常包含许多相互关联的对象，如角色、武器、装备等。</li><li><strong>需要处理多个产品族时</strong>：游戏可能会根据不同的版本、难度或模式而有不同的产品族（即一组相关的对象）。例如，一个游戏可能有不同的角色族（如战士、法师、盗贼等），每个角色族都有自己的武器、装备和技能。使用抽象工厂模式，你可以为每个角色族创建一个具体的工厂，该工厂负责创建该角色族所需的所有对象。</li><li><strong>需要隐藏对象的创建细节时</strong>：在游戏开发中，你可能希望隐藏对象的创建细节，以便在不影响客户端代码的情况下更改对象的实现。抽象工厂模式允许你定义一个接口来创建对象，而客户端代码只需与该接口交互，而无需知道对象的实际创建过程。</li><li><strong>需要提高系统的可扩展性和可维护性时</strong>：随着游戏的发展，你可能需要添加新的角色、武器或装备。使用抽象工厂模式，你可以轻松地添加新的产品族或产品，而无需修改现有的客户端代码。这有助于提高系统的可扩展性和可维护性。</li></ol><p>总之，抽象工厂模式在游戏开发中是一种非常有用的设计模式，它可以帮助你创建和管理一组相关的对象，并隐藏对象的创建细节。如果你的游戏需要处理多个产品族或需要提高系统的可扩展性和可维护性，那么抽象工厂模式可能是一个很好的选择。</p><p>在游戏开发中，抽象工厂模式的一个典型应用例子是创建不同类型的角色（如战士、法师）以及他们各自的装备。以下是一个简化的例子来说明这一点：</p><p>首先，定义一些接口来表示不同类型的角色和装备：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 角色接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Character</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">equip</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 装备武器和装备</span></span><br><span class="line">    <span class="comment">// 其他角色方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 战士接口和具体实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Warrior</span> : <span class="keyword">public</span> Character &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">equip</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Warrior equips sword and shield.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他战士方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法师接口和具体实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mage</span> : <span class="keyword">public</span> Character &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">equip</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Mage equips staff and robe.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他法师方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 武器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Weapon</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// 武器的方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 战士武器和法师武器的具体实现（略）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装备接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Armor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Armor</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// 装备的方法...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 战士装备和法师装备的具体实现（略）</span></span><br></pre></td></tr></table></figure><p>接下来，定义一个抽象工厂接口来创建角色和装备：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharacterFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CharacterFactory</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Character* <span class="title">createWarrior</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Character* <span class="title">createMage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Weapon* <span class="title">createWarriorWeapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Weapon* <span class="title">createMageWeapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Armor* <span class="title">createWarriorArmor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Armor* <span class="title">createMageArmor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后，为每个产品族（如战士和法师）创建一个具体的工厂类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 战士工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WarriorFactory</span> : <span class="keyword">public</span> CharacterFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Character* <span class="title">createWarrior</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Warrior</span>(); &#125;</span><br><span class="line">    <span class="function">Weapon* <span class="title">createWarriorWeapon</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">/* 返回战士武器的实例 */</span> &#125;</span><br><span class="line">    <span class="function">Armor* <span class="title">createWarriorArmor</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">/* 返回战士装备的实例 */</span> &#125;</span><br><span class="line">    <span class="comment">// 其他法师相关的方法在这里不需要实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法师工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MageFactory</span> : <span class="keyword">public</span> CharacterFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Character* <span class="title">createMage</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Mage</span>(); &#125;</span><br><span class="line">    <span class="function">Weapon* <span class="title">createMageWeapon</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">/* 返回法师武器的实例 */</span> &#125;</span><br><span class="line">    <span class="function">Armor* <span class="title">createMageArmor</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">/* 返回法师装备的实例 */</span> &#125;</span><br><span class="line">    <span class="comment">// 其他战士相关的方法在这里不需要实现</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，在游戏的主逻辑或某个客户端代码中，你可以使用这些工厂来创建角色和装备：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CharacterFactory* factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建战士族</span></span><br><span class="line">    factory = <span class="keyword">new</span> <span class="built_in">WarriorFactory</span>();</span><br><span class="line">    Character* warrior = factory-&gt;<span class="built_in">createWarrior</span>();</span><br><span class="line">    warrior-&gt;<span class="built_in">equip</span>(); <span class="comment">// 输出 &quot;Warrior equips sword and shield.&quot;</span></span><br><span class="line">    <span class="comment">// ... 其他战士相关的操作 ...</span></span><br><span class="line">    <span class="keyword">delete</span> warrior;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建法师族</span></span><br><span class="line">    <span class="keyword">delete</span> factory; <span class="comment">// 先删除前一个工厂实例</span></span><br><span class="line">    factory = <span class="keyword">new</span> <span class="built_in">MageFactory</span>();</span><br><span class="line">    Character* mage = factory-&gt;<span class="built_in">createMage</span>();</span><br><span class="line">    mage-&gt;<span class="built_in">equip</span>(); <span class="comment">// 输出 &quot;Mage equips staff and robe.&quot;</span></span><br><span class="line">    <span class="comment">// ... 其他法师相关的操作 ...</span></span><br><span class="line">    <span class="keyword">delete</span> mage;</span><br><span class="line">    <span class="keyword">delete</span> factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子展示了如何使用抽象工厂模式来创建和管理游戏中不同类型的角色和装备。每个具体的工厂类负责创建它所属产品族的对象，从而实现了创建过程的封装和隔离。这有助于保持代码的清晰性和可维护性，并允许在不影响客户端代码的情况下添加新的产品族或修改现有产品族的实现。</p><h1 id="装配系统"><a href="#装配系统" class="headerlink" title="装配系统"></a>装配系统</h1><ul><li><p>所需节点Node3D,Marker3D作为部件放置的位置,方便调整位置</p></li><li><pre><code class="language-gdscript">@toolextends Node3Dclass_name 装备模型@onready var 枪身: Marker3D = $&quot;枪身&quot;@onready var 枪管: Marker3D = $&quot;枪管&quot;@onready var 瞄准仪: Marker3D = $&quot;瞄准仪&quot;#资源,每当资源变更时刷新配件节点@export var 枪身资源:武器资源类:    get:         return 枪身资源    set(value):        if value==枪身资源:            return        枪身资源=value        武器资源更新()@export var 枪管资源:武器资源类:    get:         return 枪管资源    set(value):        if value==枪管资源:            return        枪管资源=value        武器资源更新()@export var 瞄准仪资源:武器资源类:    get:         return 瞄准仪资源    set(value):        if value==瞄准仪资源:            return        瞄准仪资源=value        武器资源更新()# Called every frame. &#39;delta&#39; is the elapsed time since the previous frame.func _process(delta: float) -&gt; void:    passfunc 武器资源更新():    #初始化节点,将配件全部清除    if(枪身 and 枪身.get_child_count()&gt;0):        枪身.get_child(0).queue_free()    if(枪管 and 枪管.get_child_count()&gt;0):        枪管.get_child(0).queue_free()    if(瞄准仪 and 瞄准仪.get_child_count()&gt;0):        瞄准仪.get_child(0).queue_free()    #检查资源是否存在    if 枪身!=null and 枪身资源:        var 武器场景:PackedScene=load(枪身资源.武器场景路径)        枪身.add_child(武器场景.instantiate())    else: #如果武器不存在,初始化其他配件        枪管资源=null        瞄准仪资源=null    #检查其他配件,如果存在则添加到节点树    if 枪管!=null and 枪管资源:        var 枪管场景:PackedScene=load(枪管资源.武器场景路径)        枪管.add_child(枪管场景.instantiate())    if 瞄准仪!=null and 瞄准仪资源:        var 瞄准仪场景:PackedScene=load(瞄准仪资源.武器场景路径)        瞄准仪.add_child(瞄准仪场景.instantiate())+ 背包,负责更新装备      extends Control    @export var 武器展示场景: 装备模型  @export var 武器装备场景: 装备模型  @export var 物品背包:Array[Resource]    # Called when the node enters the scene tree for the first time.  func _ready() -&gt; void:      pass # Replace with function body.      # Called every frame. &#39;delta&#39; is the elapsed time since the previous frame.    func _process(delta: float) -&gt; void:        更新装备(武器展示场景);      更新装备(武器装备场景);      pass    func 更新装备(data:装备模型):        if data:          data.枪身资源=物品背包[0]          data.枪管资源=物品背包[1]          data.瞄准仪资源=物品背包[2]  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>  extends PanelContainer        @onready var texture_rect: TextureRect        @onready var 背包: Control = $&quot;../../..&quot;    @export var 索引:int=0    # Called when the node enters the scene tree for the first time.    func _ready() -&gt; void:        texture_rect=get_node(&quot;TextureRect&quot;)        pass # Replace with function body.        # Called every frame. &#39;delta&#39; is the elapsed time since the previous frame.    func _process(delta: float) -&gt; void:        if 背包.物品背包[索引]:            texture_rect.texture=背包.物品背包[索引].icon        else:            texture_rect.texture=preload(&quot;res://Icon/空纹理.png&quot;)        pass        func _get_drag_data(position):        if 背包.物品背包[索引]:            var cpb =TextureRect.new()            cpb.texture=背包.物品背包[索引].icon            set_drag_preview(cpb)            return 背包.物品背包[索引]        func _can_drop_data(position, data):        # 检查是否为武器基类        if data is Resource:            return true        else:            return false    #数据处理    func _drop_data(position, data):        print(data)        if 背包.物品背包[索引]==null:            var ite=背包.物品背包.find(data)            背包.物品背包    [索引]=data            背包.物品背包[ite]=null        else :            var ite=背包.物品背包.find(data)            var temp=背包.物品背包[索引]            背包.物品背包[索引]=data            背包.物品背包[ite]=temp  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 游戏能力系统</span><br><span class="line">```cpp</span><br><span class="line">#ifndef TABILITY_H</span><br><span class="line">#define TABILITY_H</span><br><span class="line"></span><br><span class="line">#include &lt;godot_cpp/classes/node.hpp&gt;</span><br><span class="line"></span><br><span class="line">//#include &lt;godot_cpp/core/class_db.hpp&gt;</span><br><span class="line">#include &lt;godot_cpp/variant/utility_functions.hpp&gt;  //输出字符串用</span><br><span class="line">using namespace godot;</span><br><span class="line"></span><br><span class="line">//#define VARIANT_ARG_MAX 8</span><br><span class="line">//#define VARIANT_ARG_DECLARE const Variant &amp;p_arg1, const Variant &amp;p_arg2, const Variant &amp;p_arg3, const Variant &amp;p_arg4, const //Variant &amp;p_arg5, const Variant &amp;p_arg6, const Variant &amp;p_arg7, const Variant &amp;p_arg8</span><br><span class="line"></span><br><span class="line">class AbilitySystem : public Node</span><br><span class="line">&#123;</span><br><span class="line">    GDCLASS(AbilitySystem, Node);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">protected:</span><br><span class="line">    static void _bind_methods();</span><br><span class="line">public:</span><br><span class="line">    AbilitySystem();</span><br><span class="line">    ~AbilitySystem();</span><br><span class="line">&#125;;</span><br><span class="line">#endif // TABILITY_H</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*  threen.cpp                                                            */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*                         This file is part of:                          */</span></span><br><span class="line"><span class="comment">/*                             GODOT ENGINE                               */</span></span><br><span class="line"><span class="comment">/*                        https://godotengine.org                         */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */</span></span><br><span class="line"><span class="comment">/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */</span></span><br><span class="line"><span class="comment">/*                                                                        */</span></span><br><span class="line"><span class="comment">/* Permission is hereby granted, free of charge, to any person obtaining  */</span></span><br><span class="line"><span class="comment">/* a copy of this software and associated documentation files (the        */</span></span><br><span class="line"><span class="comment">/* &quot;Software&quot;), to deal in the Software without restriction, including    */</span></span><br><span class="line"><span class="comment">/* without limitation the rights to use, copy, modify, merge, publish,    */</span></span><br><span class="line"><span class="comment">/* distribute, sublicense, and/or sell copies of the Software, and to     */</span></span><br><span class="line"><span class="comment">/* permit persons to whom the Software is furnished to do so, subject to  */</span></span><br><span class="line"><span class="comment">/* the following conditions:                                              */</span></span><br><span class="line"><span class="comment">/*                                                                        */</span></span><br><span class="line"><span class="comment">/* The above copyright notice and this permission notice shall be         */</span></span><br><span class="line"><span class="comment">/* included in all copies or substantial portions of the Software.        */</span></span><br><span class="line"><span class="comment">/*                                                                        */</span></span><br><span class="line"><span class="comment">/* THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,        */</span></span><br><span class="line"><span class="comment">/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */</span></span><br><span class="line"><span class="comment">/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */</span></span><br><span class="line"><span class="comment">/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */</span></span><br><span class="line"><span class="comment">/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */</span></span><br><span class="line"><span class="comment">/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */</span></span><br><span class="line"><span class="comment">/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;public/AbilitySystem.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &quot;easing_equations.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;godot_cpp/core/class_db.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;godot_cpp/variant/utility_functions.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> godot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> AbilitySystem::_bind_methods()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AbilitySystem::<span class="built_in">AbilitySystem</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AbilitySystem::~<span class="built_in">AbilitySystem</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#杂项</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CS%E6%88%88%E5%A4%9A%E6%9D%82%E9%A1%B9/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CS%E6%88%88%E5%A4%9A%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="戈多CS源码"><a href="#戈多CS源码" class="headerlink" title="戈多CS源码"></a>戈多CS源码</h1><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span> : <span class="title">GodotObject</span></span><br></pre></td></tr></table></figure><h2 id="枚举声明"><a href="#枚举声明" class="headerlink" title="枚举声明"></a>枚举声明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> ProcessModeEnum : <span class="built_in">long</span></span><br><span class="line">   &#123;</span><br><span class="line">       Inherit,</span><br><span class="line">       Pausable,</span><br><span class="line">       WhenPaused,</span><br><span class="line">       Always,</span><br><span class="line">       Disabled</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="FLAGS声明"><a href="#FLAGS声明" class="headerlink" title="FLAGS声明"></a>FLAGS声明</h2><ul><li>可以组合多种状态</li><li>示例</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">    [<span class="meta">Flags</span>]</span><br><span class="line">    <span class="keyword">public</span> fliagsenum MySlags&#123;A=<span class="number">1</span>,B=<span class="number">2</span>,C=<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params">fliags a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((fliags &amp; MySlags.A)== MySlags.A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第一个方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((fliags &amp; MySlags.A)== MySlags.A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第二个方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    func(MySlags.A|Slags.B)  <span class="comment">//此时可以调用两个方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> ProcessThreadMessagesEnum : <span class="built_in">long</span></span><br><span class="line">&#123;</span><br><span class="line">    Messages = <span class="number">1L</span>,</span><br><span class="line">    MessagesPhysics = <span class="number">2L</span>,</span><br><span class="line">    MessagesAll = <span class="number">3L</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号声明-委托"><a href="#信号声明-委托" class="headerlink" title="信号声明  委托"></a>信号声明  委托</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">ChildEnteredTreeEventHandler</span>(<span class="params">Node node</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public new class PropertyName : GodotObject.PropertyName</span><br><span class="line">    &#123;</span><br><span class="line">        public <span class="type">static</span> readonly StringName _ImportPath = <span class="string">&quot;_import_path&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">class</span> <span class="title">MethodName</span> : <span class="title">GodotObject.MethodName</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 摘要:</span></span><br><span class="line">        <span class="comment">//     Cached name for the &#x27;_enter_tree&#x27; method.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringName _EnterTree = <span class="string">&quot;_enter_tree&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号声明"><a href="#信号声明" class="headerlink" title="信号声明"></a>信号声明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">class</span> <span class="title">SignalName</span> : <span class="title">GodotObject.SignalName</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 摘要:</span></span><br><span class="line">        <span class="comment">//     Cached name for the &#x27;ready&#x27; signal.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringName Ready = <span class="string">&quot;ready&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">long</span> NotificationEnterTree = <span class="number">10L</span>;</span><br></pre></td></tr></table></figure><h2 id="方法字段"><a href="#方法字段" class="headerlink" title="方法字段?"></a>方法字段?</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Type CachedType = <span class="keyword">typeof</span>(Node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringName NativeName = <span class="string">&quot;Node&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">delegate</span>* <span class="keyword">unmanaged</span>&lt;IntPtr&gt; NativeCtor = GodotObject.ClassDB_get_constructor(NativeName);</span><br><span class="line"></span><br><span class="line"> [<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> IntPtr MethodBind0 = GodotObject.ClassDB_get_method_with_compatibility(NativeName, MethodName.PrintOrphanNodes, <span class="number">3218959716u</span>L);</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> IntPtr MethodBind1 = GodotObject.ClassDB_get_method_with_compatibility(NativeName, MethodName.AddSibling, <span class="number">2570952461u</span>L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringName MethodProxyName__enter_tree = <span class="string">&quot;_EnterTree&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringName MethodProxyName__exit_tree = <span class="string">&quot;_ExitTree&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="属性实现"><a href="#属性实现" class="headerlink" title="属性实现"></a>属性实现</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringName Name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetName(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 摘要:</span></span><br><span class="line"><span class="comment">//     Sets this node&#x27;s name as a unique name in its Godot.Node.Owner. This allows the</span></span><br><span class="line"><span class="comment">//     node to be accessed as %Name instead of the full path, from any node within that</span></span><br><span class="line"><span class="comment">//     scene.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     If another node with the same owner already had that name declared as unique,</span></span><br><span class="line"><span class="comment">//     that other node&#x27;s name will no longer be set as having a unique name.</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> UniqueNameInOwner</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> IsUniqueNameInOwner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetUniqueNameInOwner(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件信号"><a href="#事件信号" class="headerlink" title="事件信号"></a>事件信号</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> Action Ready</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">add</span></span><br><span class="line">    &#123;</span><br><span class="line">        Connect(SignalName.Ready, Callable.From(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">remove</span></span><br><span class="line">    &#123;</span><br><span class="line">        Disconnect(SignalName.Ready, Callable.From(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 摘要:</span></span><br><span class="line"><span class="comment">//     Emitted when the node is renamed.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> Action Renamed</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">add</span></span><br><span class="line">    &#123;</span><br><span class="line">        Connect(SignalName.Renamed, Callable.From(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">remove</span></span><br><span class="line">    &#123;</span><br><span class="line">        Disconnect(SignalName.Renamed, Callable.From(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">event</span> ChildEnteredTreeEventHandler ChildEnteredTree</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">add</span></span><br><span class="line">        &#123;</span><br><span class="line">            Connect(SignalName.ChildEnteredTree, Callable.CreateWithUnsafeTrampoline((Delegate)<span class="keyword">value</span>, (<span class="built_in">delegate</span>*&lt;<span class="built_in">object</span>, NativeVariantPtrArgs, <span class="keyword">out</span> godot_variant, <span class="keyword">void</span>&gt;)(&amp;ChildEnteredTreeTrampoline)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">remove</span></span><br><span class="line">        &#123;</span><br><span class="line">            Disconnect(SignalName.ChildEnteredTree, Callable.CreateWithUnsafeTrampoline((Delegate)<span class="keyword">value</span>, (<span class="built_in">delegate</span>*&lt;<span class="built_in">object</span>, NativeVariantPtrArgs, <span class="keyword">out</span> godot_variant, <span class="keyword">void</span>&gt;)(&amp;ChildEnteredTreeTrampoline)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     Emitted when a child node is about to exit the scene tree, either because it</span></span><br><span class="line">    <span class="comment">//     is being removed or freed directly, or because this node is exiting the tree.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     When this signal is received, the child node is still in the tree and valid.</span></span><br><span class="line">    <span class="comment">//     This signal is emitted after the child node&#x27;s own Godot.Node.TreeExiting and</span></span><br><span class="line">    <span class="comment">//     Godot.Node.NotificationExitTree.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">event</span> ChildExitingTreeEventHandler ChildExitingTree</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">add</span></span><br><span class="line">        &#123;</span><br><span class="line">            Connect(SignalName.ChildExitingTree, Callable.CreateWithUnsafeTrampoline((Delegate)<span class="keyword">value</span>, (<span class="built_in">delegate</span>*&lt;<span class="built_in">object</span>, NativeVariantPtrArgs, <span class="keyword">out</span> godot_variant, <span class="keyword">void</span>&gt;)(&amp;ChildExitingTreeTrampoline)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">remove</span></span><br><span class="line">        &#123;</span><br><span class="line">            Disconnect(SignalName.ChildExitingTree, Callable.CreateWithUnsafeTrampoline((Delegate)<span class="keyword">value</span>, (<span class="built_in">delegate</span>*&lt;<span class="built_in">object</span>, NativeVariantPtrArgs, <span class="keyword">out</span> godot_variant, <span class="keyword">void</span>&gt;)(&amp;ChildExitingTreeTrampoline)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">GetNode</span>&lt;<span class="title">T</span>&gt;(<span class="params">NodePath path</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T)(<span class="built_in">object</span>)GetNode(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetNodeOrNull</span>&lt;<span class="title">T</span>&gt;(<span class="params">NodePath path</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetNodeOrNull(path) <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetChild</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">int</span> idx, <span class="built_in">bool</span> includeInternal = <span class="literal">false</span></span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T)(<span class="built_in">object</span>)GetChild(idx, includeInternal);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> _EnterTree()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> _ExitTree()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典初始化"><a href="#字典初始化" class="headerlink" title="字典初始化"></a>字典初始化</h2><h3 id="示例-1：使用构造函数初始化一个空的-Dictionary"><a href="#示例-1：使用构造函数初始化一个空的-Dictionary" class="headerlink" title="示例 1：使用构造函数初始化一个空的 Dictionary"></a>示例 1：使用构造函数初始化一个空的 <code>Dictionary</code></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="示例-2：使用集合初始化器初始化并填充-Dictionary"><a href="#示例-2：使用集合初始化器初始化并填充-Dictionary" class="headerlink" title="示例 2：使用集合初始化器初始化并填充 Dictionary"></a>示例 2：使用集合初始化器初始化并填充 <code>Dictionary</code></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="string">&quot;apple&quot;</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;banana&quot;</span>, <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;cherry&quot;</span>, <span class="number">3</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="示例-3：使用-ToDictionary-扩展方法从集合初始化"><a href="#示例-3：使用-ToDictionary-扩展方法从集合初始化" class="headerlink" title="示例 3：使用 ToDictionary 扩展方法从集合初始化"></a>示例 3：使用 <code>ToDictionary</code> 扩展方法从集合初始化</h3><p>假设你有一个包含键值对的列表或数组，你可以使用 <code>ToDictionary</code> 方法来初始化 <code>Dictionary</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&gt; list = <span class="keyword">new</span> List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Tuple&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> Tuple&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;banana&quot;</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> Tuple&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;cherry&quot;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = list.ToDictionary(entry =&gt; entry.Item1, entry =&gt; entry.Item2);</span><br></pre></td></tr></table></figure><p>或者，如果你有一个匿名类型或具体的类，并且该类具有两个属性可以用作键和值，你也可以这样做。</p><h3 id="示例-4：使用LINQ查询初始化-Dictionary"><a href="#示例-4：使用LINQ查询初始化-Dictionary" class="headerlink" title="示例 4：使用LINQ查询初始化 Dictionary"></a>示例 4：使用LINQ查询初始化 <code>Dictionary</code></h3><p>你可以从其他集合（如列表、数组或数据库查询结果）使用LINQ查询来初始化 <code>Dictionary</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Fruit&gt; fruits = <span class="keyword">new</span> List&lt;Fruit&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Fruit &#123; Name = <span class="string">&quot;apple&quot;</span>, Quantity = <span class="number">1</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Fruit &#123; Name = <span class="string">&quot;banana&quot;</span>, Quantity = <span class="number">2</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Fruit &#123; Name = <span class="string">&quot;cherry&quot;</span>, Quantity = <span class="number">3</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = fruits.ToDictionary(fruit =&gt; fruit.Name, fruit =&gt; fruit.Quantity);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Fruit</code> 是一个简单的类，它有两个属性：<code>Name</code> 和 <code>Quantity</code>。</p><h3 id="示例-5：使用-Dictionary-的-Add-方法填充"><a href="#示例-5：使用-Dictionary-的-Add-方法填充" class="headerlink" title="示例 5：使用 Dictionary 的 Add 方法填充"></a>示例 5：使用 <code>Dictionary</code> 的 <code>Add</code> 方法填充</h3><p>如果你已经有一个空的 <code>Dictionary</code>，你可以使用 <code>Add</code> 方法来逐个添加键值对。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">dictionary.Add(<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>);</span><br><span class="line">dictionary.Add(<span class="string">&quot;banana&quot;</span>, <span class="number">2</span>);</span><br><span class="line">dictionary.Add(<span class="string">&quot;cherry&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>请注意，如果你尝试向 <code>Dictionary</code> 添加一个已经存在的键，它将抛出一个 <code>ArgumentException</code>。在添加之前，你可以使用 <code>ContainsKey</code> 方法来检查键是否已存在。</p><h1 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">MoveAnd</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//普通函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Moves</span>(<span class="params">Vector2 dir</span>)</span> ;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//索引器</span></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//事件</span></span><br><span class="line">    <span class="keyword">event</span> Action&lt;<span class="built_in">int</span>&gt; Move;</span><br><span class="line">    <span class="comment">//带实现方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Bar</span>()</span> =&gt; GD.Print(<span class="string">&quot;打印&quot;</span>);</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddToGroup</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//受保护方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Update</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticeme</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//静态抽象函数方法 C#11</span></span><br><span class="line">    <span class="comment">//static abstract void Func();</span></span><br><span class="line">    <span class="comment">//静态虚函数方法</span></span><br><span class="line">    <span class="comment">//static virtual void func() &#123; GD.Print(&quot;打印&quot;);&#125;</span></span><br><span class="line">    <span class="comment">//委托</span></span><br><span class="line">     <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">int</span> index</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托-函数指针"><a href="#委托-函数指针" class="headerlink" title="委托,函数指针"></a>委托,函数指针</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">int</span> index</span>)</span>;  <span class="comment">//定义委托</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span>(<span class="params"><span class="built_in">int</span> index</span>)              <span class="comment">//函数,参数根委托一致</span></span></span><br><span class="line">&#123;</span><br><span class="line">    GD.print(<span class="string">&quot;执行委托&quot;</span>);          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Action act=<span class="keyword">new</span> Action(Func);     <span class="comment">//调用委托</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">int</span> index</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Game</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action 事件;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 发送事件()</span><br><span class="line">    &#123;</span><br><span class="line">        事件.Invoke(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 链接事件()</span><br><span class="line">    &#123;</span><br><span class="line">        事件+=On函数;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPI</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/cs%E6%88%88%E5%A4%9AAPI/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/cs%E6%88%88%E5%A4%9AAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h1 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h1><ul><li>并发 分配时间</li><li>并行 多核运行 计算量密集</li><li>同步 需要等待</li><li>异步 不需要等待 网络操作</li></ul><table><thead><tr><th>英文名</th><th>中文名</th><th>描述</th></tr></thead><tbody><tr><td>Queue</td><td>队列</td><td></td></tr><tr><td>Stack</td><td>栈</td><td></td></tr><tr><td>Dictionary&lt;TKey, TValue&gt;</td><td>字典</td><td></td></tr><tr><td>List</td><td>动态数组&#x2F;列表</td><td></td></tr><tr><td>array</td><td>普通数组</td><td></td></tr></tbody></table><h3 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h3><ol><li><p><strong>事件队列</strong>：游戏中经常会有各种事件需要按顺序处理，如用户输入、AI行为、动画帧等。这些事件可以被放入一个队列中，然后按照它们被添加的顺序进行处理。</p></li><li><p><strong>渲染队列</strong>：在图形渲染中，对象可能需要按照特定的顺序进行渲染（例如，先渲染背景，再渲染前景）。通过将渲染任务放入队列中，可以确保它们按照正确的顺序执行。</p></li><li><p><strong>音频队列</strong>：在游戏中，可能需要播放多个音频文件，如背景音乐、音效等。通过使用队列，可以确保音频文件按照正确的顺序播放，并且不会出现重叠或混乱。</p></li><li><p><strong>网络消息队列</strong>：在网络游戏中，客户端和服务器之间需要传递大量的消息。这些消息可以被放入队列中，然后按照接收的顺序进行处理。这有助于确保消息的及时处理和同步。</p></li><li><p><strong>AI寻路</strong>：在某些情况下，AI角色可能需要按照特定的顺序访问多个目标点。通过将目标点放入队列中，AI可以依次访问它们，而不会错过或跳过任何一个。</p></li></ol><h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><ol><li><p><strong>撤销&#x2F;重做功能</strong>：许多游戏都提供了撤销或重做玩家操作的功能。这可以通过使用栈来实现。当玩家执行一个操作时，可以将该操作的状态信息压入栈中。如果玩家选择撤销操作，可以从栈中弹出最近的状态信息，并将游戏恢复到该状态。同样地，重做功能可以通过再次将状态信息压入栈中来实现。</p></li><li><p><strong>递归算法</strong>：在游戏开发中，递归算法经常被用于处理复杂的逻辑问题，如树的遍历、图的搜索等。栈是递归算法的重要工具，因为它可以保存函数调用的上下文信息（如局部变量和返回地址），以便在函数返回时能够正确地恢复这些信息。</p></li><li><p><strong>UI导航</strong>：在某些UI界面中，如菜单或对话框，用户可能需要通过一系列层级进行导航。栈可以用于跟踪用户的导航历史，以便在用户点击“返回”按钮时能够返回到上一个层级。</p></li><li><p><strong>动画状态管理</strong>：在游戏中，角色的动画状态可能会根据角色的行为或环境条件而发生变化。通过将不同的动画状态压入栈中，并在需要时弹出它们，可以实现复杂的动画状态管理。</p></li><li><p><strong>内存管理</strong>：在某些情况下，栈也可以用于内存管理。例如，在编写一些需要频繁分配和释放小块内存的代码时，可以使用栈来存储这些内存块，以减少内存碎片和提高内存访问速度。然而，需要注意的是，栈的大小通常是有限的，因此不能用于存储大量数据或长期存储数据。</p></li></ol><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>普通数组,</p></li><li><p>Add</p></li><li><p>AddRange&lt;&gt;</p></li><li><p>Array()</p></li><li><p>Array.Array(Godot.Variant[])</p></li><li><p>Array.Array(System.Collections.Generic.IEnumerable&lt;Godot.Variant&gt;)</p></li><li><p>Array.Array(System.ReadOnlySpan&lt;Godot.GodotObject&gt;)</p></li><li><p>Array.Array(System.Span&lt;Godot.NodePath&gt;)</p></li><li><p>Array.Array(System.Span&lt;Godot.Rid&gt;)</p></li><li><p>Array.Array(System.Span&lt;Godot.StringName&gt;)</p></li><li><p>Array.BinarySearch(Godot.Variant)</p></li><li><p>Array.BinarySearch(int, int, Godot.Variant)</p></li><li><p>Array.Clear()</p></li><li><p>Array.Contains(Godot.Variant)</p></li><li><p>Array.CopyTo(Godot.Variant[], int)</p></li><li><p>Array.Dispose()</p></li><li><p>Array.Dispose(bool)</p></li><li><p>Array.Duplicate(bool)</p></li><li><p>Array.Fill(Godot.Variant)</p></li><li><p>Array.GetEnumerator()</p></li><li><p>Array.GetSliceRange(int, int, int, bool)</p></li><li><p>Array.IndexOf(Godot.Variant)</p></li><li><p>Array.IndexOf(Godot.Variant, int)</p></li><li><p>Array.Insert(int, Godot.Variant)</p></li><li><p>Array.LastIndexOf(Godot.Variant)</p></li><li><p>Array.LastIndexOf(Godot.Variant, int)</p></li><li><p>Array.MakeReadOnly()</p></li><li><p>Array.Max()</p></li><li><p>Array.Min()</p></li><li><p>Array.PickRandom()</p></li><li><p>Array.RecursiveEqual(Godot.Collections.Array)</p></li><li><p>Array.Remove(Godot.Variant)</p></li><li><p>Array.RemoveAt(int)</p></li><li><p>Array.Resize(int)</p></li><li><p>Array.Reverse()</p></li><li><p>Array.Shuffle()</p></li><li><p>Array.Slice(int)</p></li><li><p>Array.Slice(int, int)</p></li><li><p>Array.Sort()</p></li><li><p>Array.ToString()</p></li><li><p>当然，以下是将这些<code>Godot.Collections.Array</code>的方法写为Markdown文件，每个方法使用二级标题（<code>##</code>）的格式：</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Godot.Collections.Array 方法</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Array()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 创建一个新的空数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(Godot.Variant[])</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从<span class="code">`Godot.Variant`</span>数组创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(System.Collections.Generic.IEnumerable<span class="language-xml"><span class="tag">&lt;<span class="name">Godot.Variant</span>&gt;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从实现了<span class="code">`IEnumerable&lt;Godot.Variant&gt;`</span>的集合创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(System.ReadOnlySpan<span class="language-xml"><span class="tag">&lt;<span class="name">Godot.GodotObject</span>&gt;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从<span class="code">`ReadOnlySpan&lt;Godot.GodotObject&gt;`</span>创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(System.Span<span class="language-xml"><span class="tag">&lt;<span class="name">Godot.NodePath</span>&gt;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从<span class="code">`Span&lt;Godot.NodePath&gt;`</span>创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(System.Span<span class="language-xml"><span class="tag">&lt;<span class="name">Godot.Rid</span>&gt;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从<span class="code">`Span&lt;Godot.Rid&gt;`</span>创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Array(System.Span<span class="language-xml"><span class="tag">&lt;<span class="name">Godot.StringName</span>&gt;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从<span class="code">`Span&lt;Godot.StringName&gt;`</span>创建一个新的数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## Add(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 向数组添加一个元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## BinarySearch(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 搜索数组中元素的索引，使用二分查找算法（需要数组已排序）。</span><br><span class="line"></span><br><span class="line"><span class="section">## BinarySearch(int index, int length, Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 在指定范围内搜索数组中元素的索引，使用二分查找算法（需要数组已排序）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Clear()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 清除数组中的所有元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## Contains(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 检查数组中是否包含指定的元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## CopyTo(Godot.Variant[] array, int arrayIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 将数组中的元素复制到另一个<span class="code">`Variant`</span>数组中。</span><br><span class="line"></span><br><span class="line"><span class="section">## Dispose()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 释放数组占用的资源（通常不需要手动调用）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Dispose(bool disposing)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 释放数组占用的资源，并指定是否也释放托管对象（通常不需要手动调用）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Duplicate(bool deep = false)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 复制数组并返回新数组（可选参数决定是否深复制）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Fill(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 使用指定的值填充整个数组。</span><br><span class="line"></span><br><span class="line"><span class="section">## GetEnumerator()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取数组的枚举器，用于遍历数组中的元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## GetSliceRange(int begin, int end, int step = 1, bool deep = false)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取数组的切片（子数组），具有可选的步长和是否包含边界的选项。</span><br><span class="line"></span><br><span class="line"><span class="section">## IndexOf(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取指定元素在数组中的索引。</span><br><span class="line"></span><br><span class="line"><span class="section">## IndexOf(Godot.Variant value, int startIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从指定索引开始搜索元素并返回其索引。</span><br><span class="line"></span><br><span class="line"><span class="section">## Insert(int index, Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 在指定索引处插入一个元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## LastIndexOf(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取指定元素在数组中最后一次出现的索引。</span><br><span class="line"></span><br><span class="line"><span class="section">## LastIndexOf(Godot.Variant value, int startIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从指定索引开始向后搜索元素并返回其最后一次出现的索引。</span><br><span class="line"></span><br><span class="line"><span class="section">## Max()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 返回数组中的最大值。</span><br><span class="line"></span><br><span class="line"><span class="section">## Min()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 返回数组中的最小值。</span><br><span class="line"></span><br><span class="line"><span class="section">## PickRandom()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从数组中随机选择一个元素并返回。</span><br><span class="line"></span><br><span class="line"><span class="section">## RecursiveEqual(Godot.Collections.Array other)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 递归地比较两个数组是否相等（包括子数组和嵌套数组）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Remove(Godot.Variant value)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 从数组中移除指定的元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## RemoveAt(int index)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 移除指定索引处的元素。</span><br><span class="line"></span><br><span class="line"><span class="section">## Resize(int size)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 调整数组的大小。</span><br><span class="line"></span><br><span class="line"><span class="section">## Reverse()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 反转数组中的元素顺序。</span><br><span class="line"></span><br><span class="line"><span class="section">## Shuffle()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 打乱数组中的元素顺序。</span><br><span class="line"></span><br><span class="line"><span class="section">## Slice(int begin)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 返回从指定索引开始的数组的切片（子数组）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Slice(int begin, int end)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 返回从指定开始索引到结束索引（不包含结束索引）的数组的切片（子数组）。</span><br><span class="line"></span><br><span class="line"><span class="section">## Sort()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 对数组中的元素进行排序。</span><br><span class="line"></span><br><span class="line"><span class="section">## ToString()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 将数组转换为字符串表示形式。</span><br><span class="line"></span><br><span class="line"><span class="section">## Count</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取数组的长度（元素数量）。</span><br><span class="line"></span><br><span class="line"><span class="section">## IsEmpty</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 检查数组是否为空（没有元素）。</span><br><span class="line"></span><br><span class="line"><span class="section">## this[int index]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 获取或设置指定索引处的元素值（索引器属性）。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">请注意，一些方法和属性（如<span class="code">`Count`</span>、<span class="code">`IsEmpty`</span>和索引器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS基础配置代码</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CS%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CS%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h1><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GAME_KEY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//方向键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> lift = <span class="string">&quot;ui_left&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> right = <span class="string">&quot;ui_left&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> up = <span class="string">&quot;ui_left&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> down = <span class="string">&quot;ui_left&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标(未配置)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Moue_lift = <span class="string">&quot;ui_lift&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Moue_right = <span class="string">&quot;ui_right&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//26字母(未配置)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_A=<span class="string">&quot;key_a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_B=<span class="string">&quot;key_b&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_C=<span class="string">&quot;key_c&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_D=<span class="string">&quot;key_d&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_E=<span class="string">&quot;key_e&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_F=<span class="string">&quot;key_f&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_G=<span class="string">&quot;key_g&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_H=<span class="string">&quot;key_h&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_I=<span class="string">&quot;key_i&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_J=<span class="string">&quot;key_j&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_K=<span class="string">&quot;key_k&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_L=<span class="string">&quot;key_l&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_M=<span class="string">&quot;key_m&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_N=<span class="string">&quot;key_n&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_O=<span class="string">&quot;key_o&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_P=<span class="string">&quot;key_p&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_Q=<span class="string">&quot;key_q&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_R=<span class="string">&quot;key_r&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_S=<span class="string">&quot;key_s&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_T=<span class="string">&quot;key_t&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_U=<span class="string">&quot;key_u&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_V=<span class="string">&quot;key_v&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_W=<span class="string">&quot;key_w&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_X=<span class="string">&quot;key_s&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_Y=<span class="string">&quot;key_y&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_Z=<span class="string">&quot;key_z&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大键盘数字(未配置)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_0=<span class="string">&quot;key_0&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_1=<span class="string">&quot;key_1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_2=<span class="string">&quot;key_2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_3=<span class="string">&quot;key_3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_4=<span class="string">&quot;key_4&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_5=<span class="string">&quot;key_5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_6=<span class="string">&quot;key_6&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_7=<span class="string">&quot;key_7&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_8=<span class="string">&quot;key_8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> KEY_9=<span class="string">&quot;key_9&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小键盘数字(未配置)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_0=<span class="string">&quot;min_0&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_1=<span class="string">&quot;min_1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_2=<span class="string">&quot;min_2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_3=<span class="string">&quot;min_3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_4=<span class="string">&quot;min_4&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_5=<span class="string">&quot;min_5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_6=<span class="string">&quot;min_6&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_7=<span class="string">&quot;min_7&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_8=<span class="string">&quot;min_8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Min_9=<span class="string">&quot;min_9&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//F键数字(未配置)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_0=<span class="string">&quot;f_0&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_1=<span class="string">&quot;f_1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_2=<span class="string">&quot;f_2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_3=<span class="string">&quot;f_3&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_4=<span class="string">&quot;f_4&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_5=<span class="string">&quot;f_5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_6=<span class="string">&quot;f_6&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_7=<span class="string">&quot;f_7&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_8=<span class="string">&quot;f_8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> F_9=<span class="string">&quot;f_9&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> Ender = <span class="string">&quot;ui_accept&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Space = <span class="string">&quot;ui_select&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Escape = <span class="string">&quot;ui_cancel&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Tab = <span class="string">&quot;ui_focus_next&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> End = <span class="string">&quot;ui_end&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">static</span> <span class="built_in">string</span> Shift_Tab = <span class="string">&quot;ui_focus_prev&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="xlsx和json转换"><a href="#xlsx和json转换" class="headerlink" title="xlsx和json转换"></a>xlsx和json转换</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyJson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 将xlsx文件转换为JSON并创建JSON文件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xlsxpath&quot;&gt;</span>xlsx路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;jsonpath&quot;&gt;</span>json输出路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateJson</span>(<span class="params"><span class="built_in">string</span> xlsxpath,<span class="built_in">string</span> jsonpath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> workbook = <span class="keyword">new</span> XLWorkbook(xlsxpath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> worksheet = workbook.Worksheet(<span class="number">1</span>); <span class="comment">// 假设要读取第一个工作表</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> dataTable = <span class="keyword">new</span> System.Data.DataTable();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从工作表数据填充到DataTable</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> row <span class="keyword">in</span> worksheet.RowsUsed())</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (row.RowNumber() == <span class="number">1</span>) <span class="comment">// 处理表头</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> cell <span class="keyword">in</span> row.CellsUsed())</span><br><span class="line">                    &#123;</span><br><span class="line">                        dataTable.Columns.Add(cell.Value.ToString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">// 处理数据行</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> dataRow = dataTable.NewRow();</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> cell <span class="keyword">in</span> row.CellsUsed())</span><br><span class="line">                    &#123;</span><br><span class="line">                        dataRow[cell.Address.ColumnNumber - <span class="number">1</span>] = cell.Value.ToString();</span><br><span class="line">                    &#125;</span><br><span class="line">                    dataTable.Rows.Add(dataRow);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将DataTable转换为JSON</span></span><br><span class="line">            <span class="built_in">string</span> json = JsonConvert.SerializeObject(dataTable, Formatting.Indented);</span><br><span class="line">            File.WriteAllText(jsonpath, json);</span><br><span class="line">            <span class="comment">// 打印JSON数据</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(json);</span></span><br><span class="line">            GD.Print(json);</span><br><span class="line">            <span class="comment">//备用路径./Json/xxxc.xlsx</span></span><br><span class="line">            <span class="comment">//备用路径./Json/output.json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取JSON"><a href="#读取JSON" class="headerlink" title="读取JSON"></a>读取JSON</h2><ul><li>方法1,这个会将读取到的值映射到对象的属性(需要对象和JSON匹配)</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> json = File.ReadAllText(Directory.GetCurrentDirectory() + <span class="string">&quot;//Json/Player.json&quot;</span>);</span><br><span class="line">主场景 obj = System.Text.Json.JsonSerializer.Deserialize&lt;主场景&gt;(json);</span><br><span class="line">GD.Print(obj);</span><br></pre></td></tr></table></figure><ul><li>方法2:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="built_in">string</span> jsontext = File.ReadAllText(Directory.GetCurrentDirectory() + <span class="string">&quot;//Json/Player.json&quot;</span>);</span><br><span class="line"><span class="keyword">using</span>(JsonDocument doc=JsonDocument.Parse(jsontext))  <span class="comment">//解析JSON数据并将其存储在名为&quot;doc&quot;的JsonDocument对象中。</span></span><br><span class="line">&#123;</span><br><span class="line">    JsonElement root=doc.RootElement;                 <span class="comment">//这行代码从JsonDocument中获取根元素并将其存储在名为“root”的JsonElement对象中</span></span><br><span class="line">    <span class="built_in">string</span>  pro=root.GetProperty(<span class="string">&quot;id&quot;</span>).ToString();    <span class="comment">//在这行中，通过调用 GetProperty 方法从根元素中获取名为“id”的属性，并将其值作为字符串存储在变量“pro”中。</span></span><br><span class="line">    GD.Print(doc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法3:异步读取</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取JSON文件</span></span><br><span class="line"><span class="keyword">using</span> (FileStream fs = File.OpenRead(<span class="string">&quot;path_to_your_json_file&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    YourClass obj = <span class="keyword">await</span> JsonSerializer.DeserializeAsync&lt;YourClass&gt;(fs);</span><br><span class="line">    <span class="comment">// 对读取的数据进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JsonExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 定义一个用于序列化的类</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">                <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 Person 类的实例</span></span><br><span class="line">            Person person = <span class="keyword">new</span> Person</span><br><span class="line">            &#123;</span><br><span class="line">                Name = <span class="string">&quot;John&quot;</span>,</span><br><span class="line">                Age = <span class="number">30</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 person 对象序列化为 JSON</span></span><br><span class="line">            <span class="built_in">string</span> jsonString = JsonSerializer.Serialize(person);</span><br><span class="line">            Console.WriteLine(jsonString);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 JSON 反序列化为对象</span></span><br><span class="line">            <span class="built_in">string</span> json = <span class="string">@&quot;&#123;&quot;&quot;Name&quot;&quot;:&quot;&quot;Alice&quot;&quot;,&quot;&quot;Age&quot;&quot;:25&#125;&quot;</span>;</span><br><span class="line">            Person deserializedPerson = JsonSerializer.Deserialize&lt;Person&gt;(json);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;姓名: <span class="subst">&#123;deserializedPerson.Name&#125;</span>, 年龄: <span class="subst">&#123;deserializedPerson.Age&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><ul><li>格子主题资源</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">BoxFlatResource</span> : <span class="title">StyleBoxFlat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoxFlatResource</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        BgColor=<span class="keyword">new</span> Color(<span class="number">0.756f</span>,<span class="number">0.736f</span>,<span class="number">0.585f</span>,<span class="number">1</span>);  <span class="comment">//背景色</span></span><br><span class="line">        DrawCenter = <span class="literal">true</span>;           <span class="comment">//绘制中心</span></span><br><span class="line">        Skew =<span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">0</span>);     <span class="comment">//偏移</span></span><br><span class="line">        CornerDetail = <span class="number">8</span>;            <span class="comment">//圆角细节</span></span><br><span class="line"></span><br><span class="line">        SetBorderWidthAll(<span class="number">2</span>);       <span class="comment">//边框宽度</span></span><br><span class="line">        BorderBlend = <span class="literal">false</span>;         <span class="comment">//边框混合</span></span><br><span class="line">        BorderColor = <span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);     <span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line">        SetCornerRadiusAll(<span class="number">3</span>);                <span class="comment">//圆角半径</span></span><br><span class="line">        SetExpandMarginAll(<span class="number">10</span>);                <span class="comment">//扩展边距</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ShadowColor = <span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>);     <span class="comment">//阴影颜色</span></span><br><span class="line">        ShadowSize = <span class="number">0</span>;                            <span class="comment">//阴影大小</span></span><br><span class="line">        ShadowOffset=<span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">0</span>);          <span class="comment">//便宜</span></span><br><span class="line"></span><br><span class="line">        AntiAliasing = <span class="literal">true</span>;          <span class="comment">//抗锯齿</span></span><br><span class="line">        AntiAliasingSize = <span class="number">1</span>;         <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">        SetContentMarginAll(<span class="number">8</span>);      <span class="comment">//内容边距</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2D绘制"><a href="#2D绘制" class="headerlink" title="2D绘制"></a>2D绘制</h2><ul><li>居中需要将节点和图片的中心位置算出来,然后用节点的中心减去图片的中心位置,就可以得到图片相对节点居中的位置</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Texture2D imageTexture = ResourceLoader.Load&lt;Texture2D&gt;(<span class="string">&quot;res://icon.svg&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用基类的 _Draw 方法</span></span><br><span class="line">    <span class="keyword">base</span>._Draw();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图片的原始大小</span></span><br><span class="line">    Vector2 textureSize1 = imageTexture.GetSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩放图片</span></span><br><span class="line">    Vector2 textureSize = <span class="keyword">new</span> Vector2(textureSize1.X/<span class="number">2</span>, textureSize1.Y/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前节点的尺寸</span></span><br><span class="line">    Vector2 nodeSize = Size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算图片的中心位置</span></span><br><span class="line">    Vector2 centerPosition = <span class="keyword">new</span> Vector2(nodeSize.X / <span class="number">2</span> - textureSize.X / <span class="number">2</span>, nodeSize.Y / <span class="number">2</span> - textureSize.Y / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义图片的显示区域和大小</span></span><br><span class="line">    Rect2 rect = <span class="keyword">new</span> Rect2(centerPosition, textureSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 draw_texture_rect 方法绘制图片并居中显示</span></span><br><span class="line">    DrawTextureRect(imageTexture, rect, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> font = ThemeDB.FallbackFont;</span><br><span class="line">    <span class="keyword">var</span> font_size = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> text = <span class="string">&quot;99&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Vector2 position = <span class="keyword">new</span> Vector2(<span class="number">45</span>,<span class="number">60</span>);</span><br><span class="line">    DrawString(font, position, text, HorizontalAlignment.Left, <span class="number">-1</span>, font_size);</span><br><span class="line"><span class="keyword">base</span>._Draw();</span><br></pre></td></tr></table></figure><h1 id="第三人称C-控制器"><a href="#第三人称C-控制器" class="headerlink" title="第三人称C#控制器"></a>第三人称C#控制器</h1><ul><li><p>条件</p><ul><li><p>需要2个脚本,一个负责旋转相机,一个负责控制角色,两个脚本的节点虽然互相依赖,不过脚本变量不需要</p></li><li><p>相机节点放在Node3D节点作为自己,通过旋转Node3D节点控制相机朝向,就是说相机始终是朝着Node3D节点看的,当Node3D节点旋转时,相机也相对跟着旋转从而达到一个聚焦在一个点上旋转的目的</p></li><li><p>玩家节点的话需要创建两个方法,一个用于控制玩家的移动,一个用于控制玩家的旋转,控制玩家移动需要获得Node3D节点来计算,而计算过后还用于控制玩家的旋转</p></li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">PlayerCamera</span> : <span class="title">Node3D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> 鼠标输入;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> 鼠标输入旋转;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> 鼠标输入倾斜;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> 灵敏度 = <span class="number">0.25f</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 欧拉旋转;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Export</span>] <span class="keyword">public</span> <span class="built_in">float</span> TiltUpperLimit = Mathf.DegToRad(<span class="number">-60.0f</span>);</span><br><span class="line">    [<span class="meta">Export</span>] <span class="keyword">public</span> <span class="built_in">float</span> TiltLowerLimit = Mathf.DegToRad(<span class="number">60.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Ready()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 开始隐藏鼠标</span></span><br><span class="line">        Input.MouseMode = Input.MouseModeEnum.Captured;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _PhysicsProcess(<span class="built_in">double</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line">        欧拉旋转.X += 鼠标输入倾斜 * (<span class="built_in">float</span>)delta;</span><br><span class="line">        <span class="comment">//欧拉旋转.X = Mathf.Clamp(欧拉旋转.X, TiltLowerLimit, TiltUpperLimit); // 限制倾斜角度</span></span><br><span class="line">        欧拉旋转.Y += 鼠标输入旋转 * (<span class="built_in">float</span>)delta;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的变换矩阵</span></span><br><span class="line">        Transform3D newTransform = <span class="keyword">new</span> Transform3D(Basis.FromEuler(欧拉旋转), Transform.Origin);</span><br><span class="line">        Transform = newTransform;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化鼠标向量</span></span><br><span class="line">        鼠标输入倾斜 = <span class="number">0.0f</span>;</span><br><span class="line">        鼠标输入旋转 = <span class="number">0.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Input(InputEvent @event)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化鼠标输入为 鼠标移动与获取鼠标模式为隐藏锁定鼠标在视口中心</span></span><br><span class="line">        鼠标输入 = @event <span class="keyword">is</span> InputEventMouseMotion &amp;&amp; Input.MouseMode == Input.MouseModeEnum.Captured;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果鼠标输入满足条件 执行以下代码</span></span><br><span class="line">        <span class="keyword">if</span> (鼠标输入 &amp;&amp; @event <span class="keyword">is</span> InputEventMouseMotion aa)</span><br><span class="line">        &#123;</span><br><span class="line">            鼠标输入旋转 = -aa.Relative.X * 灵敏度; <span class="comment">// 鼠标x轴旋转</span></span><br><span class="line">            鼠标输入倾斜 = -aa.Relative.Y * 灵敏度; <span class="comment">// 鼠标y轴旋转</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> 玩家控制器 : <span class="title">CharacterBody3D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Node3D _相机父节点;</span><br><span class="line">    <span class="keyword">public</span> Node3D 活动物体;</span><br><span class="line">    <span class="keyword">public</span> Vector3 旋转向量 = Vector3.Forward;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Export</span>] <span class="keyword">public</span> <span class="built_in">float</span> 跳跃力 = <span class="number">5.0f</span>; <span class="comment">// 跳跃力</span></span><br><span class="line">    [<span class="meta">Export</span>] <span class="keyword">public</span> <span class="built_in">float</span> 移动速度=<span class="number">10</span>;</span><br><span class="line">    [<span class="meta">Export</span>]<span class="keyword">public</span> <span class="built_in">float</span> 旋转速度= <span class="number">10.0f</span>; <span class="comment">// 旋转速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Ready()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取摄像机节点</span></span><br><span class="line">        _相机父节点 = GetNode&lt;Node3D&gt;(<span class="string">&quot;Node3D&quot;</span>);</span><br><span class="line">        活动物体 = GetNode&lt;Node3D&gt;(<span class="string">&quot;机器人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _PhysicsProcess(<span class="built_in">double</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将变量拿出来方便操作</span></span><br><span class="line">        Vector3 velocity = Velocity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the gravity.如果不发生碰撞则计算重力</span></span><br><span class="line">        <span class="keyword">if</span> (!IsOnFloor())</span><br><span class="line">        &#123;</span><br><span class="line">            velocity += GetGravity() * (<span class="built_in">float</span>)delta;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Jump.跳跃</span></span><br><span class="line">        <span class="keyword">if</span> (Input.IsActionJustPressed(<span class="string">&quot;ui_accept&quot;</span>) &amp;&amp; IsOnFloor())</span><br><span class="line">        &#123;</span><br><span class="line">            velocity.Y = <span class="number">4.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取玩家移动方向的向量</span></span><br><span class="line">        Vector3 移动方向 = 角色移动();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果玩家的移动方向长度大于0.2,则更新旋转向量</span></span><br><span class="line">        <span class="keyword">if</span> (移动方向.Length() &gt; <span class="number">0.2f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            旋转向量 = 移动方向.Normalized();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将获得的旋转向量给旋转方法,让角色旋转</span></span><br><span class="line">        角色旋转(旋转向量, (<span class="built_in">float</span>)delta);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取玩家的速度方向并分离Y轴</span></span><br><span class="line">        <span class="built_in">float</span> 速度Y = velocity.Y;</span><br><span class="line">        移动方向.Y = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="comment">//通过插值让玩家移动</span></span><br><span class="line">        velocity = velocity.Lerp(移动方向 * 移动速度, <span class="number">10.0f</span> * (<span class="built_in">float</span>)delta);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果移动方向小于等于0则停止移动</span></span><br><span class="line">        <span class="keyword">if</span> (移动方向.Length() == <span class="number">0.0f</span> &amp;&amp; velocity.Length() &lt; <span class="number">1.0f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Velocity = Vector3.Zero;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重新设置Velocity变量,将Y轴设置为之前的速度</span></span><br><span class="line">        velocity = <span class="keyword">new</span> Vector3(velocity.X, 速度Y, velocity.Z);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Velocity = velocity;</span><br><span class="line">        MoveAndSlide();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> 角色旋转(Vector3 朝向, <span class="built_in">float</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> 左轴 = Vector3.Up.Cross(朝向);</span><br><span class="line">        <span class="keyword">var</span> 基础旋转 = <span class="keyword">new</span> Basis(左轴, Vector3.Up, 朝向).GetRotationQuaternion();</span><br><span class="line">        <span class="keyword">var</span> 角色缩放 = 活动物体.Transform.Basis.Scale;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取活动物体当前的Transform</span></span><br><span class="line">        Transform3D 当前变换 = 活动物体.Transform;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的Basis矩阵并计算赋值</span></span><br><span class="line">        Basis 新基础 = <span class="keyword">new</span> Basis(活动物体.Transform.Basis.GetRotationQuaternion().Slerp(基础旋转, delta * 旋转速度)).Scaled(角色缩放);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新Transform的Basis</span></span><br><span class="line">        当前变换.Basis = 新基础;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用新的Transform,将计算过后获得的旋转方向更新给活动物体,让其旋转</span></span><br><span class="line">        活动物体.Transform = 当前变换;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相机矩阵计算返回</span></span><br><span class="line">    <span class="keyword">private</span> Vector3 角色移动()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定义变量 获取输入向量</span></span><br><span class="line">        Vector2 输入向量 = Input.GetVector(<span class="string">&quot;ui_left&quot;</span>, <span class="string">&quot;ui_right&quot;</span>, <span class="string">&quot;ui_up&quot;</span>, <span class="string">&quot;ui_down&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义向量初始化为0</span></span><br><span class="line">        Vector3 方向 = Vector3.Zero;</span><br><span class="line">        <span class="comment">// 输入向量计算平方根</span></span><br><span class="line">        方向.X = -输入向量.X * Mathf.Sqrt(<span class="number">1.0f</span> - 输入向量.Y * 输入向量.Y / <span class="number">2.0f</span>);</span><br><span class="line">        方向.Z = -输入向量.Y * Mathf.Sqrt(<span class="number">1.0f</span> - 输入向量.X * 输入向量.X / <span class="number">2.0f</span>);</span><br><span class="line">        <span class="comment">// 输入向量等于相机矩阵*输入向量</span></span><br><span class="line">        方向 = _相机父节点.GlobalTransform.Basis * 方向;</span><br><span class="line">        <span class="comment">// 初始化Y轴为0</span></span><br><span class="line">        方向.Y = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">return</span> -方向;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sis * 输入;</span><br><span class="line">        <span class="comment">// 初始化Y轴为0</span></span><br><span class="line">        输入.Y = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">return</span> -输入;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img title="" src="file:///G:/MyWep/source/_posts/图片/2024911-30813.jpg" alt="2024911-30813.jpg" width="647" data-align="center">tle&#x3D;”” alt&#x3D;”2024911-30813.jpg” width&#x3D;”647”&gt;tle&#x3D;”” alt&#x3D;”2024911-30813.jpg” width&#x3D;”647”&gt;tle&#x3D;”” alt&#x3D;”2024911-30813.jpg” width&#x3D;”647”&gt;</p><h1 id="武器篇"><a href="#武器篇" class="headerlink" title="武器篇"></a>武器篇</h1><h2 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h2><h3 id="武器射击模式类的设想"><a href="#武器射击模式类的设想" class="headerlink" title="武器射击模式类的设想"></a>武器射击模式类的设想</h3><h4 id="设想一-通过枚举-即装备组件切换设计状态"><a href="#设想一-通过枚举-即装备组件切换设计状态" class="headerlink" title="设想一:通过枚举,即装备组件切换设计状态"></a>设想一:通过枚举,即装备组件切换设计状态</h4><h4 id="设想二-创建一个部件抽象类-他们有一个抽象向方法-且可以重写-武器调用它的抽象方法-然后用于不同模式-且可以通过部件扩展玩法"><a href="#设想二-创建一个部件抽象类-他们有一个抽象向方法-且可以重写-武器调用它的抽象方法-然后用于不同模式-且可以通过部件扩展玩法" class="headerlink" title="设想二:创建一个部件抽象类,他们有一个抽象向方法,且可以重写,武器调用它的抽象方法,然后用于不同模式,且可以通过部件扩展玩法"></a>设想二:创建一个部件抽象类,他们有一个抽象向方法,且可以重写,武器调用它的抽象方法,然后用于不同模式,且可以通过部件扩展玩法</h4><h3 id="设想三-通过武器赋予子弹方向初始位置并创建子弹发射-子弹是否在途中实现自己的逻辑"><a href="#设想三-通过武器赋予子弹方向初始位置并创建子弹发射-子弹是否在途中实现自己的逻辑" class="headerlink" title="设想三:通过武器赋予子弹方向初始位置并创建子弹发射,子弹是否在途中实现自己的逻辑"></a>设想三:通过武器赋予子弹方向初始位置并创建子弹发射,子弹是否在途中实现自己的逻辑</h3><h2 id="子弹"><a href="#子弹" class="headerlink" title="子弹"></a>子弹</h2><h3 id="子弹位置-方向-旋转"><a href="#子弹位置-方向-旋转" class="headerlink" title="子弹位置,方向,旋转"></a>子弹位置,方向,旋转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">global_position=武器.子弹位置 #开始位置</span><br><span class="line">linear_velocity=-武器.子弹方向*武器.子弹速度 #发射方向及速度 方向=子弹位置-目标位置再归一化</span><br><span class="line"></span><br><span class="line">#重置旋转</span><br><span class="line">var move_direction = 武器.子弹方向</span><br><span class="line">look_at(global_position + move_direction, Vector3.UP)</span><br><span class="line">rotate_object_local(Vector3.RIGHT,deg_to_rad(90))</span><br></pre></td></tr></table></figure><h3 id="子弹1-经过一段距离自动销毁-是否会爆炸-是否穿透敌人"><a href="#子弹1-经过一段距离自动销毁-是否会爆炸-是否穿透敌人" class="headerlink" title="子弹1:经过一段距离自动销毁,是否会爆炸?,是否穿透敌人?"></a>子弹1:经过一段距离自动销毁,是否会爆炸?,是否穿透敌人?</h3><ul><li><pre><code class="language-gdscript">using Godot;using System;public partial class 子弹场景 : MeshInstance3D&#123;    // 定义子弹的速度    private float _速度 = 10.0f;    // 定义最大移动距离    private float _最大移动距离 = 50.0f;    // 记录子弹的初始位置    private Vector3 _初始位置;    public override void _Ready()    &#123;        // 记录子弹的初始位置        _初始位置 = GlobalTransform.Origin;    &#125;    public override void _PhysicsProcess(double delta)    &#123;        Vector3 方向 = GlobalTransform.Basis.Z;        // 移动子弹        Translate(方向 * _速度 * (float)delta);        // 检查子弹与初始位置的距离        if (GlobalTransform.Origin.DistanceTo(_初始位置) &gt; _最大移动距离)        &#123;            // 超过特定距离后销毁子弹            QueueFree();        &#125;    &#125;&#125;#或者    global_position=武器.子弹位置 #开始位置    linear_velocity=-武器.子弹方向*武器.子弹速度 #发射方向及速度    #重置旋转    look_at(global_position - linear_velocity) 位置-速度    rotate_object_local(Vector3.RIGHT,deg_to_rad(90))###查看是否相同<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```gdscript</span><br><span class="line">var current_direction = linear_velocity.normalized()</span><br><span class="line">if not global_position.is_equal_approx(global_position + current_direction):</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="子弹2-碰到墙面会反弹-是否在地面会滚动-相对反弹还是角度反弹"><a href="#子弹2-碰到墙面会反弹-是否在地面会滚动-相对反弹还是角度反弹" class="headerlink" title="子弹2:碰到墙面会反弹,是否在地面会滚动?,相对反弹还是角度反弹?"></a>子弹2:碰到墙面会反弹,是否在地面会滚动?,相对反弹还是角度反弹?</h3><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><h3 id="地雷-放在地上-怪物碰到会爆炸-对敌人照成伤害"><a href="#地雷-放在地上-怪物碰到会爆炸-对敌人照成伤害" class="headerlink" title="地雷:放在地上,怪物碰到会爆炸,对敌人照成伤害"></a>地雷:放在地上,怪物碰到会爆炸,对敌人照成伤害</h3><ul><li>制作思路<code>制作一个地雷类,当怪物碰到时获取敌人信息,并进行减血计算,然后播放爆炸销毁</code></li></ul><h3 id="毒气-当敌人碰撞时-持续对敌人造成伤害"><a href="#毒气-当敌人碰撞时-持续对敌人造成伤害" class="headerlink" title="毒气:当敌人碰撞时,持续对敌人造成伤害"></a>毒气:当敌人碰撞时,持续对敌人造成伤害</h3><ul><li>制作思路<code>当放置后开始计时且记录碰撞到的敌人,让其在一定时间后自动销毁,若时间到了记录的敌人还存在,则关闭粗发检测和显示,并计算伤害,当记录的敌人状态全部消失时则销毁</code></li></ul><h3 id="落穴-当敌人碰撞后-生成一个坑-并将敌人陷进去使其无法继续移动"><a href="#落穴-当敌人碰撞后-生成一个坑-并将敌人陷进去使其无法继续移动" class="headerlink" title="落穴:当敌人碰撞后,生成一个坑,并将敌人陷进去使其无法继续移动"></a>落穴:当敌人碰撞后,生成一个坑,并将敌人陷进去使其无法继续移动</h3><h2 id="道具"><a href="#道具" class="headerlink" title="道具"></a>道具</h2><h3 id="物品类：记录物品的价格数量图标描述属性等"><a href="#物品类：记录物品的价格数量图标描述属性等" class="headerlink" title="物品类：记录物品的价格数量图标描述属性等"></a>物品类：记录物品的价格数量图标描述属性等</h3><h3 id="可拾取道具-拥有物品类的信息-记录了物品类的ID-当被拾取时向物品类发出信息更新物品类-然后销毁。"><a href="#可拾取道具-拥有物品类的信息-记录了物品类的ID-当被拾取时向物品类发出信息更新物品类-然后销毁。" class="headerlink" title="可拾取道具:拥有物品类的信息,记录了物品类的ID,当被拾取时向物品类发出信息更新物品类,然后销毁。"></a>可拾取道具:拥有物品类的信息,记录了物品类的ID,当被拾取时向物品类发出信息更新物品类,然后销毁。</h3><h3 id="可装备道具：数据存储在物品里，当需要装备时从物品获得数据并实例化一个新的物品装备到玩家身上。"><a href="#可装备道具：数据存储在物品里，当需要装备时从物品获得数据并实例化一个新的物品装备到玩家身上。" class="headerlink" title="可装备道具：数据存储在物品里，当需要装备时从物品获得数据并实例化一个新的物品装备到玩家身上。"></a>可装备道具：数据存储在物品里，当需要装备时从物品获得数据并实例化一个新的物品装备到玩家身上。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 游戏算法逻辑</span><br><span class="line"></span><br><span class="line">## 怪物移动向玩家</span><br><span class="line"></span><br><span class="line">```gdscript</span><br><span class="line">var 方向=(玩家全局位置-怪物全局位置).normalized()</span><br><span class="line">怪物.velocity=方向*速度</span><br></pre></td></tr></table></figure><h2 id="获取距离玩家最近的敌人-返回最近敌人节点"><a href="#获取距离玩家最近的敌人-返回最近敌人节点" class="headerlink" title="获取距离玩家最近的敌人,返回最近敌人节点"></a>获取距离玩家最近的敌人,返回最近敌人节点</h2><ul><li>最近</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func 获取所有怪物并返回离玩家最近的怪物(player:CharacterBody3D):</span><br><span class="line">    var 怪物数组 = get_children()</span><br><span class="line">    var nearestEnemy: Node3D = null</span><br><span class="line">    var nearestDistance: float = INF</span><br><span class="line"></span><br><span class="line">    for enemy in 怪物数组:</span><br><span class="line">        if enemy is CharacterBody3D:  # 假设敌人是 CharacterBody3D 类型</span><br><span class="line">            var distance = player.global_position.distance_to(enemy.global_position)</span><br><span class="line">            if distance &lt; nearestDistance:</span><br><span class="line">                nearestDistance = distance</span><br><span class="line">                nearestEnemy = enemy</span><br><span class="line">    return nearestEnemy</span><br></pre></td></tr></table></figure><ul><li>最远</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func 获取所有怪物并返回离玩家最远的怪物(player: CharacterBody3D) -&gt; Node3D:</span><br><span class="line">    var enemyArray = get_children()</span><br><span class="line">    var farthestEnemy: Node3D = null</span><br><span class="line">    var farthestDistance: float = 0.0</span><br><span class="line"></span><br><span class="line">    for enemy in enemyArray:</span><br><span class="line">        if enemy is CharacterBody3D:  # 假设敌人是 CharacterBody3D 类型</span><br><span class="line">            var distance = player.global_position.distance_to(enemy.global_position)</span><br><span class="line">            if distance &gt; farthestDistance:</span><br><span class="line">                farthestDistance = distance</span><br><span class="line">                farthestEnemy = enemy</span><br><span class="line"></span><br><span class="line">    return farthestEnemy</span><br></pre></td></tr></table></figure><h2 id="获取血量最少的敌人-并返回"><a href="#获取血量最少的敌人-并返回" class="headerlink" title="获取血量最少的敌人,并返回"></a>获取血量最少的敌人,并返回</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func 获取所有怪物并返回血量最少的怪物(player: CharacterBody3D) -&gt; Node3D:</span><br><span class="line">    var enemyArray = get_children()</span><br><span class="line">    var lowestHealthEnemy: Node3D = null</span><br><span class="line">    var lowestHealth: float = INF</span><br><span class="line"></span><br><span class="line">    for enemy in enemyArray:</span><br><span class="line">        if enemy is CharacterBody3D:  # 假设敌人是 CharacterBody3D 类型</span><br><span class="line">            var health = enemy.health  # 假设敌人有一个 health 属性</span><br><span class="line">            if health &lt; lowestHealth:</span><br><span class="line">                lowestHealth = health</span><br><span class="line">                lowestHealthEnemy = enemy</span><br><span class="line"></span><br><span class="line">    return lowestHealthEnemy</span><br></pre></td></tr></table></figure><h1 id="GUI-1"><a href="#GUI-1" class="headerlink" title="GUI"></a>GUI</h1><h4 id="游戏设想"><a href="#游戏设想" class="headerlink" title="游戏设想"></a>游戏设想</h4><ul><li><p>我想制作一个通过部件来强化装备赋予装备效果的游戏,比如通过雷达锁定敌人,通过枪管放大子弹,不过我在开发过程中遇到了难题,就是怎么组合这些武器并给玩家装备上呢,我也希望在GUI上能够实时展示玩家组合后的武器样式。</p><ul><li><p>于是我得出了这个思路</p></li><li><p>首先将配件单独作为一个资源类，这个类只是存储图标，模型和一些属性和方法等</p></li><li><p>然后在设计一个类，这个类可以将这些组件和主武器组合起来成为一个新场景，然后赋予玩家使用。</p></li><li><p>我有个疑问，这个场景文件是怎么记录属性的呢</p></li></ul></li></ul><p>拖拽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var 物品:武器基类=武器基类.new()</span><br><span class="line">@export var color = Color(1, 0, 0, 1)</span><br><span class="line">func _get_drag_data(position):</span><br><span class="line">    #使用不在树中的控件</span><br><span class="line">    var cpb = ColorPickerButton.new()</span><br><span class="line">    cpb.color = color</span><br><span class="line">    cpb.size = Vector2(50, 50)</span><br><span class="line">    set_drag_preview(cpb)</span><br><span class="line">    return 物品</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _can_drop_data(position, data):</span><br><span class="line">    # 检查是否为武器基类</span><br><span class="line">    if data is 武器基类:</span><br><span class="line">        return true</span><br><span class="line">    else:</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">#数据处理</span><br><span class="line">func _drop_data(position, data):</span><br><span class="line">     # 处理拖放的数据</span><br><span class="line">    print(&quot;Dropped data: &quot;, data)</span><br></pre></td></tr></table></figure><ul><li>拖拽改良</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">func _get_drag_data(position):</span><br><span class="line">    if 背包.背包[索引ID]:</span><br><span class="line">        var cpb =TextureRect.new()</span><br><span class="line">        cpb.texture=背包.背包[索引ID].icon</span><br><span class="line">        set_drag_preview(cpb)</span><br><span class="line">    return 背包.背包[索引ID]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _can_drop_data(position, data):</span><br><span class="line">    # 检查是否为武器基类</span><br><span class="line">    if data is 雷达基类:</span><br><span class="line">        return true</span><br><span class="line">    else:</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">#数据处理</span><br><span class="line">func _drop_data(position, data):</span><br><span class="line">    if 背包.背包[索引ID]!=null:</span><br><span class="line">        var ite=背包.背包.find(data)</span><br><span class="line">        var temp=背包.背包[索引ID]</span><br><span class="line">        背包.背包[索引ID]=data</span><br><span class="line">        背包.背包[ite]=temp</span><br><span class="line">    else :</span><br><span class="line">        var ite=背包.背包.find(data)</span><br><span class="line">        背包.背包[索引ID]=data</span><br><span class="line">        背包.背包[ite]=null</span><br></pre></td></tr></table></figure><ul><li>装备槽</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">extends PanelContainer</span><br><span class="line"></span><br><span class="line">@onready var texture_rect: TextureRect = $TextureRect</span><br><span class="line">var 背包:装备槽UI</span><br><span class="line">var 装备:雷达基类</span><br><span class="line"># Called when the node enters the scene tree for the first time.</span><br><span class="line">func _ready() -&gt; void:</span><br><span class="line">    背包=get_tree().get_first_node_in_group(&quot;装备槽&quot;)</span><br><span class="line">    pass # Replace with function body.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Called every frame. &#x27;delta&#x27; is the elapsed time since the previous frame.</span><br><span class="line">func _process(delta: float) -&gt; void:</span><br><span class="line">    刷新纹理()</span><br><span class="line"></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _gui_input(event: InputEvent) -&gt; void:</span><br><span class="line">    if Input.is_action_just_pressed(&quot;鼠标左&quot;):</span><br><span class="line">        for i in 背包.背包.size():</span><br><span class="line">            if 背包.背包[i]==null:</span><br><span class="line">                背包.背包[i]=装备</span><br><span class="line">                装备=null</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">func 刷新纹理():</span><br><span class="line">    if 装备!=null:</span><br><span class="line">        texture_rect.texture=装备.icon</span><br><span class="line">    elif 装备==null:</span><br><span class="line">        texture_rect.texture=preload(&quot;res://材质/空纹理.png&quot;)</span><br><span class="line"></span><br><span class="line">#func _get_drag_data(position):</span><br><span class="line">    #if 装备:</span><br><span class="line">        #var cpb =TextureRect.new()</span><br><span class="line">        #cpb.texture=装备.icon</span><br><span class="line">        #set_drag_preview(cpb)</span><br><span class="line">    #return 装备</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _can_drop_data(position, data):</span><br><span class="line">    # 检查是否为武器基类</span><br><span class="line">    if data is 雷达基类:</span><br><span class="line">        return true</span><br><span class="line">    else:</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">#数据处理</span><br><span class="line">func _drop_data(position, data):</span><br><span class="line">    if 装备!=null:</span><br><span class="line">        var ite=背包.背包.find(data)</span><br><span class="line">        var temp=装备</span><br><span class="line">        装备=data</span><br><span class="line">        背包.背包[ite]=temp</span><br><span class="line">        背包.更换雷达.emit(装备)</span><br><span class="line">    else :</span><br><span class="line">        var ite=背包.背包.find(data)</span><br><span class="line">        装备=data</span><br><span class="line">        背包.背包[ite]=null</span><br><span class="line">        背包.更换雷达.emit(装备)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp戈多</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CSGODOT/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/CSharp/CSGODOT/</url>
      
        <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><h2 id="Export-PropertyHint"><a href="#Export-PropertyHint" class="headerlink" title="Export (PropertyHint)"></a>Export (PropertyHint)</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基础声明语法</span></span><br><span class="line">[<span class="meta">Exprot</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> age&#123;<span class="keyword">set</span>;<span class="keyword">get</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制最大最小</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.Range,<span class="string">&quot;0,100,1&quot;</span>)</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">//整值枚举</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.Enum,<span class="string">&quot;A,B&quot;</span>)</span>]        <span class="comment">//输出1,2</span></span><br><span class="line"><span class="comment">//字符串枚举</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.EnumSuggestion ,<span class="string">&quot;A,B&quot;</span>)</span>]    <span class="comment">//输出A,B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//曲线</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.ExpEasing,<span class="string">&quot;positive_only&quot;</span>)</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">//锁 Link</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.Link)</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">//标志flags</span></span><br><span class="line">[<span class="meta">Export(PropertyHint.Flags,<span class="string">&quot;A:16,B,C&quot;</span>)</span>]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册类到godot</span></span><br><span class="line">[<span class="meta">GlobalClass</span>]</span><br><span class="line"><span class="comment">//自定义图标</span></span><br><span class="line">[<span class="meta">Icon(<span class="string">&quot;icon.svg&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><ul><li>File 路径</li><li>Dir dir</li><li>GlobalFile 觉得路径</li><li>ResourceType 资源路径</li><li>MultilineText 大文本编辑器</li><li>Expression 字符是Expression</li></ul><table><thead><tr><th align="center">枚举值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">None</td><td align="center">该属性没有编辑器提示。</td></tr><tr><td align="center">Range</td><td align="center">表示一个整数或浮点数属性应该在指定的范围内，通过提示字符串 “min,max” 或 “min,max,step” 来指定。还可以包括 “or_greater” 和&#x2F;或 “or_less”。</td></tr><tr><td align="center">Enum</td><td align="center">表示一个整数或字符串属性是一个枚举值，可以从提示字符串指定的列表中选择。</td></tr><tr><td align="center">EnumSuggestion</td><td align="center">类似于 Enum，但是属性仍然接受任意值并且可以为空。值列表用于建议可能的取值。</td></tr><tr><td align="center">ExpEasing</td><td align="center">表示一个单精度浮点数属性应该通过指数缓动函数进行编辑。可以包括 “attenuation” 和 “positive_only”。</td></tr><tr><td align="center">Link</td><td align="center">表示一个向量属性应该允许其组件进行链接。</td></tr><tr><td align="center">Flags</td><td align="center">表示一个整数属性是一个具有命名位标志的位掩码。</td></tr><tr><td align="center">Layers2DRender</td><td align="center">表示一个整数属性是使用命名的 2D 渲染层的位掩码。</td></tr><tr><td align="center">Layers2DPhysics</td><td align="center">表示一个整数属性是使用命名的 2D 物理层的位掩码。</td></tr><tr><td align="center">Layers2DNavigation</td><td align="center">表示一个整数属性是使用命名的 2D 导航层的位掩码。</td></tr><tr><td align="center">Layers3DRender</td><td align="center">表示一个整数属性是使用命名的 3D 渲染层的位掩码。</td></tr><tr><td align="center">Layers3DPhysics</td><td align="center">表示一个整数属性是使用命名的 3D 物理层的位掩码。</td></tr><tr><td align="center">Layers3DNavigation</td><td align="center">表示一个整数属性是使用命名的 3D 导航层的位掩码。</td></tr><tr><td align="center">LayersAvoidance</td><td align="center">表示一个整数属性是使用命名的避免层的位掩码。</td></tr><tr><td align="center">File</td><td align="center">表示一个字符串属性是一个文件路径。编辑时会弹出文件对话框。</td></tr><tr><td align="center">Dir</td><td align="center">表示一个字符串属性是一个目录路径。编辑时会弹出目录对话框。</td></tr><tr><td align="center">GlobalFile</td><td align="center">类似于 File，但用于全局路径。</td></tr><tr><td align="center">GlobalDir</td><td align="center">类似于 Dir，但用于全局路径。</td></tr><tr><td align="center">SaveFile</td><td align="center">类似于 File，但用于保存文件的对话框。</td></tr><tr><td align="center">GlobalSaveFile</td><td align="center">类似于 SaveFile，但用于全局路径。</td></tr><tr><td align="center">ResourceType</td><td align="center">表示一个属性是衍生自 Godot.Resource 的类型的实例。</td></tr><tr><td align="center">MultilineText</td><td align="center">表示一个字符串属性是带有换行的文本。</td></tr><tr><td align="center">Expression</td><td align="center">表示一个字符串属性是一个 Godot.Expression。</td></tr><tr><td align="center">PlaceholderText</td><td align="center">表示一个字符串属性的输入字段为空时应显示占位文本。</td></tr><tr><td align="center">ColorNoAlpha</td><td align="center">表示一个 Godot.Color 属性应该在不影响其透明度的情况下进行编辑。</td></tr><tr><td align="center">ObjectId</td><td align="center">表示属性的值是作为对象 ID 编码的对象，其类型在提示字符串中指定。</td></tr><tr><td align="center">TypeString</td><td align="center">表示属性是字符串时，表明该属性代表特定的类型（类）。</td></tr><tr><td align="center">NodePathToEditedNode, ObjectTooBig, NodePathValidTypes, IntIsObjectid, IntIsPointer, ArrayType, LocaleId, LocalizableString, NodeType, HideQuaternionEdit, Password</td><td align="center">这些已经废弃或将在未来删除的提示，具体功能不再使用。</td></tr><tr><td align="center">Max</td><td align="center">表示 PropertyHint 枚举的大小（通常用于内部使用，不是用于实际属性提示）。</td></tr></tbody></table><p>请注意，”Max” 通常不是用于实际属性编辑提示的枚举值，而是可能用于枚举内部的计数或边界检查。在实际使用中，你不会将 “Max” 分配给任何属性的 PropertyHint。</p><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><ul><li>godot内置信号</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Signal</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> 我的信号EventHandler(); <span class="comment">//声明信号</span></span><br><span class="line"></span><br><span class="line">EmitSignal(<span class="keyword">nameof</span>(我的信号));               <span class="comment">//发送信号</span></span><br><span class="line"></span><br><span class="line">我的信号+=函数                               <span class="comment">//链接信号</span></span><br></pre></td></tr></table></figure><ul><li>cs信号实现</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">delegate</span> 委托函数(<span class="built_in">int</span> age);  <span class="comment">//声明委托</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> 委托函数 信号;  <span class="comment">//声明事件</span></span><br><span class="line"></span><br><span class="line">信号.Invoke();  <span class="comment">//发送信号</span></span><br><span class="line"></span><br><span class="line">信号+=函数;     <span class="comment">//链接信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 函数(<span class="built_in">int</span> age);</span><br></pre></td></tr></table></figure><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ul><li>方法计时器</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SomeFunction</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="comment">//func();</span></span><br><span class="line">     GD.Print(<span class="string">&quot;开始计时&quot;</span>);</span><br><span class="line">     <span class="keyword">await</span> ToSignal(GetTree().CreateTimer(<span class="number">5.0f</span>,<span class="literal">true</span>),             SceneTreeTimer.SignalName.Timeout);</span><br><span class="line">     GD.Print(<span class="string">&quot;计时结束&quot;</span>);</span><br><span class="line">     <span class="comment">//无敌=false;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>阻断延时</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Threading.Thread.Sleep(<span class="number">5000</span>); <span class="comment">// 休眠1秒  </span></span><br></pre></td></tr></table></figure><ul><li>异步延时</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">FetchDataFromWebAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;FetchDataFromWebAsync: 启动web请求...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用HttpClient发送HTTP GET请求（这是异步的）  </span></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetAsync(<span class="string">&quot;https://example.com&quot;</span>); <span class="comment">// 假设这个URL返回一个字符串  </span></span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync(); <span class="comment">// 读取响应内容  </span></span><br><span class="line">    <span class="comment">//await Task.Delay(5000);</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;FetchDataFromWebAsync: Web请求完成.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果（这里简单地返回响应内容，实际中可能是解析后的数据）  </span></span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>计时器1</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.Timers.Timer countdownTimer;  </span><br><span class="line"><span class="built_in">int</span> countdownSeconds = <span class="number">1</span>; <span class="comment">// 假设倒计时10秒 </span></span><br><span class="line"></span><br><span class="line">    countdownTimer=<span class="keyword">new</span> System.Timers.Timer(<span class="number">1000</span>);</span><br><span class="line">    countdownTimer.Elapsed+=函数;</span><br><span class="line">    countdownTimer.AutoReset = <span class="literal">true</span>; <span class="comment">// 设置为true以便定时器持续触发  </span></span><br><span class="line">    countdownTimer.Enabled = <span class="literal">true</span>;  <span class="comment">// 启动定时器  </span></span><br></pre></td></tr></table></figure><h2 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h2><ul><li><p>godot-API实现(这只是大概,实际需要自己需求更改)</p><ul><li>读取</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Variant 读取数据(<span class="built_in">string</span> paths)</span><br><span class="line">&#123;</span><br><span class="line">FileAccess dile= FileAccess.Open(paths,FileAccess.ModeFlags.Read);              <span class="comment">//通过路径打开文件,打开文件返回空</span></span><br><span class="line">        <span class="keyword">if</span>(FileAccess.GetOpenError()==Error.Ok)                                     <span class="comment">//检查是否打开文件</span></span><br><span class="line">        &#123;</span><br><span class="line">            GD.Print(<span class="string">&quot;打开成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            GD.Print(<span class="string">&quot;打开失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">string</span> 解析=dile.GetAsText();                                                   <span class="comment">//以String返回整个文件,文件会按照UTF-8编码解析</span></span><br><span class="line">    Variant? 转换=Json.ParseString(解析);                                             <span class="comment">//将解析到的字符串转换为GODOT可以识别的Variant数据</span></span><br><span class="line">    <span class="keyword">if</span>(转换==<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GD.Print(<span class="string">&quot;解析数据失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dile.Close();</span><br><span class="line">    <span class="keyword">return</span> (Variant)转换;         <span class="comment">//将Variant数据返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>写入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> 写入数据(<span class="built_in">string</span> paths,Variant datas)</span><br><span class="line">&#123;</span><br><span class="line">    FileAccess dile= FileAccess.Open(paths,FileAccess.ModeFlags.Write);               <span class="comment">//通过路径打开文件</span></span><br><span class="line">    <span class="built_in">string</span> 转换=Json.Stringify(datas);                                                <span class="comment">//将数据转换为字符串</span></span><br><span class="line">    dile.StoreString(转换);                                                          <span class="comment">//将字符串写入文件</span></span><br><span class="line">    dile.Close();                                                                    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CS-API实现</p><ul><li><p>XLSX转换JSON        库:(ClosedXML),(Newtonsoft )</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> ClosedXML.Excel;</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">duqu</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> workbook = <span class="keyword">new</span> XLWorkbook(<span class="string">&quot;./Json/xxxc.xlsx&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> worksheet = workbook.Worksheet(<span class="number">1</span>); <span class="comment">// 假设要读取第一个工作表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> dataTable = <span class="keyword">new</span> System.Data.DataTable();</span><br><span class="line">        <span class="comment">//bool firstRow = true; // 用来标记是否是第一行</span></span><br><span class="line">        <span class="comment">// 从工作表数据填充到DataTable</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> row <span class="keyword">in</span> worksheet.RowsUsed())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//if (firstRow) // 如果是第一行，跳过并将标记设为false</span></span><br><span class="line">         <span class="comment">//&#123;</span></span><br><span class="line">         <span class="comment">//    firstRow = false;</span></span><br><span class="line">         <span class="comment">//    continue;</span></span><br><span class="line">         <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (row.RowNumber() == <span class="number">1</span>) <span class="comment">// 处理表头</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> cell <span class="keyword">in</span> row.CellsUsed())</span><br><span class="line">                &#123;</span><br><span class="line">                    dataTable.Columns.Add(cell.Value.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 处理数据行</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> dataRow = dataTable.NewRow();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> cell <span class="keyword">in</span> row.CellsUsed())</span><br><span class="line">                &#123;</span><br><span class="line">                    dataRow[cell.Address.ColumnNumber - <span class="number">1</span>] = cell.Value.ToString();</span><br><span class="line">                &#125;</span><br><span class="line">                dataTable.Rows.Add(dataRow);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将DataTable转换为JSON</span></span><br><span class="line">        <span class="built_in">string</span> json = JsonConvert.SerializeObject(dataTable, Formatting.Indented);</span><br><span class="line">        <span class="comment">// string json = JsonSerializer.Serialize(dataTable, new JsonSerializerOptions &#123; WriteIndented = true &#125;);</span></span><br><span class="line">        File.WriteAllText(<span class="string">&quot;./Json/output.json&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印JSON数据</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(json);</span></span><br><span class="line">        GD.Print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><ul><li><p>泛型对象池</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象池泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">OBjiectPool</span>&lt;<span class="title">T</span>&gt; : <span class="title">Node</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Node</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; _pool;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _maxSize;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OBjiectPool</span>(<span class="params"><span class="built_in">int</span> maxSize = <span class="number">100</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _pool = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        _maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果长度不等于0则长度-1返回临时变量</span></span><br><span class="line">        <span class="comment">//创建一个临时对象获取对象所有的对象</span></span><br><span class="line">        <span class="comment">//按所有删除对象</span></span><br><span class="line">        <span class="comment">//返回对象</span></span><br><span class="line">        <span class="keyword">if</span> (_pool.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> lastIndex = _pool.Count - <span class="number">1</span>;</span><br><span class="line">            T obj = _pool[lastIndex];</span><br><span class="line">            _pool.RemoveAt(lastIndex);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//或者对象小于最大对象数量,</span></span><br><span class="line">            <span class="comment">//返回一个对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (_pool.Count &lt; _maxSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//否则报错对象池已满</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Object pool is full&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RetuenObject</span>(<span class="params">T obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _pool.Add(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清空对象化池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearPool</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _pool.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组对象池</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 数组对象池对象池</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPond</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Pood</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">InitPond</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Enemy[] enemies &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Enemy[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">Godot.Collections.Dictionary EnemyValuerArray</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        enemies[<span class="number">0</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">1</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">2</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">3</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">4</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">5</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">6</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">7</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">8</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">        enemies[<span class="number">9</span>] = ActivityObject.CreateObject(EnemyValuerArray) <span class="keyword">as</span> Enemy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将存在的对象都返回</span></span><br><span class="line">    <span class="comment">//遍历数组对象,如果存在就返回,并接收当前运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enemy <span class="title">CreaObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; enemies.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (enemies[i] != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Enemy enemy = enemies[i];</span><br><span class="line">                enemies[i] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//GD.Print(enemies);</span></span><br><span class="line">                enemy.InitPond();</span><br><span class="line">                <span class="keyword">return</span> enemy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将对象收回对象池的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enemy&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Ret</span>(<span class="params">Enemy enemy</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; enemies.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (enemies[i] == <span class="literal">null</span> &amp;&amp; enemy <span class="keyword">is</span> Enemy)</span><br><span class="line">        &#123;</span><br><span class="line">            enemies[i] = enemy;</span><br><span class="line">            <span class="comment">//GD.Print(enemy+&quot;回到对象池&quot;);</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查数组内是否有对象,没有返回false否则为true</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">isObject</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (Enemy i <span class="keyword">in</span> enemies)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家范围内生成 GD.Randf()返回随机浮点</span></span><br><span class="line"><span class="built_in">float</span> x = PlayerP1.Position.X + GD.Randf() * <span class="number">600</span> - <span class="number">10</span>;</span><br><span class="line"><span class="built_in">float</span> y = PlayerP1.Position.Y + GD.Randf() * <span class="number">600</span> - <span class="number">10</span>;</span><br><span class="line">Vector2 pos = <span class="keyword">new</span> Vector2(x, y); <span class="comment">//这个位置就是随机位置的值,给敌人位置即可</span></span><br></pre></td></tr></table></figure><ul><li>返回随机位置</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回随机位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">Get_Vector</span>(<span class="params">Vector3 center, <span class="built_in">float</span> range</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 random_offset =<span class="keyword">new</span> Vector3(</span><br><span class="line">            GetRandomFloat(-range, range),</span><br><span class="line">            GetRandomFloat(-range, range),</span><br><span class="line">            GetRandomFloat(-range, range)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> center + random_offset;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回随机浮点</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">GetRandomFloat</span>(<span class="params"><span class="built_in">float</span> min, <span class="built_in">float</span> max</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">float</span>)(random.NextDouble() * (max - min) + min);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><ul><li>A追踪B</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">Get_Vleor</span>(<span class="params">NodeA,NodeB</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 dir=(NodeA-NodeB).初始化向量();</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="怪物根节点"><a href="#怪物根节点" class="headerlink" title="怪物根节点"></a>怪物根节点</h2><ul><li>怪物的根节点,通过怪物对象生成怪物,他只负责生成,不负责怪物逻辑,他存储了玩家对象,供怪物对象调用</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">EnemyFactory</span> : <span class="title">Node3D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> CharacterBody3D EnemyBody &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 生成位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Vector3 GenerateLocation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 生成范围</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> GenerateScope &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物根节点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Node3D EnemyRoot &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物最大数量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MaxEnemyCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计时器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Timer timer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="keyword">new</span> Timer();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 间隔时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> time &#123;  <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called when the node enters the scene tree for the first time.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _EnterTree()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//GlobalPosition = Get_Vector(GenerateLocation,GenerateScope);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Ready()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//生成计时器并开启</span></span><br><span class="line">        timer.WaitTime = time;</span><br><span class="line">        timer.Autostart = <span class="literal">true</span>;</span><br><span class="line">        timer.Timeout += On_Timer_timeout;</span><br><span class="line">        AddChild(timer);</span><br><span class="line">        <span class="comment">//添加怪物节点的根,怪物将生成在这个节点下</span></span><br><span class="line">        EnemyRoot = <span class="keyword">new</span> Node3D();</span><br><span class="line">        EnemyRoot.Name=<span class="string">&quot;EnemyRoot&quot;</span>;</span><br><span class="line">        AddChild(EnemyRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called every frame. &#x27;delta&#x27; is the elapsed time since the previous frame.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Process(<span class="built_in">double</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">On_Timer_timeout</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (EnemyRoot.GetChildren().Count &gt;= <span class="number">50</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (EnemyBody != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CharacterBody3D EnemyBody1 = (CharacterBody3D)EnemyBody.Duplicate();</span><br><span class="line">            EnemyBody1.Position = Get_Vector(GenerateLocation, GenerateScope);</span><br><span class="line">            EnemyRoot.AddChild(EnemyBody1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回随机位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;center&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;range&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector3 <span class="title">Get_Vector</span>(<span class="params">Vector3 center, <span class="built_in">float</span> range</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 random_offset =<span class="keyword">new</span> Vector3(</span><br><span class="line">            GetRandomFloat(-range, range),</span><br><span class="line">            GetRandomFloat(-range, range),</span><br><span class="line">            GetRandomFloat(-range, range)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> center + random_offset;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回一个随机浮点数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;min&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;max&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">GetRandomFloat</span>(<span class="params"><span class="built_in">float</span> min, <span class="built_in">float</span> max</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">float</span>)(random.NextDouble() * (max - min) + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怪物-快速制作一个怪物追踪玩家的怪物对象"><a href="#怪物-快速制作一个怪物追踪玩家的怪物对象" class="headerlink" title="怪物 快速制作一个怪物追踪玩家的怪物对象"></a>怪物 快速制作一个怪物追踪玩家的怪物对象</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line">[<span class="meta">Tool</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Enemy</span> : <span class="title">CharacterBody3D</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> PackedScene EnemyTscn &#123;  <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Mesh mesh &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> CollisionShape3D shape3D &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Shape3D shape &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Node3D Player &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">float</span> Speed = <span class="number">5.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">float</span> JumpVelocity = <span class="number">4.5f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _EnterTree()</span><br><span class="line">    &#123;</span><br><span class="line">        shape3D = <span class="keyword">new</span> CollisionShape3D();</span><br><span class="line">        <span class="keyword">if</span> (shape3D != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            shape3D.Shape=shape;</span><br><span class="line">            AddChild(shape3D);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if(EnemyTscn != null)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    MeshInstance3D meshInstance = EnemyTscn.Instantiate() as MeshInstance3D;</span></span><br><span class="line">        <span class="comment">//    return;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(mesh != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MeshInstance3D EnemyMesh =<span class="keyword">new</span> MeshInstance3D();</span><br><span class="line">            EnemyMesh.Mesh = mesh;</span><br><span class="line">            AddChild(EnemyMesh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _PhysicsProcess(<span class="built_in">double</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 velocity = Velocity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the gravity.</span></span><br><span class="line">        <span class="keyword">if</span> (!IsOnFloor())</span><br><span class="line">        &#123;</span><br><span class="line">            velocity += GetGravity() * (<span class="built_in">float</span>)delta;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Player != <span class="literal">null</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 dir = (Player.GlobalPosition - GlobalPosition).Normalized();</span><br><span class="line">            velocity = dir * (<span class="built_in">float</span>)delta;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Velocity = velocity;</span><br><span class="line">        MoveAndSlide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h2><ul><li>自动瞄准武器,通过获取怪物对象来调整方向并向怪物发射子弹对象</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Godot;</span><br><span class="line"><span class="keyword">using</span> Godot.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">SelfFiringWeapon</span> : <span class="title">Node3D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Called when the node enters the scene tree for the first time.</span></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> CharacterBody3D Bullet &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> MeshInstance3D Weapon &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Marker3D BulletLocation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Marker3D BulletDirection &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> EnemyFactory EnemyRoot &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Export</span>]</span><br><span class="line">    <span class="keyword">public</span> Timer Timer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Ready()</span><br><span class="line">    &#123;</span><br><span class="line">        Timer.Timeout += ON_TimerTimeout;  <span class="comment">// 绑定超时事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called every frame. &#x27;delta&#x27; is the elapsed time since the previous frame.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> _Process(<span class="built_in">double</span> delta)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CharacterBody3D enemy = GetNearestEnemy(<span class="keyword">this</span>);  <span class="comment">// 获取最近的敌人</span></span><br><span class="line">        <span class="keyword">if</span> (enemy != <span class="literal">null</span>)  <span class="comment">// 如果有敌人</span></span><br><span class="line">        &#123;</span><br><span class="line">            LookAt(enemy.GlobalPosition);  <span class="comment">// 面向敌人</span></span><br><span class="line">            GD.Print(<span class="string">&quot;正在跟踪敌人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ON_TimerTimeout</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CharacterBody3D weapon = Bullet.Duplicate() <span class="keyword">as</span> CharacterBody3D;  <span class="comment">// 获取武器</span></span><br><span class="line">        GetParent().AddChild(weapon);</span><br><span class="line">        weapon.GlobalPosition = BulletLocation.GlobalPosition;  <span class="comment">// 设置武器位置</span></span><br><span class="line"></span><br><span class="line">        Vector3 Dir=(BulletDirection.GlobalPosition-BulletLocation.GlobalPosition).Normalized();  <span class="comment">// 计算武器方向</span></span><br><span class="line">        weapon.Velocity=Dir * <span class="number">10f</span>;  <span class="comment">//  //Dir * 100f;  // 设置武器速度</span></span><br><span class="line">          <span class="comment">// 添加武器到场景</span></span><br><span class="line">        GD.Print(<span class="string">&quot;发射子弹&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterBody3D <span class="title">GetNearestEnemy</span>(<span class="params">Node3D player</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (EnemyRoot != <span class="literal">null</span> &amp;&amp; EnemyRoot.EnemyRoot == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有子节点（怪物）</span></span><br><span class="line">        Array&lt;Node&gt; enemiesArray = EnemyRoot.EnemyRoot.GetChildren();</span><br><span class="line">        Enemy nearestEnemy = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">float</span> nearestDistance = <span class="built_in">float</span>.PositiveInfinity;  <span class="comment">// 使用正无穷大作为初始值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有怪物</span></span><br><span class="line">        <span class="keyword">foreach</span> (Enemy enemy <span class="keyword">in</span> enemiesArray)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (enemy <span class="keyword">is</span> Enemy)  <span class="comment">// 假设敌人是 CharacterBody3D 类型</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 计算与玩家的距离</span></span><br><span class="line">                <span class="built_in">float</span> distance = player.GlobalPosition.DistanceTo(enemy.GlobalPosition);</span><br><span class="line">                <span class="keyword">if</span> (distance &lt; nearestDistance)  <span class="comment">// 找到最近的怪物</span></span><br><span class="line">                &#123;</span><br><span class="line">                    nearestDistance = distance;</span><br><span class="line">                    nearestEnemy = (Enemy)enemy;  <span class="comment">// 更新最近的怪物</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nearestEnemy;  <span class="comment">// 返回最近的怪物</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>戈多社区</title>
      <link href="/2025/03/15/%E6%88%88%E5%A4%9A/%E6%88%88%E5%A4%9A%E7%A4%BE%E5%8C%BA/"/>
      <url>/2025/03/15/%E6%88%88%E5%A4%9A/%E6%88%88%E5%A4%9A%E7%A4%BE%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="社区网站"><a href="#社区网站" class="headerlink" title="社区网站"></a>社区网站</h1><ul><li><p><a href="https://forum.godotengine.org/">Godot 论坛 (godotengine.org)</a></p></li><li><p><img src="G:\MyWep\source_posts\图片\官方社区.jpg" alt="官方社区.jpg"></p><p><a href="https://www.gdquest.com/">GDQuest</a></p></li><li><p><img src="G:\MyWep\source_posts\图片\GodQuest.jpg" alt="GodQuest.jpg"></p></li><li><p><a href="https://stayathomedev.com/">StayAtHomeDev</a></p></li></ul><p><img src="G:\MyWep\source_posts\图片\stayathomedev.jpg" alt="stayathomedev.jpg"></p><ul><li><a href="https://godotshaders.com/">着色器</a></li></ul><p><img src="https://godotshaders.com/wp-content/uploads/2021/01/tinyinty.gif" alt="啊啊"></p>]]></content>
      
      
      <categories>
          
          <category> godot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E6%95%B0%E7%BB%84/"/>
      <url>/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><ul><li>创建空数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明,创建空数组</span></span><br><span class="line">Tarray&lt;int32&gt;Myarray;</span><br></pre></td></tr></table></figure><ul><li>拷贝构造函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用拷贝构造函数可以创建一个现有数组的副本。</span></span><br><span class="line">TArray&lt;<span class="type">int</span>&gt; SourceArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;  </span><br><span class="line"><span class="function">TArray&lt;<span class="type">int</span>&gt; <span class="title">CopyArray</span><span class="params">(SourceArray)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>初始化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以在声明数组时直接初始化它。</span></span><br><span class="line">TArray&lt;<span class="type">int</span>&gt; MyArray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用InPlaceInitQuantity和InPlaceInitValue初始化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以在给定数量的情况下，初始化数组的元素。</span></span><br><span class="line"><span class="comment">//这将创建一个包含三个浮点数的数组，每个元素初始化为1.0。</span></span><br><span class="line"><span class="function">TArray&lt;<span class="type">float</span>&gt; <span class="title">MyArray</span><span class="params">(<span class="number">3</span>, <span class="number">1.0f</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>使用循坏结构初始化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TArray&lt;<span class="type">int</span>&gt; MyArray;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)  </span><br><span class="line">&#123;  </span><br><span class="line">    MyArray.<span class="built_in">Add</span>(i);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用FArrayHelper函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TArray&lt;<span class="type">int</span>&gt; MyArray;  </span><br><span class="line">FArrayHelper::<span class="built_in">Fill</span>(MyArray, <span class="number">10</span>); <span class="comment">// 将数组填充为10个元素，每个元素初始化为默认值（对于整数类型为0）</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TArray</span>&lt;T&gt;();  <span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">TArray</span>&lt;T&gt;(<span class="type">const</span> TArray&lt;T&gt;&amp; Other);  <span class="comment">//拷贝构造函数，用于创建现有数组的副本</span></span><br><span class="line"><span class="built_in">TArray</span>&lt;T&gt;(T InPlaceInitQuantity, <span class="type">const</span> T&amp; InPlaceInitValue);  <span class="comment">//在给定数量的情况下，初始化数组的元素</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>添加</strong></th><th></th></tr></thead><tbody><tr><td><font color=#7B66FF>Add(const T&amp; Item) </font></td><td>向数组的末尾添加一个元素。</td></tr><tr><td>Insert(const T&amp; Item, int Index)</td><td>在指定索引处插入一个元素，并将所有后续元素向后移动一个位置</td></tr><tr><td><strong>删除</strong></td><td></td></tr><tr><td><font color=#5FBDFF>Remove(const T&amp; Item)</font></td><td>从数组中移除第一个匹配的元素</td></tr><tr><td><font color=#5FBDFF>RemoveAt(int Index, int Count &#x3D; 1)</font></td><td>移除数组中指定索引处的元素，可以指定移除的数量</td></tr><tr><td><font color=#E74C3C>Clear()</font>&#x2F; Empty &#x2F;reset</td><td>清空数组，移除所有元素</td></tr><tr><td><strong>读取</strong></td><td></td></tr><tr><td><font color=#96EFFF>operator[] (int Index)</font></td><td>通过索引访问数组中的元素。注意，索引从0开始。</td></tr><tr><td><font color=#96EFFF>Get(int Index)</font></td><td>获取指定索引处的元素。</td></tr><tr><td><font color=#96EFFF>Set(int Index, const T&amp; NewItem)</font></td><td>设置指定索引处的元素为新值。</td></tr><tr><td><strong>检查</strong></td><td></td></tr><tr><td><font color=#F9F9E0>Num()</font></td><td>返回数组中元素的数量。</td></tr><tr><td><font color=#F9F9E0>IsEmpty()</font></td><td>检查数组是否为空。。</td></tr><tr><td><font color=#F9F9E0>IsNumeric()</font></td><td>检查数组是否只包含数字元素。</td></tr><tr><td><strong>排序</strong></td><td></td></tr><tr><td><font color=#FFC0D9>Sort()</font></td><td>对数组进行排序。默认是升序排序。</td></tr><tr><td><font color=#FFC0D9>BinarySearch(const T&amp; Item)</font></td><td>在已排序的数组中执行二分查找，返回元素的索引，如果找不到则返回-1</td></tr><tr><td><strong>缩小</strong></td><td></td></tr><tr><td><font color=#FF90BC>Shrink()</font></td><td>缩小数组的大小以释放未使用的内存。这在创建大型数组后特别有用，可以节省内存并提高性能。</td></tr><tr><td><strong>迭代器</strong></td><td></td></tr><tr><td><font color=#96EFFF>begin()</font></td><td>返回指向数组第一个元素的迭代器。</td></tr><tr><td><font color=#96EFFF>end()</font></td><td>返回指向数组末尾（即，超出最后一个元素）的迭代器。</td></tr><tr><td><strong>其他</strong></td><td></td></tr><tr><td><font color=#FFC0D9>Contains(const T&amp; Item)()</font></td><td>检查数组是否包含特定元素。</td></tr><tr><td><font color=#FFC0D9>RemoveWhere(T Predicate)()</font></td><td>移除满足给定谓词的所有元素。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>属性</title>
      <link href="/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%B1%9E%E6%80%A7/"/>
      <url>/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><blockquote><p>此文档包含了属性与各种数据结构的声明和初始化</p></blockquote><h2 id="基础属性类型"><a href="#基础属性类型" class="headerlink" title="基础属性类型"></a>基础属性类型</h2><table><thead><tr><th align="left">数据类型</th><th>描述</th></tr></thead><tbody><tr><td align="left"><strong>uint64</strong></td><td>64位无符号</td></tr><tr><td align="left"><strong>int64</strong></td><td>64位有符号</td></tr><tr><td align="left"><strong>int32</strong></td><td>32位有符号</td></tr><tr><td align="left"><strong>float</strong></td><td>浮点</td></tr><tr><td align="left"><strong>double</strong></td><td>多精的浮点</td></tr><tr><td align="left"><strong>bool</strong></td><td>布尔:true,false</td></tr><tr><td align="left"><strong>FString</strong></td><td>字符串</td></tr><tr><td align="left"><strong>FName</strong></td><td>字符</td></tr><tr><td align="left"><strong>FText</strong></td><td>文本</td></tr><tr><td align="left"><strong>FVetor</strong></td><td>向量</td></tr><tr><td align="left"><strong>FRotator</strong></td><td>旋转向量</td></tr><tr><td align="left"><strong>FTransform</strong></td><td>位置,旋转,缩放</td></tr><tr><td align="left"><strong>Tarray</strong></td><td>数组</td></tr><tr><td align="left"><strong>TMap</strong></td><td>字典</td></tr><tr><td align="left"><strong>UENUM</strong></td><td>枚举</td></tr><tr><td align="left"><strong>TSubclassOf<AActor></strong></td><td>类引用</td></tr></tbody></table><h3 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h3><table><thead><tr><th>标识</th><th></th></tr></thead><tbody><tr><td>F</td><td>代表结构体(Structure)。这些通常是值类型，用于存储数据，如FRotator用于表示旋转信息，FVector表示三维向量等</td></tr><tr><td>A</td><td>代表Unreal的类（UClass），这些是通过Unreal的反射系统管理的类，通常用于复杂的对象或者需要序列化和编辑器支持的类，例如游戏组件、蓝图类等。</td></tr><tr><td>U</td><td>代表Unreal的类（UClass），这些是通过Unreal的反射系统管理的类，通常用于复杂的对象或者需要序列化和编辑器支持的类，例如游戏组件、蓝图类等。</td></tr><tr><td>UP</td><td>代表一个智能指针（UObject指针的包装器），通常用于管理对UClass实例的引用。</td></tr><tr><td>T</td><td>用于模板类型，如容器类（如TArray, TMap）</td></tr><tr><td>E</td><td>代表枚举类型(Enum)。</td></tr><tr><td>G</td><td>代表全局变量(Global variable)。这类变量在整个程序运行期间都是可访问的，例如GEngine, GWorld等，它们提供对引擎核心组件的访问。</td></tr><tr><td>I</td><td>代表接口(Interface)。接口定义了一组纯虚函数，用于规定类需要实现的行为规范，没有实际的数据成员，例如IInputProcessor。</td></tr><tr><td>S</td><td>虽然不如其他几个前缀常见，但有时用于表示界面相关类（Widget类），特别是与UMG（Unreal Motion Graphics）相关的类，如SButton、STextBlock等。不过，这一规则并不严格，很多UMG相关的类也直接使用U前缀。</td></tr><tr><td>P</td><td>在某些情况下，尤其是与网络或复制相关的代码中，可能会见到P前缀，代表“replicated property”或者是代理属性相关的类或结构，但这个前缀的使用不如上述几个那样广泛或固定。</td></tr><tr><td>FLAT</td><td>用于一些扁平化数据结构的版本，这些通常是为优化存储或传输而设计的，例如FLAT版本的FTransform。</td></tr></tbody></table><h2 id="反射系统"><a href="#反射系统" class="headerlink" title="反射系统"></a>反射系统</h2><ul><li><p>属性声明需要<font color=#FF1493>UPROPERTY</font>宏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常规</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite，Category=<span class="string">&quot;分类A|分类B&quot;</span>)</span><br><span class="line"><span class="type">int</span> 属性;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DisplayName 别名</span></span><br><span class="line">EditAnywhere,BlueprintReadWrite,meta=(DisplayName=<span class="string">&quot;别名&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过布尔控制编辑</span></span><br><span class="line">EditAnywhere,BlueprintReadWrite,meta=(DisplayName=<span class="string">&quot;别名A&quot;</span>)</span><br><span class="line"><span class="type">bool</span> a;</span><br><span class="line">EditAnywhere,BlueprintReadWrite,meta=(EditCondition=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="type">float</span> value3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型实例</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAuraUserWidget&gt;  OverlayWidget;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型引用</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UAuraUserWidget&gt; OverlayWidgetClass;</span><br></pre></td></tr></table></figure></li><li><p>枚举声明,需要在类外边声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举声明1</span></span><br><span class="line"><span class="built_in">UENUM</span>(BlueprintType</span><br><span class="line"><span class="keyword">namespace</span> Myenmeumtype</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Mycusto</span><br><span class="line">    &#123;</span><br><span class="line">        Type1,</span><br><span class="line">        Type2,</span><br><span class="line">        Type3,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UENUM</span>(BlueprintType)</span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">my</span>:uint8</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">on <span class="title">UMEAT</span><span class="params">(DisplayName=<span class="string">&quot;maya&quot;</span>)</span>,</span></span><br><span class="line"><span class="function">    aa <span class="title">UMEAT</span><span class="params">(DisplayName=<span class="string">&quot;aaa&quot;</span>)</span>,</span></span><br><span class="line"><span class="function">    oc <span class="title">UMEAT</span><span class="params">(DisplayName=<span class="string">&quot;bbb&quot;</span>)</span>,</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">EditAnywhere,BlueprintReadWrite,,Category</span>=<span class="string">&quot;my&quot;</span></span><br><span class="line">my aaad</span><br></pre></td></tr></table></figure></li><li><p>结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GAME</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BUCLASS_BODY</span>()  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EditAnywhere,BlueprintReadWrite,,Category=<span class="string">&quot;my&quot;</span></span><br><span class="line">GAME MAYA</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>数据表结构体</p><ul><li><pre><code class="language-cpp">    //数据表结构体UCLASS(blueprintable, BlueprintType)   class TESTGUI_API UFairyItemBase : public UObject   &#123;       GENERATED_BODY()          public:       // 物品数据结构体       UPROPERTY(EditAnywhere, BlueprintReadWrite)       FFairyItemStruct FairyItemStruct;       UPROPERTY(EditAnywhere, BlueprintReadWrite)       UDataTable* ItemName;       // 初始化结构体       UFUNCTION(BlueprintCallable)       virtual void InitItem(const FFairyItemStruct&amp; InFairyItemStruct)       &#123;           FairyItemStruct = InFairyItemStruct;       &#125;       // 从数据表初始化结构体       UFUNCTION(BlueprintCallable)       virtual void DataInitItem(UDataAsset* DataAsset)       &#123;           if (ItemName &amp;&amp; ItemName-&gt;GetRowMap().Num() &gt; 0)           &#123;               FString ContextString;               for (auto&amp; Pair : ItemName-&gt;GetRowMap())               &#123;                   const FFairyItemDataRow* Row = ItemName-&gt;FindRow&lt;FFairyItemDataRow&gt;(Pair.Key, ContextString);                   if (Row)                   &#123;                       FFairyItemStruct ItemStruct;                       ItemStruct.ID = Row-&gt;ID;                       ItemStruct.Quantity = Row-&gt;Quantity;                       ItemStruct.Icon = Row-&gt;Icon;                       ItemStruct.bIsStack = Row-&gt;bIsStack;                       InitItem(ItemStruct);                   &#125;               &#125;           &#125;       &#125;   &#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ 强转换声明</span><br><span class="line"></span><br><span class="line">  ```cpp</span><br><span class="line">  /** type of damage */</span><br><span class="line">  </span><br><span class="line">  UPROPERTY(EditDefaultsOnly, Category=Damage)</span><br><span class="line">  </span><br><span class="line">  TSubclassOf&lt;UDamageType&gt; DamageType;</span><br><span class="line">  </span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h2><h2 id="元数据说明"><a href="#元数据说明" class="headerlink" title="元数据说明"></a>元数据说明</h2><table><thead><tr><th>元数据</th><th>描述</th></tr></thead><tbody><tr><td><font color=#008B8B>EditAnywhere</font></td><td>属性可导入蓝图</td></tr><tr><td><font color=#008B8B>EditAnywhere,BlueprintReadOnly </font></td><td>属性可导入蓝图,不可修改</td></tr><tr><td><font color=#008B8B>EditAnywhere,BlueprintReadWrite</font></td><td>属性可导入蓝图,可修改</td></tr><tr><td><font color=#43CD80>VisibleAnywhere </font></td><td>属性,实例,可见,不可编辑</td></tr><tr><td><font color=#43CD80>VisibleInstanceOnly</font></td><td>仅在实例化可见&#x2F;不可编辑</td></tr><tr><td><font color=#43CD80>VisibleDefaultsOnly </font></td><td>仅在属性可见&#x2F;不可编辑</td></tr><tr><td><font color=#EEB422>EditAnywhere </font></td><td>说明此属性可通过属性窗口在原型和实例上进行编辑&#x2F;可编辑</td></tr><tr><td><font color=#EEB422>EditDefaultsOnly  </font></td><td>仅在属性窗口编辑&#x2F;可编辑</td></tr><tr><td><font color=#EEB422>EditInstanceOnly </font></td><td>仅通过实例化窗口编辑&#x2F;可编辑</td></tr></tbody></table><h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><ul><li><p>打印字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>),*it)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;(UE_LOG-logTemp)    Hello world!&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;玩家:%s, Pawn:%s&quot;</span>), *PlayerController-&gt;<span class="built_in">GetName</span>(), *Pawn-&gt;<span class="built_in">GetName</span>()</span><br><span class="line">       </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, FText::<span class="built_in">FromString</span>(<span class="string">&quot;WWW&quot;</span>));</span><br><span class="line"><span class="comment">//控制台弹框显示</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数转换为文本</span></span><br><span class="line">ItemBoxWidget-&gt;TextBlock-&gt;<span class="built_in">SetText</span>(FText::<span class="built_in">AsNumber</span>(ItemShowStructArray[Index].quantity));</span><br></pre></td></tr></table></figure></li><li><p>打印到屏幕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印至屏幕</span></span><br><span class="line">FString screenMessage = <span class="string">&quot;(AddOnScreenDebugMessage)    Hello world!&quot;</span>;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">1.f</span>, FColor::Green, screenMessage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印至屏幕</span></span><br><span class="line">UKismetSystemLibrary::<span class="built_in">PrintString</span>(<span class="keyword">this</span>, <span class="string">&quot;(UKismetSystemLibrary::PrintString)   Hello world!&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>带变量打印log</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//创建FString 变量 FString::Printf</span></span><br><span class="line">FString playerName = <span class="string">&quot;User&quot;</span>;</span><br><span class="line">int32 healthValue = <span class="number">100</span>;</span><br><span class="line">FString outputMessage1 = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Name is %s, health value is %d&quot;</span>), *playerName, healthValue);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;FStringFormatArg: %s&quot;</span>), *outputMessage1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建FString变量 FString::Format</span></span><br><span class="line">TArray&lt;FStringFormatArg&gt; args;</span><br><span class="line">args.<span class="built_in">Add</span>(<span class="built_in">FStringFormatArg</span>(playerName));</span><br><span class="line">args.<span class="built_in">Add</span>(<span class="built_in">FStringFormatArg</span>(healthValue));</span><br><span class="line"></span><br><span class="line">FString outputMessage2 = FString::<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Name is &#123;0&#125;, health value is  &#123;1&#125;&quot;</span>), args);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;FString::Format: %s&quot;</span>), *outputMessage2);</span><br></pre></td></tr></table></figure></li><li><p>FString</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明FString</span></span><br><span class="line">FString mystring=<span class="built_in">TEXT</span>(<span class="string">&quot;hahaah&quot;</span>);</span><br><span class="line"></span><br><span class="line">FName myname=<span class="built_in">FName</span>(*mystring);      <span class="comment">//字符串转FName</span></span><br><span class="line">FText mytext=FText::<span class="built_in">FromSring</span>(*mystring)  <span class="comment">//字符串转FText</span></span><br></pre></td></tr></table></figure><ul><li>FromName</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystring=myname.<span class="built_in">ToString</span>();   <span class="comment">//myname转String</span></span><br><span class="line">FText text1=FText::<span class="built_in">FromName</span>(myname);  <span class="comment">//FromName转FTtext</span></span><br></pre></td></tr></table></figure><ul><li>strFromText</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FString strFromText=text<span class="number">1.</span><span class="built_in">ToString</span>();   <span class="comment">//strFromText转String     要转FromName可以通过FString转</span></span><br></pre></td></tr></table></figure><h2 id="纯函数-绿色函数"><a href="#纯函数-绿色函数" class="headerlink" title="纯函数(绿色函数)"></a>纯函数(绿色函数)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = <span class="string">&quot;MyFunctions&quot;</span>)</span><br><span class="line"><span class="function">int32 <span class="title">AddTwoIntegers</span><span class="params">(int32 A, int32 B)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>在Unreal Engine 5（UE5）中，绑定和使用委托涉及几个关键步骤。以下是一个详细的指南，包括如何绑定和使用单播委托、多播委托以及动态委托。</p><h3 id="一、单播委托的绑定和使用"><a href="#一、单播委托的绑定和使用" class="headerlink" title="一、单播委托的绑定和使用"></a>一、单播委托的绑定和使用</h3><ol><li><p><strong>声明委托</strong></p><p>首先，在头文件中声明一个单播委托类型，并在类中声明一个该类型的委托变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DECLARE_DELEGATE</span>(MySinglecastDelegate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MySinglecastDelegate MyDelegate;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>绑定回调</strong></p><p>在需要绑定回调的地方，使用<code>Bind</code>方法（对于UObject子类成员函数使用<code>BindUObject</code>，静态函数使用<code>BindStatic</code>，Lambda表达式使用<code>BindLambda</code>等）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass myObject;</span><br><span class="line">myObject.MyDelegate.<span class="built_in">BindUObject</span>(&amp;myObject, &amp;MyClass::MyFunction);</span><br></pre></td></tr></table></figure><p>或者，对于静态函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyDelegate.<span class="built_in">BindStatic</span>(&amp;MyStaticFunction);</span><br></pre></td></tr></table></figure><p>对于Lambda表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyDelegate.<span class="built_in">BindLambda</span>([]()&#123; <span class="comment">/* Your code here */</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>执行委托</strong></p><p>当需要执行委托时，调用<code>Execute</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyDelegate.<span class="built_in">Execute</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、多播委托的绑定和使用"><a href="#二、多播委托的绑定和使用" class="headerlink" title="二、多播委托的绑定和使用"></a>二、多播委托的绑定和使用</h3><ol><li><p><strong>声明多播委托</strong></p><p>与单播委托类似，首先声明一个多播委托类型，并在类中声明一个该类型的委托变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DECLARE_MULTICAST_DELEGATE</span>(MyMulticastDelegate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyMulticastDelegate MyMulticastDelegateVar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加回调</strong></p><p>使用<code>Add</code>方法（对于UObject子类成员函数使用<code>AddUObject</code>，Lambda表达式使用<code>AddLambda</code>等）来添加多个回调。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyClass myObject;</span><br><span class="line">myObject.MyMulticastDelegateVar.<span class="built_in">AddUObject</span>(&amp;myObject, &amp;MyClass::MyFunction1);</span><br><span class="line">myObject.MyMulticastDelegateVar.<span class="built_in">AddUObject</span>(&amp;myObject, &amp;MyClass::MyFunction2);</span><br></pre></td></tr></table></figure><p>或者，对于Lambda表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyMulticastDelegateVar.<span class="built_in">AddLambda</span>([]()&#123; <span class="comment">/* Your code here */</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>广播委托</strong></p><p>当需要执行多播委托时，调用<code>Broadcast</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyMulticastDelegateVar.<span class="built_in">Broadcast</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、动态委托的绑定和使用"><a href="#三、动态委托的绑定和使用" class="headerlink" title="三、动态委托的绑定和使用"></a>三、动态委托的绑定和使用</h3><ol><li><p><strong>声明动态委托</strong></p><p>动态委托需要使用<code>UDELEGATE</code>或<code>UMULTICAST_DELEGATE</code>宏，并在类中声明一个<code>UPROPERTY(BlueprintAssignable)</code>属性的委托变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE</span>(<span class="type">void</span>, MyDynamicDelegate, int32, <span class="type">float</span>);</span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">    MyDynamicDelegate MyDynamicDelegateVar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>绑定回调</strong></p><p>在C++中，动态委托的绑定方式与单播委托类似，但需要使用<code>BindDynamic</code>方法（对于UObject子类成员函数）。在蓝图中，可以直接通过节点来绑定和解绑回调。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass myObject;</span><br><span class="line">myObject.MyDynamicDelegateVar.<span class="built_in">BindDynamic</span>(&amp;myObject, &amp;MyClass::MyDynamicFunction);</span><br></pre></td></tr></table></figure><p>在蓝图中，找到对应的委托变量，并使用“绑定事件”节点来绑定回调。</p></li><li><p><strong>执行或广播委托</strong></p><p>动态单播委托使用<code>Execute</code>方法，动态多播委托使用<code>Broadcast</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyDynamicDelegateVar.<span class="built_in">Execute</span>();</span><br></pre></td></tr></table></figure><p>或者（对于多播委托）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.MyDynamicMulticastDelegateVar.<span class="built_in">Broadcast</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保委托在绑定和执行时都是有效的，避免在对象销毁后还尝试执行委托。</li><li>对于动态委托，特别是与蓝图交互时，要确保回调函数是安全的，并且不会导致内存泄漏或访问违规。</li><li>委托的声明和使用通常与UObject子类相关联，因为委托的生命周期管理通常与UObject的生命周期管理相结合。</li></ul><p>通过以上步骤，你可以在UE5中有效地绑定和使用委托来实现事件驱动编程和回调机制。</p><p>E5中的委托提供了多种绑定方式，以满足不同的需求：</p><ol><li><strong>BindUObject</strong>：用于绑定UObject子类的成员函数。</li><li><strong>BindStatic</strong>：用于绑定静态函数或全局函数。</li><li><strong>BindLambda</strong>：用于绑定Lambda表达式，提供匿名函数的绑定方式。</li><li><strong>BindDynamic</strong>（仅适用于动态委托）：用于绑定使用UFUNCTION()修饰的成员函数。</li></ol><p>此外，对于多播委托，还提供了AddUObject、AddStatic、AddLambda等添加回调的方式。</p><p>在UE5中，动态委托（Dynamic Delegate和Dynamic Multicast Delegate）特别适用于与蓝图的交互。为了在蓝图中能够绑定和解绑回调函数，这些动态委托必须使用UFUNCTION()修饰，并且需要在声明时指定参数名称。这进一步增加了绑定方式的多样性。</p><ol><li>定义</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyCustomEvent.h</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE</span>(FMyCustomEvent);  <span class="comment">//定义委托</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YOURGAME_API</span> AYourActor : <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义一个事件，使用之前声明的委托类型</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">    FMyCustomEvent OnMyCustomEvent;        <span class="comment">//定义事件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>发送事件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourActor::TriggerMyCustomEvent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 确保事件代理不为空，然后广播事件</span></span><br><span class="line">    <span class="keyword">if</span> (OnMyCustomEvent.<span class="built_in">IsBound</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        OnMyCustomEvent.<span class="built_in">Broadcast</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>绑定和接收</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnotherClass.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAnotherClass::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">    AYourActor* yourActor = <span class="built_in">Cast</span>&lt;AYourActor&gt;(UGameplayStatics::<span class="built_in">GetActorOfClass</span>(<span class="keyword">this</span>, AYourActor::<span class="built_in">StaticClass</span>()));</span><br><span class="line">    <span class="keyword">if</span> (yourActor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//绑定</span></span><br><span class="line">        yourActor-&gt;OnMyCustomEvent.<span class="built_in">AddDynamic</span>(<span class="keyword">this</span>, &amp;AAnotherClass::OnMyCustomEventReceived);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAnotherClass::OnMyCustomEventReceived</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Custom event received!&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托宏"><a href="#委托宏" class="headerlink" title="委托宏"></a>委托宏</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE：无参数的多播委托。</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam：一个参数的多播委托。</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams：两个参数的多播委托。</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_SixParams</span><br></pre></td></tr></table></figure><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><ul><li><p>位置ActorLocation(FVector)</p></li><li><p>旋转ActorRotation(FRotator)</p></li><li><p>大小ActorScale3D(FVector)</p></li></ul><h1 id="CPP类"><a href="#CPP类" class="headerlink" title="CPP类"></a>CPP类</h1><p>虚幻引擎中有许多常用的父类，它们提供了各种功能，用于创建游戏对象、处理输入、管理游戏状态等。以下是一些常用的虚幻引擎父类：</p><p>AActor（Actor类）：表示在虚拟场景中的一个对象。所有在游戏中出现的物体都是Actor的子类，包括玩家角色、道具、敌人等。</p><p>UObject：是所有虚幻对象的基类。几乎所有的虚幻引擎类都是UObject或其子类。</p><p>UActorComponent：表示可以被附加到Actor上的组件，用于添加额外的功能或属性。例如，MeshComponent用于处理渲染，AudioComponent用于处理声音等。</p><p>UGameInstance：在整个游戏实例中保持持久性数据和状态的类，通常用于保存全局性的信息。</p><p>UUserWidget：用于创建用户界面的基类，通过蓝图和代码可以创建各种界面元素。</p><p>UInputComponent：用于处理输入的组件，可以附加到Actor或Pawn上，用于响应玩家的键盘、鼠标或手柄输入。</p><p>UGameplayStatics：提供了在游戏中执行各种通用操作的静态类，包括生成粒子效果、播放声音等。</p><p>AGameSession：处理游戏会话的类，用于管理玩家连接、处理会话状态等。</p><p>APlayerController：控制玩家输入和视图，处理与玩家直接互动的逻辑。</p><p>APlayerState：表示玩家的状态，包括分数、生命等信息。</p><p>这只是虚幻引擎中一小部分常用父类的示例。根据游戏的需求，还有许多其他的父类可供使用。开发者通常会根据具体情况选择合适的父类来构建游戏对象和逻辑。<br>————————————————</p><p>在Unreal Engine 5（UE5）中，C++作为主要的编程语言之一，提供了大量的类和API用于游戏开发。这些类和API涵盖了游戏对象管理、渲染、物理、输入、音频、网络等多个方面。以下是一些UE5 C++中常用的类和API的概述：</p><h3 id="1-核心基类"><a href="#1-核心基类" class="headerlink" title="1. 核心基类"></a>1. 核心基类</h3><ul><li><strong>UObject</strong>：所有虚幻引擎类的基类，提供了对象序列化、垃圾回收、依赖跟踪等功能。几乎所有的UE5类都是UObject或其子类。</li><li><strong>AActor</strong>：表示游戏世界中的一个对象，如角色、道具、环境物体等。AActor提供了位置、旋转、缩放等属性，以及碰撞检测、事件处理等机制。</li><li><strong>UActorComponent</strong>：可以附加到AActor上的组件，用于添加额外的功能或属性。例如，MeshComponent用于处理渲染，AudioComponent用于处理声音等。</li></ul><h3 id="2-场景管理"><a href="#2-场景管理" class="headerlink" title="2. 场景管理"></a>2. 场景管理</h3><ul><li><strong>AGameModeBase</strong>：定义了游戏的规则和流程，包括游戏开始、结束等逻辑。</li><li><strong>APlayerController</strong>：控制玩家输入和视图，处理与玩家直接互动的逻辑。</li><li><strong>APlayerState</strong>：表示玩家的状态，包括分数、生命等信息。</li></ul><h3 id="3-渲染和材质"><a href="#3-渲染和材质" class="headerlink" title="3. 渲染和材质"></a>3. 渲染和材质</h3><ul><li><strong>UMaterial</strong>、<strong>UMaterialInstance</strong>：用于定义和实例化材质，控制物体的外观。</li><li><strong>USceneComponent</strong>、<strong>UMeshComponent</strong>：用于处理场景中的组件和网格体的渲染。</li><li><strong>UStaticMesh</strong>：静态网格体，用于表示不会移动的物体，如建筑、地形等。</li></ul><h3 id="4-物理和碰撞"><a href="#4-物理和碰撞" class="headerlink" title="4. 物理和碰撞"></a>4. 物理和碰撞</h3><ul><li><strong>UPhysicsBody</strong>、<strong>UPhysicsConstraintComponent</strong>：用于处理物理模拟和约束。</li><li><strong>UCollisionComponent</strong>：用于碰撞检测和处理。</li></ul><h3 id="5-输入和UI"><a href="#5-输入和UI" class="headerlink" title="5. 输入和UI"></a>5. 输入和UI</h3><ul><li><strong>UInputComponent</strong>：用于处理输入的组件，可以附加到Actor或Pawn上，用于响应玩家的键盘、鼠标或手柄输入。</li><li><strong>UUserWidget</strong>：用于创建用户界面的基类，通过蓝图和代码可以创建各种界面元素。</li></ul><h3 id="6-网络和多人游戏"><a href="#6-网络和多人游戏" class="headerlink" title="6. 网络和多人游戏"></a>6. 网络和多人游戏</h3><ul><li><strong>ANetDriver</strong>、<strong>AConnection</strong>：用于处理网络通信的类。</li><li><strong>AController</strong>、<strong>APawn</strong>：在多人游戏中，用于表示玩家控制的角色和物体。</li></ul><h3 id="7-数据管理和序列化"><a href="#7-数据管理和序列化" class="headerlink" title="7. 数据管理和序列化"></a>7. 数据管理和序列化</h3><ul><li><strong>FString</strong>、<strong>TArray</strong>、<strong>TMap</strong>：UE5中常用的字符串、数组和映射类型，用于数据存储和序列化。</li><li><strong>FSerializer</strong>、<strong>FArchive</strong>：用于自定义序列化和反序列化过程。</li></ul><h3 id="8-其他常用API"><a href="#8-其他常用API" class="headerlink" title="8. 其他常用API"></a>8. 其他常用API</h3><ul><li><strong>GConfig</strong>：用于访问和修改配置文件中的设置。</li><li><strong>FJsonWriter</strong>、<strong>FJsonReader</strong>：用于JSON数据的序列化和反序列化。</li><li><strong>FDateTime</strong>、<strong>FTimespan</strong>：用于处理时间和日期。</li></ul><p>请注意，以上只是UE5 C++中常用类和API的一个概览，实际上UE5提供了更为丰富和复杂的API体系。为了更有效地使用这些API，建议深入阅读UE5的官方文档，并结合实际项目进行实践。此外，随着UE5的不断更新和发展，新的类和API也会不断出现，因此保持对UE5最新动态的关注也是非常重要的。</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><table><thead><tr><th>智能指针类型</th><th>适用情形</th></tr></thead><tbody><tr><td><strong><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/shared-pointers-in-unreal-engine">共享指针</a></strong>（<code>TSharedPtr</code>）</td><td>共享指针拥有其引用的对象，无限防止该对象被删除，并在无共享指针或共享引用（见下文）引用其时，最终处理其的删除。共享指针可为空白，意味其不引用任何对象。任何非空共享指针都可对其引用的对象生成共享引用。</td></tr><tr><td><strong><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/shared-references-in-unreal-engine">共享引用</a></strong>（<code>TSharedRef</code>）</td><td>共享引用的行为与共享指针类似，即其拥有自身引用的对象。对于空对象而言，其存在不同；共享引用须固定引用非空对象。共享指针无此类限制，因此共享引用可固定转换为共享指针，且该共享指针固定引用有效对象。要确认引用的对象是非空，或者要表明共享对象所有权时，请使用共享引用。</td></tr><tr><td><strong><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/weak-pointers-in-unreal-engine">弱指针</a></strong>（TWeakPtr<code>TSharedPtr</code>）</td><td>弱指针类与共享指针类似，但不拥有其引用的对象，因此不影响其生命周期。此属性中断引用循环，因此十分有用，但也意味弱指针可在无预警的情况下随时变为空。因此，弱指针可生成指向其引用对象的共享指针，确保程序员能对该对象进行安全临时访问。</td></tr><tr><td><strong>唯一指针</strong>（<code>TUniquePtr</code>）</td><td>唯一指针仅会显式拥有其引用的对象。仅有一个唯一指针指向给定资源，因此唯一指针可转移所有权，但无法共享。复制唯一指针的任何尝试都将导致编译错误。唯一指针超出范围时，其将自动删除其所引用的对象。</td></tr></tbody></table><table><thead><tr><th><a href="https://dev.epicgames.com/documentation/404"><code>NewObject</code></a></th><th>使用所有可用创建选项的可选参数创建一个新实例。提供极高的灵活性，包括带自动生成命名的简单使用案例。</th></tr></thead><tbody><tr><td><code>CreateDefaultSubobject&lt;class&gt;</code></td><td></td></tr></tbody></table><h2 id="创建对象-不应该直接使用NEW"><a href="#创建对象-不应该直接使用NEW" class="headerlink" title="创建对象,不应该直接使用NEW"></a>创建对象,不应该直接使用NEW</h2><table><thead><tr><th><a href="https://dev.epicgames.com/documentation/404"><code>NewObject</code></a></th><th>使用所有可用创建选项的可选参数创建一个新实例。提供极高的灵活性，包括带自动生成命名的简单使用案例。</th></tr></thead><tbody><tr><td><code>CreateDefaultSubobject&lt;class&gt;</code></td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MYPROJECT_API UMyObject : public UObject</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>IsValid()</code> 用于检查它是 null 还是垃圾，但是大部分情况下 IsValid 可以被更正规的编程规则替换，比如在调用 <code>OnDestroy</code> 事件时将指针清除至 Actor。</li><li>如果禁用了 <code>PendingKill()</code>， <code>MarkGarbage()</code> 将会提醒对象的所有者该对象将要被销毁，但是对象本身直到所有对它的引用都解除之后才会被垃圾回收。</li><li>对于 Actor，即使 Actor 被调用了 <code>Destroy()</code>，并且被从关卡中移除，它还是会等到所有对它的引用都解除之后才会被垃圾回收。</li><li>对于证书持有者的主要区别在于，对花费较大的对象进行垃圾回收的函数 <code>MarkPendingKill()</code> 不再起效。</li><li>已有的用于 nullptr 的检查应该被 <code>IsValid()</code> 调用所替代，除非你进行手动清除，因为指针不再会被垃圾回收器通过 <code>MarkPendingKill()</code> 自动清除。</li></ul><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><ul><li>变量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">static</span> int32 testDebugWeaponDrawing = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> FAutoConsoleVariableRef <span class="title">CVARDebugWeaponDrawing</span><span class="params">(TEXT(<span class="string">&quot;COOP.DebugWeapons&quot;</span>),<span class="comment">//控制台输入 COOP.DebugWeapons 数字 设置DebugWeaponDrawing值</span></span></span></span><br><span class="line"><span class="params"><span class="function">  testDebugWeaponDrawing, <span class="comment">//控制台变量</span></span></span></span><br><span class="line"><span class="params"><span class="function">  TEXT(<span class="string">&quot;Draw Debug Lines for Weapons&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  ECVF_Cheat)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>委托</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">aShowQualityDebugWidget</span><span class="params">(<span class="type">const</span> TArray&lt;FString&gt;&amp; Args, UWorld* World)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(World)</span><br><span class="line">&#123;</span><br><span class="line">APlayerController* PlayerController = World-&gt;<span class="built_in">GetFirstPlayerController</span>();</span><br><span class="line"><span class="keyword">if</span>(PlayerController)</span><br><span class="line">&#123;</span><br><span class="line">ATestPlayerCharacter* PlayerCharacter = <span class="built_in">Cast</span>&lt;ATestPlayerCharacter&gt;(PlayerController-&gt;<span class="built_in">GetPawn</span>());</span><br><span class="line"><span class="keyword">if</span> (PlayerCharacter)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Player Character Found: %d&quot;</span>), Args.<span class="built_in">Num</span>());</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Player Character Found: %s&quot;</span>), *PlayerCharacter-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">ATestPlayerController*cont=<span class="built_in">Cast</span>&lt;ATestPlayerController&gt;(PlayerCharacter-&gt;<span class="built_in">GetController</span>());</span><br><span class="line">cont-&gt;OnTestCustomEvent.<span class="built_in">Broadcast</span>(<span class="built_in">LexToString</span>(Args[<span class="number">0</span>]), FCString::<span class="built_in">Atoi64</span>(*Args[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Player Character Not Found&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Player Controller Not Found&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;World is null&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台绑定委托</span></span><br><span class="line"><span class="function"><span class="type">static</span> FAutoConsoleCommandWithWorldAndArgs <span class="title">ShowQualityDebugWidgetCmd</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">TEXT(<span class="string">&quot;ShowQualityDebugWidget&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">TEXT(<span class="string">&quot;Show Quality Debug Tool Widget : \&quot;ShowQualityDebugWidget true or ShowQualityWidget false\&quot;&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">FConsoleCommandWithWorldAndArgsDelegate::CreateStatic(aShowQualityDebugWidget))</span></span>;</span><br></pre></td></tr></table></figure><h1 id="游戏系统"><a href="#游戏系统" class="headerlink" title="游戏系统"></a>游戏系统</h1><ul><li><p>ARPG（动作角色扮演游戏）结合了角色扮演游戏（RPG）的元素和动作游戏的实时战斗机制。一款完整的ARPG游戏通常包含以下系统：</p><ol><li><p><strong>角色系统</strong>：</p><ul><li><strong>角色创建与管理</strong>：包括玩家角色的创建、属性管理（如生命值、攻击力、防御力等）和状态管理（如站立、移动、攻击、死亡等）。</li><li><strong>角色成长</strong>：通常包含角色养成和技能升级系统，玩家可以通过完成任务、击败敌人等方式获取经验值，提升角色等级和技能。</li></ul></li><li><p><strong>战斗系统</strong>：</p><ul><li><strong>实时战斗机制</strong>：玩家需要进行实时的战斗操作，包括移动、攻击、释放技能等。</li><li><strong>攻击判定与伤害计算</strong>：系统需要能够准确判定攻击是否命中，并计算相应的伤害值。</li><li><strong>技能系统</strong>：玩家可以学习和使用各种技能，这些技能通常具有不同的效果和伤害值。</li></ul></li><li><p><strong>地图与探索系统</strong>：</p><ul><li><strong>地图加载与场景管理</strong>：游戏需要能够加载不同的地图场景，并根据玩家的位置进行切换。</li><li><strong>探索与冒险</strong>：玩家可以在游戏世界中进行自由探索，发现隐藏的任务、宝藏和敌人。</li></ul></li><li><p><strong>任务与剧情系统</strong>：</p><ul><li><strong>任务系统</strong>：游戏通常包含各种任务，包括主线任务、支线任务和日常任务等。这些任务可以引导玩家进行游戏，并提供丰富的游戏体验。</li><li><strong>剧情系统</strong>：游戏通常有完整的故事情节，通过剧情动画、对话和任务等方式展现给玩家。</li></ul></li><li><p><strong>物品与装备系统</strong>：</p><ul><li><strong>物品管理</strong>：游戏需要能够管理各种物品，包括装备、消耗品和任务物品等。</li><li><strong>装备系统</strong>：玩家可以通过获取和穿戴不同的装备来提升角色的属性和能力。这些装备通常具有不同的品质和等级，玩家可以根据自己的需求进行选择。</li></ul></li><li><p><strong>用户界面（UI）系统</strong>：</p><ul><li><strong>游戏界面设计</strong>：包括血条、蓝条、技能栏、背包等游戏元素的显示和管理。</li><li><strong>交互设计</strong>：玩家需要通过UI系统进行游戏操作，如选择技能、查看物品、与NPC交互等。因此，UI系统需要具有良好的交互性和易用性。</li></ul></li><li><p><strong>AI系统</strong>：</p><ul><li><strong>NPC行为控制</strong>：如巡逻、追逐、战斗策略等。这些行为可以使NPC在游戏中表现得更加真实和有趣。</li><li><strong>敌人智能</strong>：敌人也需要具有一定的智能，能够根据玩家的位置和行动进行反应和攻击。</li></ul></li><li><p><strong>声音与特效系统</strong>：</p><ul><li><strong>音效管理</strong>：包括背景音乐、战斗音效和角色配音等。这些音效可以增强游戏的氛围和代入感。</li><li><strong>特效管理</strong>：包括技能特效、战斗特效和场景特效等。这些特效可以使游戏画面更加华丽和震撼。</li></ul></li><li><p><strong>游戏逻辑与物理模拟系统</strong>：</p><ul><li><strong>游戏逻辑</strong>：根据玩家的输入和当前游戏状态更新游戏逻辑，如角色的移动、攻击和死亡等。</li><li><strong>物理模拟</strong>：处理角色移动、碰撞等物理行为，使游戏世界表现得更加真实和可信。</li></ul></li></ol><p>综上所述，一款完整的ARPG游戏需要包含多个复杂的系统，这些系统相互协作，共同为玩家提供丰富的游戏体验。</p></li></ul><p>对于一款完整的ARPG游戏，除了之前提到的角色系统、战斗系统、地图与探索系统、任务与剧情系统、物品与装备系统、用户界面（UI）系统、AI系统、声音与特效系统以及游戏逻辑与物理模拟系统之外，还有一些系统也是必不可少的：</p><ol><li><p><strong>网络与系统交互系统</strong>：</p><ul><li><strong>网络同步</strong>：对于多人在线的ARPG游戏，网络同步是至关重要的。游戏需要确保所有玩家的操作和状态能够实时同步，以避免出现卡顿或不同步的情况。</li><li><strong>服务器与客户端交互</strong>：游戏需要与服务器进行交互，以处理玩家的登录、存档、交易等操作。这需要游戏具备稳定的服务器和高效的客户端-服务器通信协议。</li></ul></li><li><p><strong>存档与进度管理系统</strong>：</p><ul><li><strong>存档功能</strong>：玩家需要能够随时保存游戏进度，以便在之后继续游戏。这要求游戏具备可靠的存档机制，能够确保存档数据的完整性和安全性。</li><li><strong>进度管理</strong>：游戏还需要提供进度管理功能，如查看历史记录、选择存档等，以便玩家能够方便地管理自己的游戏进度。</li></ul></li><li><p><strong>成就与奖励系统</strong>：</p><ul><li><strong>成就系统</strong>：为了激励玩家完成更多的游戏内容，游戏通常会设置成就系统。玩家可以通过完成特定的任务或挑战来获得成就，并展示给其他玩家。</li><li><strong>奖励系统</strong>：游戏还需要设置奖励系统，如经验值、金币、装备等，以奖励玩家的努力和成就。这些奖励可以激励玩家继续游戏，并提升游戏的可玩性。</li></ul></li><li><p><strong>社交与互动系统</strong>：</p><ul><li><strong>好友系统</strong>：玩家可以添加其他玩家为好友，并与其进行聊天、组队等互动。这有助于增强游戏的社交性和互动性。</li><li><strong>公会系统</strong>：一些ARPG游戏还包含公会系统，玩家可以加入或创建公会，与其他公会成员一起完成任务、挑战副本等。这有助于提升游戏的团队合作和社交体验。</li></ul></li><li><p><strong>反作弊与安全系统</strong>：</p><ul><li><strong>反作弊机制</strong>：为了防止玩家使用外挂或作弊软件，游戏需要设置反作弊机制。这可以通过检测异常行为、封停作弊账号等方式来实现。</li><li><strong>安全保护</strong>：游戏还需要确保玩家的账号和信息安全。这包括加密存储敏感信息、提供安全的登录方式等。</li></ul></li></ol><p>综上所述，一款完整的ARPG游戏需要包含多个复杂的系统，这些系统相互协作，共同为玩家提供丰富的游戏体验。同时，游戏开发者还需要不断关注玩家的反馈和需求，持续优化和改进游戏系统，以提升游戏的竞争力和吸引力。</p><h2 id="个人背包系统思路"><a href="#个人背包系统思路" class="headerlink" title="个人背包系统思路"></a>个人背包系统思路</h2><ul><li>存储ID:通过ID(数据资产数组索引获取对应物品结构生成对象或者显示),背包数组存ID</li></ul><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PublicDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>, <span class="string">&quot;EnhancedInput&quot;</span>, <span class="string">&quot;GameplayTags&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NativeGameplayTags.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LyraGameplayTags</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare all of the custom native tags that Lyra will use</span></span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_IsDead);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_Cooldown);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_Cost);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_TagsBlocked);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_TagsMissing);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_Networking);</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Ability_ActivateFail_ActivationGroup);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FairyTag/FairyTag.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/EngineTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayTagsManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LyraGameplayTags</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_IsDead, <span class="string">&quot;Ability.ActivateFail.IsDead&quot;</span>, <span class="string">&quot;Ability failed to activate because its owner is dead.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_Cooldown, <span class="string">&quot;Ability.ActivateFail.Cooldown&quot;</span>, <span class="string">&quot;Ability failed to activate because it is on cool down.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_Cost, <span class="string">&quot;Ability.ActivateFail.Cost&quot;</span>, <span class="string">&quot;Ability failed to activate because it did not pass the cost checks.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_TagsBlocked, <span class="string">&quot;Ability.ActivateFail.TagsBlocked&quot;</span>, <span class="string">&quot;Ability failed to activate because tags are blocking it.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_TagsMissing, <span class="string">&quot;Ability.ActivateFail.TagsMissing&quot;</span>, <span class="string">&quot;Ability failed to activate because tags are missing.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_Networking, <span class="string">&quot;Ability.ActivateFail.Networking&quot;</span>, <span class="string">&quot;Ability failed to activate because it did not pass the network checks.&quot;</span>);</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Ability_ActivateFail_ActivationGroup, <span class="string">&quot;Ability.ActivateFail.ActivationGroup&quot;</span>, <span class="string">&quot;Ability failed to activate because of its activation group.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要读取 <code>FGameplayTag</code> 标签，你可以使用 Unreal Engine 提供的 API 函数。以下是几种常见的方法来读取和检查这些标签：</p><ol><li><p><strong>通过 <code>HasTag</code> 方法检查某个对象是否具有特定标签：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SomeActor-&gt;Tags.<span class="built_in">HasTag</span>(LyraGameplayTags::Ability_ActivateFail_IsDead))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>通过 <code>GetAllTags</code> 获取所有标签并遍历：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FGameplayTagContainer AllTags;</span><br><span class="line">SomeActor-&gt;<span class="built_in">GetAllTags</span>(AllTags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FGameplayTag&amp; Tag : AllTags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Tag == LyraGameplayTags::Ability_ActivateFail_IsDead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>MatchExact</code> 或 <code>MatchAny</code> 来匹配标签：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FGameplayTagQuery Query;</span><br><span class="line">Query.TagQueries.<span class="built_in">Empty</span>();</span><br><span class="line">Query.TagQueries.<span class="built_in">Add</span>(FGameplayTagQueryExpression::<span class="built_in">CreateExpression_Lambda</span>(</span><br><span class="line">    [](<span class="type">const</span> FGameplayTag&amp; Tag) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Tag.<span class="built_in">MatchesTag</span>(LyraGameplayTags::Ability_ActivateFail_IsDead);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SomeActor-&gt;Tags.<span class="built_in">MatchExact</span>(Query))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>直接比较标签：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FGameplayTag TagToCheck = ...; <span class="comment">// 从某处获取标签</span></span><br><span class="line"><span class="keyword">if</span> (TagToCheck == LyraGameplayTags::Ability_ActivateFail_IsDead)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>FGameplayTagContainer</code> 管理多个标签：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FGameplayTagContainer TagsToCheck;</span><br><span class="line">TagsToCheck.<span class="built_in">AddTag</span>(LyraGameplayTags::Ability_ActivateFail_IsDead);</span><br><span class="line">TagsToCheck.<span class="built_in">AddTag</span>(LyraGameplayTags::Ability_ActivateFail_Cooldown);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SomeActor-&gt;Tags.<span class="built_in">HasAny</span>(TagsToCheck))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li>确保你已经包含了必要的头文件，例如 <code>#include &quot;GameplayTagsManager.h&quot;</code>。</li><li>确保你使用的对象（如 <code>SomeActor</code>）确实有 <code>Tags</code> 属性或类似的方法来访问标签。</li></ul><p>根据你的具体需求选择合适的方法来读取和处理这些标签。</p><p>在处理大量标签时，使用大量的 <code>if</code> 语句确实可能会带来一些问题，尤其是在代码的可维护性和性能方面。以下是一些潜在的问题以及相应的优化建议：</p><h3 id="潜在问题："><a href="#潜在问题：" class="headerlink" title="潜在问题："></a>潜在问题：</h3><ol><li><p><strong>代码冗长</strong>：</p><ul><li>大量的 <code>if</code> 语句会使代码变得冗长且难以阅读。</li><li>例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Weapon-&gt;Tags.<span class="built_in">HasTag</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Weapon-&gt;Tags.<span class="built_in">HasTag</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以此类推...</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>可维护性差</strong>：</p><ul><li>每次添加或修改武器时，都需要更新 <code>if</code> 语句，增加了维护成本。</li><li>如果标签数量非常多，维护这些 <code>if</code> 语句会变得非常繁琐。</li></ul></li><li><p><strong>性能影响</strong>：</p><ul><li>虽然单个 <code>if</code> 语句的性能影响很小，但如果 <code>if</code> 语句的数量非常多，可能会对性能产生一定的影响。</li><li>尤其是在每帧或每秒频繁执行这些检查时，性能开销会更加明显。</li></ul></li><li><p><strong>错误风险</strong>：</p><ul><li>大量的 <code>if</code> 语句增加了出错的可能性，例如拼写错误或遗漏某些条件。</li></ul></li></ol><h3 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h3><ol><li><p><strong>使用映射（Map）</strong>：</p><ul><li>使用 <code>TMap</code> 或 <code>TMultiMap</code> 来映射标签到处理函数。</li><li>例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Containers/Map.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/WeakObjectPtr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*WeaponHandlerFunc)</span><span class="params">(AWeapon*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon1</span><span class="params">(AWeapon* Weapon)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon2</span><span class="params">(AWeapon* Weapon)</span></span>;</span><br><span class="line"><span class="comment">// 以此类推...</span></span><br><span class="line"></span><br><span class="line">TMap&lt;FName, WeaponHandlerFunc&gt; WeaponHandlers;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitializeWeaponHandlers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WeaponHandlers.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>), HandleWeapon1);</span><br><span class="line">    WeaponHandlers.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>), HandleWeapon2);</span><br><span class="line">    <span class="comment">// 以此类推...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> FName&amp; Tag : Weapon-&gt;Tags)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (WeaponHandlers.<span class="built_in">Contains</span>(Tag))</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponHandlers[Tag](Weapon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon1</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon2</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用策略模式</strong>：</p><ul><li>使用策略模式来定义不同的处理逻辑，并根据标签选择相应的策略。</li><li>例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IWeaponStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">IWeaponStrategy</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon1Strategy</span> : <span class="keyword">public</span> IWeaponStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 处理 Weapon1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon2Strategy</span> : <span class="keyword">public</span> IWeaponStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 处理 Weapon2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TMap&lt;FName, TSharedPtr&lt;IWeaponStrategy&gt;&gt; WeaponStrategies;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitializeWeaponStrategies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WeaponStrategies.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>), <span class="built_in">MakeShared</span>&lt;Weapon1Strategy&gt;());</span><br><span class="line">    WeaponStrategies.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>), <span class="built_in">MakeShared</span>&lt;Weapon2Strategy&gt;());</span><br><span class="line">    <span class="comment">// 以此类推...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> FName&amp; Tag : Weapon-&gt;Tags)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (WeaponStrategies.<span class="built_in">Contains</span>(Tag))</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponStrategies[Tag]-&gt;<span class="built_in">Handle</span>(Weapon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用反射机制</strong>：</p><ul><li>使用反射机制来动态调用处理函数。</li><li>例如，使用 Unreal Engine 的 <code>UFunction</code> 和 <code>UObject</code> 系统：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> FName&amp; Tag : Weapon-&gt;Tags)</span><br><span class="line">    &#123;</span><br><span class="line">        FString HandlerName = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Handle%s&quot;</span>), *Tag.<span class="built_in">ToString</span>());</span><br><span class="line">        UFunction* HandlerFunction = <span class="built_in">GetClass</span>()-&gt;<span class="built_in">FindFunctionByName</span>(<span class="built_in">FName</span>(*HandlerName));</span><br><span class="line">        <span class="keyword">if</span> (HandlerFunction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">ProcessEvent</span>(HandlerFunction, &amp;Weapon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::HandleItemWeaponWeapon1</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::HandleItemWeaponWeapon2</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用事件系统</strong>：</p><ul><li>使用 Unreal Engine 的事件系统来处理不同类型的武器。</li><li>例如，使用 <code>DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</code> 和 <code>DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams</code>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FWeaponHandler, AWeapon*, Weapon);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">FWeaponHandler OnWeapon1PickedUp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">FWeaponHandler OnWeapon2PickedUp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以此类推...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Weapon-&gt;Tags.<span class="built_in">HasTag</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        OnWeapon1PickedUp.<span class="built_in">Broadcast</span>(Weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Weapon-&gt;Tags.<span class="built_in">HasTag</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        OnWeapon2PickedUp.<span class="built_in">Broadcast</span>(Weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以此类推...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><h4 id="使用映射（Map）："><a href="#使用映射（Map）：" class="headerlink" title="使用映射（Map）："></a>使用映射（Map）：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Containers/Map.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/WeakObjectPtr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*WeaponHandlerFunc)</span><span class="params">(AWeapon*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon1</span><span class="params">(AWeapon* Weapon)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon2</span><span class="params">(AWeapon* Weapon)</span></span>;</span><br><span class="line"><span class="comment">// 以此类推...</span></span><br><span class="line"></span><br><span class="line">TMap&lt;FName, WeaponHandlerFunc&gt; WeaponHandlers;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitializeWeaponHandlers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WeaponHandlers.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>), HandleWeapon1);</span><br><span class="line">    WeaponHandlers.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>), HandleWeapon2);</span><br><span class="line">    <span class="comment">// 以此类推...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> FName&amp; Tag : Weapon-&gt;Tags)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (WeaponHandlers.<span class="built_in">Contains</span>(Tag))</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponHandlers[Tag](Weapon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon1</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleWeapon2</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理 Weapon2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用策略模式："><a href="#使用策略模式：" class="headerlink" title="使用策略模式："></a>使用策略模式：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IWeaponStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">IWeaponStrategy</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon1Strategy</span> : <span class="keyword">public</span> IWeaponStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 处理 Weapon1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon2Strategy</span> : <span class="keyword">public</span> IWeaponStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Handle</span><span class="params">(AWeapon* Weapon)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 处理 Weapon2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TMap&lt;FName, TSharedPtr&lt;IWeaponStrategy&gt;&gt; WeaponStrategies;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitializeWeaponStrategies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WeaponStrategies.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon1&quot;</span>), <span class="built_in">MakeShared</span>&lt;Weapon1Strategy&gt;());</span><br><span class="line">    WeaponStrategies.<span class="built_in">Add</span>(<span class="built_in">FName</span>(<span class="string">&quot;Item.Weapon.Weapon2&quot;</span>), <span class="built_in">MakeShared</span>&lt;Weapon2Strategy&gt;());</span><br><span class="line">    <span class="comment">// 以此类推...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AYourCharacter::PickupWeapon</span><span class="params">(AWeapon* Weapon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> FName&amp; Tag : Weapon-&gt;Tags)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (WeaponStrategies.<span class="built_in">Contains</span>(Tag))</span><br><span class="line">        &#123;</span><br><span class="line">            WeaponStrategies[Tag]-&gt;<span class="built_in">Handle</span>(Weapon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>使用大量的 <code>if</code> 语句来处理大量标签会导致代码冗长、可维护性差和潜在的性能问题。通过使用映射、策略模式、反射机制或事件系统，可以更高效地管理和处理这些标签，提高代码的可维护性和性能。选择适合你项目需求的方法来优化标签处理逻辑。</p><p>GameplayTags 是 Unreal Engine 中用于管理和操作标签（tags）的一种强大工具。它们非常适合用于标记和分类游戏中的各种元素，如角色、物品、技能等。然而，直接使用 GameplayTags 来创建对象并不是其设计初衷，也不是最佳实践。<br>GameplayTags 的用途：<br>标记和分类：<br>用于标记和分类游戏中的各种元素，例如武器类型、技能效果、角色状态等。<br>例如：Item.Weapon.Rifle、Skill.Fireball、Character.State.Invincible。<br>条件判断和逻辑控制：<br>通过检查对象是否具有特定的标签来执行不同的逻辑。<br>例如：根据角色是否具有 Character.State.Invincible 标签来决定是否受到伤害。<br>数据驱动设计：<br>使用 GameplayTags 可以实现更灵活的数据驱动设计，减少硬编码逻辑。<br>例如：通过配置文件或蓝图动态添加或移除标签，改变游戏行为。<br>不适合用 GameplayTags 创建对象的原因：<br>职责分离：<br>GameplayTags 主要用于标记和分类，而不是创建对象。创建对象通常涉及更多的逻辑，如初始化属性、设置行为等，这些应该由类构造函数或工厂模式来处理。<br>性能考虑：<br>每次创建对象时都依赖 GameplayTags 进行复杂的标签匹配和处理，可能会引入不必要的性能开销。<br>直接通过类或工厂模式创建对象更加高效和明确。<br>代码可读性和维护性：<br>使用 GameplayTags 创建对象会使代码变得不直观，难以理解和维护。<br>类和工厂模式提供了更清晰的对象创建逻辑，便于调试和扩展。</p><h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><ul><li><p>在控件中创建面板控件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ULatticeUIWidget::NativeConstruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">NativeConstruct</span>();</span><br><span class="line"><span class="keyword">if</span>(!WidgetTree)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">USizeBox *SizeBox = WidgetTree-&gt;<span class="built_in">ConstructWidget</span>&lt;USizeBox&gt;(USizeBox::<span class="built_in">StaticClass</span>());</span><br><span class="line"></span><br><span class="line">SizeBox-&gt;<span class="built_in">SetWidthOverride</span>(<span class="number">300.0f</span>);</span><br><span class="line">SizeBox-&gt;<span class="built_in">SetHeightOverride</span>(<span class="number">300.0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Super::<span class="built_in">NativePreConstruct</span>();</span><br><span class="line"><span class="keyword">if</span>(!WidgetTree)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">USizeBox *SizeBox = WidgetTree-&gt;<span class="built_in">ConstructWidget</span>&lt;USizeBox&gt;(USizeBox::<span class="built_in">StaticClass</span>());</span><br><span class="line"></span><br><span class="line">SizeBox-&gt;<span class="built_in">SetWidthOverride</span>(<span class="number">300.0f</span>);</span><br><span class="line">SizeBox-&gt;<span class="built_in">SetHeightOverride</span>(<span class="number">300.0f</span>);</span><br><span class="line">WidgetTree-&gt;RootWidget=SizeBox;</span><br><span class="line"></span><br><span class="line">UImage *Image = WidgetTree-&gt;<span class="built_in">ConstructWidget</span>&lt;UImage&gt;(UImage::<span class="built_in">StaticClass</span>());</span><br><span class="line">SizeBox-&gt;<span class="built_in">AddChild</span>(Image);</span><br></pre></td></tr></table></figure><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><ul><li>小格子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用物触发的委托,用于传给控制器</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE</span>(FMyUsetheEvent);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//小格子控件,用于显示背包物品纹理和数量</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTDEMO_API</span> UMyUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//聚焦时触发</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> FReply <span class="title">NativeOnFocusReceived</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FFocusEvent&amp; InFocusEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//结束聚焦时触发</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeOnFocusLost</span><span class="params">(<span class="type">const</span> FFocusEvent&amp; InFocusEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//按键按下时触发</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> FReply <span class="title">NativeOnKeyDown</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FKeyEvent&amp; InKeyEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对其他格子的导航</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UINavigation</span><span class="params">(<span class="type">int</span> p_index=<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控件动画</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">&quot;Animation&quot;</span>)</span><br><span class="line">UWidgetAnimation* m_animation;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">FMyUsetheEvent OnUsethe;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Useitems</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyUserWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/PanelWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintTypeConversions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">FReply <span class="title">UMyUserWidget::NativeOnFocusReceived</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FFocusEvent&amp; InFocusEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PlayAnimation</span>(m_animation);</span><br><span class="line"><span class="keyword">return</span> Super::<span class="built_in">NativeOnFocusReceived</span>(InGeometry, InFocusEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyUserWidget::NativeOnFocusLost</span><span class="params">(<span class="type">const</span> FFocusEvent&amp; InFocusEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp,Warning,<span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>),*<span class="built_in">GetName</span>());</span><br><span class="line">Super::<span class="built_in">NativeOnFocusLost</span>(InFocusEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FReply <span class="title">UMyUserWidget::NativeOnKeyDown</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FKeyEvent&amp; InKeyEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查按键并确定导航方向</span></span><br><span class="line"><span class="keyword">if</span> (InKeyEvent.<span class="built_in">GetKey</span>() == EKeys::Up)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UINavigation</span>(<span class="number">-6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (InKeyEvent.<span class="built_in">GetKey</span>() == EKeys::Down)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UINavigation</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (InKeyEvent.<span class="built_in">GetKey</span>() == EKeys::Left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UINavigation</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (InKeyEvent.<span class="built_in">GetKey</span>() == EKeys::Right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UINavigation</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (InKeyEvent.<span class="built_in">GetKey</span>() == EKeys::SpaceBar)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Useitems</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Super::<span class="built_in">NativeOnKeyDown</span>(InGeometry, InKeyEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyUserWidget::UINavigation</span><span class="params">(<span class="type">int</span> p_index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取自身位置索引</span></span><br><span class="line">    UPanelWidget* parent = <span class="built_in">GetParent</span>();</span><br><span class="line">    <span class="keyword">if</span> (!parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Parent widget is null&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> childrenCount = parent-&gt;<span class="built_in">GetChildrenCount</span>();</span><br><span class="line">    <span class="keyword">if</span> (childrenCount == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Parent widget has no children&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = parent-&gt;<span class="built_in">GetChildIndex</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (index == INDEX_NONE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;This widget is not a child of the parent widget&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取导航控件并设置导航聚焦</span></span><br><span class="line">    <span class="type">int</span> new_index = UE::Geometry::VectorUtil::<span class="built_in">Clamp</span>(index + p_index, <span class="number">0</span>, childrenCount - <span class="number">1</span>);</span><br><span class="line">    UUserWidget* bc = <span class="built_in">Cast</span>&lt;UUserWidget&gt;(parent-&gt;<span class="built_in">GetChildAt</span>(new_index));</span><br><span class="line">    <span class="keyword">if</span> (bc &amp;&amp; <span class="built_in">IsValid</span>(bc))</span><br><span class="line">    &#123;</span><br><span class="line">        bc-&gt;<span class="built_in">SetFocus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Failed to cast child widget to UUserWidget or child widget is invalid&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyUserWidget::Useitems</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// UItem* item = NewObject&lt;UItem&gt;();</span></span><br><span class="line"><span class="comment">// item-&gt;m_name = &quot;test&quot;;</span></span><br><span class="line"><span class="comment">// item-&gt;m_price = 100;</span></span><br><span class="line"><span class="comment">// item-&gt;m_num = 1;</span></span><br><span class="line"><span class="comment">// item-&gt;m_type = 1;</span></span><br><span class="line"><span class="comment">// item-&gt;m_id = 1;</span></span><br><span class="line"><span class="comment">// item-&gt;m_icon = LoadObject&lt;UTexture2D&gt;(nullptr, TEXT(&quot;/Game/UI/Icon/Item/Item_1.Item_1&quot;));</span></span><br><span class="line"><span class="comment">// item-&gt;m_desc = &quot;test&quot;;</span></span><br><span class="line"><span class="comment">// item-&gt;m_effect =&quot;test&quot;;</span></span><br><span class="line">OnUsethe.<span class="built_in">Broadcast</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPROPERTY(BlueprintReadOnly, Transient, meta = (BindWidgetOptional) , meta = (BindWidgetAnim))</span><br><span class="line">UWidgetAnimation* Fade;</span><br><span class="line">UPROPERTY(BlueprintReadOnly, meta = (BindWidgetOptional))</span><br><span class="line">UButton* Butt;</span><br></pre></td></tr></table></figure><h3 id="UI二"><a href="#UI二" class="headerlink" title="UI二"></a>UI二</h3><ul><li><p>这里写了两个类,一个为包裹框,一个为物品框</p></li><li><p>物品框主要包含了尺寸框,背景图像,图标纹理,数量显示</p></li><li><p>包裹框用于包裹框组件,可以获得物品框的索引,还用于一个事件,物品框点击触发这个事件并发送出去</p></li><li><p>包裹框还封装了对子节点显示清理&#x2F;初始化和刷新的方法,只要通过遍历节点在获取物品属性数组索引来设置</p></li><li><p>物品框代码</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ItemBoxWidgetBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UTestUserWidget</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UTextBlock</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UImage</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span>  <span class="title class_">FItemShowStruct</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//道具数量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite,EditAnywhere)</span><br><span class="line">int32 quantity;</span><br><span class="line"><span class="comment">// 道具图标</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly, BlueprintReadOnly, meta = (AllowedClasses = <span class="string">&quot;Texture2D,PaperSprite&quot;</span>))</span><br><span class="line">UTexture2D *Icon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTGUI_API</span> UItemBoxWidgetBase : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//Image</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere, meta = (BindWidgetOptional))</span><br><span class="line">UImage* icon;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere, meta = (BindWidgetOptional))</span><br><span class="line">UTextBlock* TextBlock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">&quot;Image&quot;</span>, meta = (FieldNotify))</span><br><span class="line">FString ImagePath;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">UTestUserWidget* TestUserWidget;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeConstruct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeOnMouseEnter</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FPointerEvent&amp; InMouseEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> FReply <span class="title">NativeOnMouseButtonDown</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FPointerEvent&amp; InMouseEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widget/ItemBoxWidgetBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestUserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/WidgetTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/Image.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/PanelWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UItemBoxWidgetBase::NativeConstruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">NativeConstruct</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UItemBoxWidgetBase::NativeOnMouseEnter</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FPointerEvent&amp; InMouseEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FReply <span class="title">UItemBoxWidgetBase::NativeOnMouseButtonDown</span><span class="params">(<span class="type">const</span> FGeometry&amp; InGeometry, <span class="type">const</span> FPointerEvent&amp; InMouseEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 检查鼠标按键</span></span><br><span class="line"><span class="keyword">if</span> (InMouseEvent.<span class="built_in">GetEffectingButton</span>() == EKeys::LeftMouseButton) &#123;</span><br><span class="line"><span class="comment">// 处理左键按下</span></span><br><span class="line"></span><br><span class="line">int32 index = <span class="built_in">GetParent</span>()-&gt;<span class="built_in">GetChildIndex</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (TestUserWidget) &#123;</span><br><span class="line">TestUserWidget-&gt;OnItemBoxClick.<span class="built_in">Broadcast</span>(<span class="keyword">this</span>, index);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Left mouse button pressed&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (InMouseEvent.<span class="built_in">GetEffectingButton</span>() == EKeys::RightMouseButton) &#123;</span><br><span class="line"><span class="comment">// 处理右键按下</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Right mouse button pressed&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 其他按键</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Other mouse button pressed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line"><span class="comment">// 记录异常信息</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;Exception in NativeOnMouseButtonDown: %s&quot;</span>), *<span class="built_in">FString</span>(e.<span class="built_in">what</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Super::<span class="built_in">NativeOnMouseButtonDown</span>(InGeometry, InMouseEvent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>包裹框代码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/WrapBox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FItemShowStruct</span>;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams</span>(FOnItemBoxClick, <span class="type">const</span> UItemBoxWidgetBase*, ItemIndex, int32, Quantity);</span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FBoxStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//要生成的格子数量</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32 Quantity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line"><span class="type">float</span>  ChildWidgetWidth;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32  line;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">int32  Column;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTGUI_API</span> UTestUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeConstruct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeOnInitialized</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitBox</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包裹框控件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere, meta = (BindWidgetOptional))</span><br><span class="line">UWrapBox* WrapBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子控件类型</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UUserWidget&gt; ItemBoxWidgetClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包裹框参数</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, EditAnywhere)</span><br><span class="line">FBoxStruct BoxStruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击子节点事件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable)</span><br><span class="line">FOnItemBoxClick OnItemBoxClick;</span><br><span class="line"></span><br><span class="line"><span class="comment">//刷新显示</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RefreshShow</span><span class="params">(<span class="type">const</span> TArray&lt;FItemShowStruct&gt;&amp; ItemShowStructArray)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//清空纹理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CleaShow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestUserWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/Image.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/TextBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widget/ItemBoxWidgetBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTestUserWidget::NativeOnInitialized</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">NativeOnInitialized</span>();</span><br><span class="line"><span class="built_in">InitBox</span>();</span><br><span class="line"><span class="keyword">if</span> (ItemBoxWidgetClass)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int32 i = <span class="number">0</span>; i &lt; BoxStruct.line*BoxStruct.Column; i++)</span><br><span class="line">&#123;</span><br><span class="line">UItemBoxWidgetBase* ItemBoxWidget = <span class="built_in">CreateWidget</span>&lt;UItemBoxWidgetBase&gt;(<span class="built_in">GetWorld</span>(), ItemBoxWidgetClass);</span><br><span class="line">ItemBoxWidget-&gt;TestUserWidget = <span class="keyword">this</span>;</span><br><span class="line">WrapBox-&gt;<span class="built_in">AddChild</span>(ItemBoxWidget);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTestUserWidget::InitBox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//InnerSlotPadding</span></span><br><span class="line"><span class="type">float</span> wrapsize=BoxStruct.Column*BoxStruct.ChildWidgetWidth+(BoxStruct.Column<span class="number">-1</span>)*WrapBox-&gt;<span class="built_in">GetInnerSlotPadding</span>().X;</span><br><span class="line">WrapBox-&gt;<span class="built_in">SetWrapSize</span>(wrapsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTestUserWidget::CleaShow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ResourceObject</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> Element : WrapBox-&gt;<span class="built_in">GetAllChildren</span>())</span><br><span class="line">&#123;</span><br><span class="line">UItemBoxWidgetBase *ItemBoxWidget = <span class="built_in">Cast</span>&lt;UItemBoxWidgetBase&gt;(Element);</span><br><span class="line">ItemBoxWidget-&gt;icon-&gt;<span class="built_in">SetBrushResourceObject</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTestUserWidget::RefreshShow</span><span class="params">(<span class="type">const</span> TArray&lt;FItemShowStruct&gt;&amp; ItemShowStructArray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">CleaShow</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有子元素</span></span><br><span class="line">    int32 Children = WrapBox-&gt;<span class="built_in">GetChildrenCount</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保 ItemShowStructArray 的长度不小于子元素数量</span></span><br><span class="line">    <span class="keyword">if</span> (ItemShowStructArray.<span class="built_in">Num</span>() &lt; Children)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;ItemShowStructArray length (%d) is less than children count (%d)&quot;</span>), ItemShowStructArray.<span class="built_in">Num</span>(), Children);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有子元素</span></span><br><span class="line">    <span class="keyword">for</span> (int32 Index = <span class="number">0</span>; Index &lt; Children; Index++)</span><br><span class="line">    &#123;</span><br><span class="line">        UItemBoxWidgetBase* ItemBoxWidget = <span class="built_in">Cast</span>&lt;UItemBoxWidgetBase&gt;(WrapBox-&gt;<span class="built_in">GetChildAt</span>(Index));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查类型转换是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (ItemBoxWidget)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ItemBoxWidget-&gt;icon)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 设置图标资源</span></span><br><span class="line">                ItemBoxWidget-&gt;icon-&gt;<span class="built_in">SetBrushResourceObject</span>(ItemShowStructArray[Index].Icon);</span><br><span class="line">            ItemBoxWidget-&gt;TextBlock-&gt;<span class="built_in">SetText</span>(FText::<span class="built_in">AsNumber</span>(ItemShowStructArray[Index].quantity));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Icon is null at index %d&quot;</span>), Index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Failed to cast at index %d&quot;</span>), Index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTestUserWidget::NativeConstruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">NativeConstruct</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h1><h2 id="控制器类"><a href="#控制器类" class="headerlink" title="控制器类"></a>控制器类</h2><ul><li>对玩家移动输入和动画操作</li><li>对UI进行显示和隐藏</li></ul><h2 id="状态类"><a href="#状态类" class="headerlink" title="状态类"></a>状态类</h2><ul><li>玩家背包</li><li>玩家数据</li></ul><h2 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h2><ul><li>UI创建和管理</li></ul><h2 id="背包-1"><a href="#背包-1" class="headerlink" title="背包"></a>背包</h2><p>通过遍历组件通过索引获取纹理数组显示</p><ul><li>增: <ol><li>向背包添加物品,如果相同可叠加且存在同类物品则叠加</li><li>向背包添加物品,如果不可叠加则创建新的对象并寻找空的第一个空位放下</li><li>向背包添加物品,如果物品大于最大叠加数量则创建新的对象,并寻找空的位置放下</li></ol></li><li>删:<ol><li>删除指定的物品</li></ol></li><li>改:<ol><li>按索引修改指定位置物品</li><li>交换物品</li></ol></li><li>查:<ol start="2"><li>遍历所有物品并显示到UI</li></ol></li></ul></li></ul><h1 id="三渲二修改渲染管线"><a href="#三渲二修改渲染管线" class="headerlink" title="三渲二修改渲染管线"></a>三渲二修改渲染管线</h1><p>EMaterialShadingModel</p>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器</title>
      <link href="/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%AE%B9%E5%99%A8/"/>
      <url>/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="容器声明"><a href="#容器声明" class="headerlink" title="容器声明"></a>容器声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器声明</span></span><br><span class="line">Tset&lt;<span class="type">int</span>&gt;MySet;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明容器并初始化</span></span><br><span class="line">Tset&lt;<span class="type">int</span>&gt;MySet;</span><br><span class="line"></span><br><span class="line">MySet.<span class="built_in">Emplace</span>(<span class="number">1</span>);  </span><br><span class="line">MySet.<span class="built_in">Emplace</span>(<span class="number">2</span>);  </span><br><span class="line">MySet.<span class="built_in">Emplace</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th><font color=#8ACDD7>void Add(const T&amp; Element);</font></th><th>将一个元素添加到集合中。如果元素已经存在，则不会重复添加。</th></tr></thead><tbody><tr><td><font color=#8ACDD7>void Remove(const T&amp; Element);()</font></td><td>从集合中移除一个元素。如果元素不存在于集合中，则不会有任何影响。</td></tr><tr><td><font color=#8ACDD7>bool Contains(const T&amp; Element) const;()</font></td><td>检查集合中是否包含指定的元素</td></tr><tr><td><font color=#8ACDD7>bool IsEmpty() const;()</font></td><td>检查集合是否为空。</td></tr><tr><td><font color=#8ACDD7>int32 Size() const;()</font></td><td>获取集合中元素的数量</td></tr><tr><td><font color=#8ACDD7>void Clear();()</font></td><td>清空集合中的所有元素</td></tr><tr><td><font color=#8ACDD7>template&lt;typename… Args&gt;   void Emplace(Args&amp;&amp;… Args);()</font></td><td>在集合中创建并添加一个元素。与Add方法类似，但如果元素已经存在，则不会重复添加</td></tr></tbody></table><div class="gallery">  <div class="fj-gallery page_img_lazyload lazyload btn_album_detail_lazyload data" data-rowHeight="220" data-limit="2">    <span class="gallery-data">[{"url":"https://gd-hbimg.huaban.com/d8dd40f5d19da1d3db9fdd45d10e59299d4106f13e196-jR7vH0","alt":""},{"url":"https://liblibai-online.vibrou.com/img/6bb26af4fce44e63b7cadb9fa9fcc2b0/6a1c17a644893253f018cd887ee367c1a4797bb74ceb00c96242173f811178fc.png","alt":""},{"url":"https://liblibai-online.vibrou.com/img/5f0b28a639b84a46b091713b1d569033/1edfcc2d-68c2-4df5-8cc0-5024f9a85aa0.png","alt":""},{"url":"https://liblibai-online.vibrou.com/img/e37e636054d241069f68392bb399f884/3da2b0fdce50a54bdbd86a79f516dd0a0d2ff8f50061b37ee588eaee18db99ce.png","alt":""},{"url":"https://gd-hbimg.huaban.com/b892d7b01c21d8269f5a7420384991c8555b664c2b8e8-oUBYae","alt":""},{"url":"https://images.tusiassets.com/model_showcase/703785564618393024/e5e3fb5a-9dbf-98c5-17a4-b1748e3335e7.png!mfit_w750_h750_jpg_avif","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>Load More</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典</title>
      <link href="/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%AD%97%E5%85%B8/"/>
      <url>/2025/03/15/ue5/%E5%8F%98%E9%87%8F/%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="字典声明"><a href="#字典声明" class="headerlink" title="字典声明"></a>字典声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明字典 键是int 值是FString字符串</span></span><br><span class="line">TMap&lt;<span class="type">int</span>, FString&gt; MyMap;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明空字典 然后添加元素</span></span><br><span class="line">TMap&lt;<span class="type">int</span>, FString&gt; MyMap;  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 清空TMap</span></span><br><span class="line">MyMap.<span class="built_in">Empty</span>();   </span><br><span class="line"></span><br><span class="line">MyMap.<span class="built_in">Emplace</span>(<span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;One&quot;</span>));  </span><br><span class="line">MyMap.<span class="built_in">Emplace</span>(<span class="number">2</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;Two&quot;</span>));  </span><br><span class="line">MyMap.<span class="built_in">Emplace</span>(<span class="number">3</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;Three&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>字典</th><th>方法说明</th></tr></thead><tbody><tr><td><font color=#8ACDD7>Add()</font></td><td>向<code>TMap</code>中添加一个键值对</td></tr><tr><td><font color=#F9F9E0>Remove()</font></td><td>从<code>TMap</code>中删除一个键值对</td></tr><tr><td><font color=#8ACDD7>Clear()</font></td><td>清除<code>TMap</code>中的所有键值对</td></tr><tr><td><font color=#8ACDD7>Contains()</font></td><td>检查<code>TMap</code>中是否存在具有指定键的键值对。</td></tr><tr><td><font color=#8ACDD7>Empty()</font></td><td>检查<code>TMap</code>是否为空</td></tr><tr><td><font color=#8ACDD7>Keys()</font></td><td>获取包含所有键的数组</td></tr><tr><td><font color=#8ACDD7>Values()</font></td><td>获取包含所有值的数组</td></tr><tr><td><font color=#8ACDD7>Size()</font></td><td>获取<code>TMap</code>中的键值对数量</td></tr><tr><td><font color=#8ACDD7>Find()</font></td><td>根据键查找与该键相关联的值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏设计模式</title>
      <link href="/2025/03/15/python/cpp%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/03/15/python/cpp%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏设计模式"><a href="#游戏设计模式" class="headerlink" title="游戏设计模式"></a>游戏设计模式</h1><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul><li>对输入指令和动画进行解耦撤销等</li></ul><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><ul><li>多个对象共用同一个资源</li></ul><h2 id="更新方法模式"><a href="#更新方法模式" class="headerlink" title="更新方法模式"></a>更新方法模式</h2><ul><li>对每个对象单独调用更新函数</li></ul><h2 id="游戏循环模式"><a href="#游戏循环模式" class="headerlink" title="游戏循环模式"></a>游戏循环模式</h2><ul><li>游戏循环底层</li></ul><h2 id="双缓冲模式"><a href="#双缓冲模式" class="headerlink" title="双缓冲模式"></a>双缓冲模式</h2><ul><li>绘制相关</li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><ul><li>状态机逻辑,有限状态机等</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>静态函数,全局变量</li></ul><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul><li>关于工厂模式,预制体,泛型,模板</li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>通过观察者模式接受命令执行相应的动作</li></ul><h2 id="字节码模式"><a href="#字节码模式" class="headerlink" title="字节码模式"></a>字节码模式</h2><ul><li>自定义编程语言?</li></ul><h2 id="子类沙箱模式"><a href="#子类沙箱模式" class="headerlink" title="子类沙箱模式"></a>子类沙箱模式</h2><ul><li>将多复用的方法写在基类,避免高耦合度</li></ul><h2 id="类型对象"><a href="#类型对象" class="headerlink" title="类型对象"></a>类型对象</h2><ul><li>将对象可通过外部文件修改,避免修改源码</li></ul><h2 id="组件模式"><a href="#组件模式" class="headerlink" title="组件模式"></a>组件模式</h2><ul><li>对对象添加组件进行使用</li></ul><h2 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a>事件队列</h2><ul><li>将事件加入队列,等待执行处理,类似观察者模式,多出缓存区域</li></ul><h2 id="服务器定位器"><a href="#服务器定位器" class="headerlink" title="服务器定位器"></a>服务器定位器</h2><ul><li>类似单例</li></ul><p><img src="https://img2.imgtp.com/2024/04/09/MCdYFCov.jpg" alt="s"></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#关键字</title>
      <link href="/2025/03/15/cs/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2025/03/15/cs/%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><ul><li>记录C#的一些基础学习</li></ul><h1 id="C-常用关键字"><a href="#C-常用关键字" class="headerlink" title="C#常用关键字"></a>C#常用关键字</h1><h3 id="关键字集合"><a href="#关键字集合" class="headerlink" title="关键字集合"></a>关键字集合</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">new</span> <span class="title">public</span> <span class="title">private</span> <span class="title">protected</span></span><br><span class="line"><span class="title">static</span>静态 <span class="title">internal</span>程序集 <span class="title">readonly</span>只读 </span><br><span class="line"><span class="title">virtual</span>虚函数 <span class="title">override</span>重写 <span class="title">interface</span>接口 <span class="title">abstract</span>抽象 <span class="title">delegate</span>委托</span><br><span class="line"><span class="title">sealed</span>密封 <span class="title">base</span>基类 <span class="title">this</span>自己</span><br><span class="line"><span class="title">for</span> <span class="title">break</span> <span class="title">continue</span></span><br><span class="line"><span class="title">with</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>int 整数</li><li>float  浮点</li><li>double 双精度浮点</li><li>char 字符型</li><li>string 字符串</li><li>bool 布尔</li><li>void 方法</li></ul><h2 id="new-实例化"><a href="#new-实例化" class="headerlink" title="new 实例化"></a>new 实例化</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> 游戏类</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">string</span> 名字 &#123;  <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">//声明字符串类型</span></span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">int</span> 年龄 &#123; <span class="keyword">get</span>; <span class="keyword">set</span> ; &#125; <span class="comment">//声明整数</span></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">public</span> 游戏类()</span><br><span class="line">        &#123;</span><br><span class="line">            名字 = <span class="string">&quot;无&quot;</span>;</span><br><span class="line">            年龄 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//构造函数 带参数</span></span><br><span class="line">        <span class="keyword">public</span> 游戏类(<span class="built_in">string</span> 名字, <span class="built_in">int</span> 年龄)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.名字 = 名字;</span><br><span class="line">            <span class="keyword">this</span>.年龄 = 年龄;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 输出信息()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;名字:&quot;</span>+名字); Console.WriteLine(<span class="string">&quot;年龄:&quot;</span>+年龄);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 怪物=<span class="keyword">new</span> 游戏类();  <span class="comment">//实例化对象</span></span><br><span class="line">            游戏类 玩家=<span class="keyword">new</span> 游戏类(<span class="string">&quot;李七夜&quot;</span>,<span class="number">17</span>);  <span class="comment">//实例化对象 带参数</span></span><br><span class="line">            玩家.输出信息();</span><br><span class="line">            怪物.输出信息();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Myclass</span>&#123;</span><br><span class="line">    <span class="comment">//类成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-公开"><a href="#public-公开" class="headerlink" title="public  公开"></a>public  公开</h2><ul><li>public是一个访问修饰符,带有public修饰的类,方法,属性可以在任何地方访问</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 游戏类</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明公开属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> 年龄 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">public</span> 游戏类(<span class="built_in">int</span> 年龄)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.年龄 = 年龄;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//声明公开函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 输出信息()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(年龄);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 玩家=<span class="keyword">new</span> 游戏类(<span class="number">17</span>);  <span class="comment">//实例化</span></span><br><span class="line">            Console.WriteLine(玩家.年龄);   <span class="comment">//可在类外调用属性并输出</span></span><br><span class="line">            玩家.输出信息();                <span class="comment">//可在类外调用函数</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private-私有"><a href="#private-私有" class="headerlink" title="private 私有"></a>private 私有</h2><ul><li>private是访问修饰符,带private 修饰的类,方法,属性只可以在自身类里访问</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 游戏类</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> 年龄 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//声明公开属性</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> 攻击力 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//声明私有属性</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> 攻击方法() &#123; Console.WriteLine(攻击力); &#125;  <span class="comment">//声明私有方法</span></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">public</span> 游戏类(<span class="built_in">int</span> 年龄)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.年龄 = 年龄;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//声明公开函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 输出信息()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(年龄);  <span class="comment">//类内输出公开的属性</span></span><br><span class="line">            Console.WriteLine(攻击力);  <span class="comment">//类内输出私有的属性</span></span><br><span class="line">            攻击方法();                 <span class="comment">//类内调用私有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 玩家=<span class="keyword">new</span> 游戏类(<span class="number">17</span>);  <span class="comment">//实例化</span></span><br><span class="line">            Console.WriteLine(玩家.年龄);   <span class="comment">//可在类外调用属性并输出</span></span><br><span class="line">            玩家.输出信息();                <span class="comment">//可在类外调用函数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//在这里不能获取声明为私有类型的属性</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="protected-受保护"><a href="#protected-受保护" class="headerlink" title="protected 受保护"></a>protected 受保护</h2><ul><li>protected 是访问修饰符,带protected 修饰的类,方法,属性只可以在子类里访问</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 游戏类</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> 年龄 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//声明公开属性</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> 攻击力 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//声明私有属性</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">int</span> 生命值 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//声明受保护属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> 输出攻击() &#123; Console.WriteLine(攻击力); &#125;  <span class="comment">//声明私有方法</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> 输出生命值() &#123; Console.WriteLine(生命值); &#125;  <span class="comment">//声明受保护的方法</span></span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="comment">//public 游戏类() &#123; &#125;</span></span><br><span class="line">        <span class="keyword">public</span> 游戏类(<span class="built_in">int</span> 年龄)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.年龄 = 年龄;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//声明公开函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 输出信息()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(年龄);  <span class="comment">//类内输出公开的属性</span></span><br><span class="line">            Console.WriteLine(攻击力);  <span class="comment">//类内输出私有的属性</span></span><br><span class="line">            输出攻击();                 <span class="comment">//类内调用私有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 子游戏类 : 游戏类</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> 子游戏类(<span class="built_in">int</span> key) :<span class="keyword">base</span>(key) &#123; 年龄 = key; &#125;  <span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 子输出生命值() &#123; Console.WriteLine(生命值); 输出生命值(); &#125;  <span class="comment">//可以获取受保护的属性和受保护的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 玩家=<span class="keyword">new</span> 游戏类(<span class="number">17</span>);  <span class="comment">//实例化</span></span><br><span class="line">            Console.WriteLine(玩家.年龄);   <span class="comment">//可在类外调用属性并输出</span></span><br><span class="line">            玩家.输出信息();                <span class="comment">//可在类外调用函数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//在这里不能获取声明为私有类型的属性</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h2><ul><li>static 关键字，用于定义<strong>静态成员</strong>。静态成员属于类，而不属于类的实例，可以通过类名来访问</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> 游戏类</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> 静态属性 = <span class="number">0</span>;  <span class="comment">//声明静态属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 静态方法() &#123; Console.WriteLine(<span class="string">&quot;你好世界&quot;</span>); &#125;   <span class="comment">//声明静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(游戏类.静态属性);  <span class="comment">//通过类名直接调用属性</span></span><br><span class="line">            游戏类.静态方法();  <span class="comment">//通过类名直接调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="internal-程序集"><a href="#internal-程序集" class="headerlink" title="internal 程序集"></a>internal 程序集</h2><ul><li>internal 是一个访问修饰符，用于指定类成员的访问级别。当将类成员声明为 internal 时，表示该成员只能在当前程序集中访问，其他程序集无法访问。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> 玩家类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="built_in">int</span> 整数;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">void</span> 方法()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="readonly-只读"><a href="#readonly-只读" class="headerlink" title="readonly 只读"></a>readonly 只读</h2><ul><li>readonly 是一个修饰符，用于标识只读的成员变量。当将类成员变量声明为 readonly 时，表示该变量的值只能在声明或构造函数中进行赋值，一旦赋值后就不能再被修改。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">int</span> myInt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        myInt = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="virtual-重写"><a href="#virtual-重写" class="headerlink" title="virtual 重写"></a>virtual 重写</h2><ul><li>virtual 是一个修饰符，用于标识可以被子类重写的方法、属性或索引器。当将方法、属性或索引器声明为 virtual 时，表示该成员可以被子类重写。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyBaseClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDerivedClass</span> : <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyDerivedClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="override-重写"><a href="#override-重写" class="headerlink" title="override 重写"></a>override 重写</h2><ul><li>override 是一个修饰符，用于标识子类中重写父类方法、属性或索引器的成员。当将子类中的方法、属性或索引器声明为 override 时，表示该成员将会覆盖父类的同名成员。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyBaseClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDerivedClass</span> : <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyDerivedClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-抽象"><a href="#abstract-抽象" class="headerlink" title="abstract 抽象"></a>abstract 抽象</h2><ul><li>abstract 是一个修饰符，用于标识抽象类、抽象方法或抽象属性。抽象类是一种不能被实例化的类，它只能作为其他类的基类，并且它至少包含一个抽象方法。抽象方法是一种没有实现体的方法，它必须在子类中被实现。抽象属性是一种没有具体实现的属性，它必须在子类中被实现。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MyBaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 方法();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> 属性 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 游戏类 : <span class="title">MyBaseClass</span>      <span class="comment">//继承</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> 方法()       <span class="comment">//重写方法</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MyDerivedClass.MyMethod&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myProperty;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> 属性         <span class="comment">//重写属性</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> myProperty; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; myProperty = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 实例化=<span class="keyword">new</span> 游戏类();</span><br><span class="line">            实例化.方法();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h2><ul><li>interface 是一种特殊的类型，用于定义一个或多个方法、属性、索引器和事件，但是接口不能包含具体的实现。接口可以被其他类实现，以实现接口定义的方法和属性。一个类可以实现一个或多个接口，从而实现多态性和代码重用。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> 命名空间</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">void</span> 方法();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> 属性 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 游戏类 : <span class="title">IMyInterface</span>    <span class="comment">//继承</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> 方法()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MyClass.MyMethod&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myProperty;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> 属性</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> myProperty; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; myProperty = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> 主程序</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            游戏类 实例化=<span class="keyword">new</span> 游戏类();</span><br><span class="line">            实例化.方法();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sealed-密封"><a href="#sealed-密封" class="headerlink" title="sealed 密封"></a>sealed 密封</h2><ul><li>sealed 是一个修饰符，用于标识一个类或一个成员是密封的，即不能被其他类继承或重写</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MySealedClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MySealedClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="base-基类"><a href="#base-基类" class="headerlink" title="base 基类"></a>base 基类</h2><ul><li>base 关键字，用于访问基类的成员或调用基类的构造函数。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyBaseClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDerivedClass</span> : <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MyMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.MyMethod();  <span class="comment">// Call the base class method</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MyDerivedClass.MyMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-引用"><a href="#this-引用" class="headerlink" title="this 引用"></a>this 引用</h2><ul><li>this 关键字，用于引用当前对象，即包含当前代码的对象实例。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> myField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMyField</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.myField = <span class="keyword">value</span>;  <span class="comment">// 使用“this”来引用当前对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循坏关键字"><a href="#循坏关键字" class="headerlink" title="循坏关键字"></a>循坏关键字</h2><ul><li>break：程序只会跳出内层的循环，并不会影响到外层循环的执行。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// 当 i == 5 时跳过循环体的其余部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;循环结束&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>continue：会跳过当前循环中continue后面的代码，强迫开始下一次循环。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;  <span class="comment">// 当 i == 5 时跳过循环体的其余部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;循环结束&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>foreach：用于循环访问数组、集合或其他实现了 IEnumerable 接口的对象。使用 foreach 循环语句可以简化遍历数组或集合的代码，并提高程序的可读性和可维护性。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] nums = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> nums)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数关键字"><a href="#参数关键字" class="headerlink" title="参数关键字"></a>参数关键字</h2><ul><li>ref 当修改形参的值时，实参的值也会被修改。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = <span class="number">5</span>;</span><br><span class="line">ModifyNumber(<span class="keyword">ref</span> num);</span><br><span class="line">Console.WriteLine(num);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyNumber</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> number</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    number = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>out 用于传递参数的引用。和 ref 关键字类似，使用 out 关键字可以使方法能够修改传递给它的变量的值，但 out 关键字还有一个特点，要求在方法内必须将 out 参数赋值。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num1, num2;</span><br><span class="line">AddNumbers(<span class="number">5</span>, <span class="number">10</span>, <span class="keyword">out</span> num1, <span class="keyword">out</span> num2);</span><br><span class="line">Console.WriteLine(num1);</span><br><span class="line">Console.WriteLine(num2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNumbers</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="keyword">out</span> <span class="built_in">int</span> sum, <span class="keyword">out</span> <span class="built_in">int</span> product</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    product = a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托事件"><a href="#委托事件" class="headerlink" title="委托事件"></a>委托事件</h2><ol><li>声明委托</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> 委托();</span><br></pre></td></tr></table></figure><p>2.声明事件和发生事件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    public event 委托 信号;  <span class="comment">//声明事件</span></span><br><span class="line">    public <span class="type">void</span> 触发信号()   </span><br><span class="line">    &#123;</span><br><span class="line">        信号.Invoke();       <span class="comment">//发送信号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.接收信号</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Game game=<span class="keyword">new</span> Game();</span><br><span class="line">game.信号+=on_接收函数;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> on_接收函数()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li>声明接口</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> 接口</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> 函数<span class="number">1</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现接口</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Game</span>,接口  <span class="comment">//继承接口(链接结构)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 函数<span class="number">1</span>()  <span class="comment">//实现接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>Position &#x3D; Position with { Y &#x3D; 0 };</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li><p>yield return  返回下一个元素</p></li><li><p>yield break 终止迭代</p></li></ul><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 这里放置可能会抛出异常的代码  </span></span><br><span class="line">    <span class="comment">// 例如，尝试访问一个不存在的节点  </span></span><br><span class="line">    Node playerNode = GetNode&lt;Node&gt;(<span class="string">&quot;../Player&quot;</span>);  </span><br><span class="line">    <span class="comment">// 如果GetNode方法内部抛出了异常（比如因为找不到节点），那么异常将被下面的catch块捕获  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">catch</span> (Exception ex)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 打印异常信息和堆栈跟踪  </span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;发生了一个异常: &quot;</span> + ex.Message);  </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;堆栈跟踪: &quot;</span> + ex.StackTrace);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果你使用的是Godot引擎，并且想要在Godot的输出面板中显示这些信息，  </span></span><br><span class="line">    <span class="comment">// 你可能想要使用GD.PushError或者GD.PushWarning  </span></span><br><span class="line">    <span class="comment">// 注意：GD.PushError和GD.PushWarning是GDScript的方法，在C#中你需要使用GD.PrintErr或类似的方法（如果存在的话）  </span></span><br><span class="line">    <span class="comment">// GD.PrintErr(&quot;发生了一个异常: &quot; + ex.Message);  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者，如果你正在使用某种日志系统，你可以将错误信息记录到日志中  </span></span><br><span class="line">    <span class="comment">// MyLogger.LogError(&quot;发生了一个异常: &quot; + ex.Message);  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程（Process）是操作系统中的一个核心概念，它表示一个正在运行的程序实例。进程是系统进行资源分配和调度的基本单位，每个进程都拥有独立的内存空间和系统资源。以下是进程与线程、协程的主要区别：</p><ol><li><p><strong>资源占用</strong>：</p><ul><li>进程：每个进程都有独立的内存空间和系统资源，包括代码、数据、打开的文件描述符、信号处理器、栈和堆等。进程之间的切换涉及资源的重新分配和回收，因此开销相对较大。</li><li>线程：线程是进程内的一条执行路径，多个线程共享进程的资源（如内存空间和文件描述符），因此线程切换的开销较小。</li><li>协程：协程同样在进程内部运行，但它们并不由操作系统直接调度，而是由用户代码或协程库来控制。协程的切换开销非常小，因为它们不涉及系统资源的重新分配。</li></ul></li><li><p><strong>独立性</strong>：</p><ul><li>进程：进程具有独立性，一个进程的崩溃不会影响其他进程的执行。每个进程都有独立的地址空间，因此进程间的数据通信需要通过进程间通信（IPC）机制来实现。</li><li>线程：线程间共享进程的资源，因此一个线程的崩溃可能导致整个进程的崩溃。线程间的数据通信相对简单，因为它们可以直接访问共享的内存空间。</li><li>协程：协程在进程内部运行，它们之间可以共享进程的资源。协程间的数据通信通常通过用户代码或协程库来实现，例如通过消息传递或共享数据结构。</li></ul></li><li><p><strong>并发性</strong>：</p><ul><li>进程：由于进程切换的开销较大，因此并发运行的进程数量通常较少。操作系统通过调度算法来分配CPU时间片给各个进程，以实现并发执行。</li><li>线程：线程切换的开销较小，因此可以并发运行更多的线程。线程是轻量级的并发单位，适合处理高并发的场景。</li><li>协程：协程的切换开销非常小，因此可以并发运行大量的协程。协程的并发性由用户代码或协程库来控制，可以实现更细粒度的并发控制。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>进程：由于进程具有独立的内存空间和系统资源，因此进程间的数据隔离性较好，安全性较高。</li><li>线程：线程间共享进程的资源，因此需要注意线程安全问题，如数据竞争、死锁等。</li><li>协程：协程在进程内部运行，同样需要注意线程安全问题。但由于协程的切换由用户代码或协程库来控制，因此可以更容易地实现线程安全的并发编程。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li>进程：适用于需要独立运行、互不干扰的程序实例。例如，操作系统中的每个用户程序通常都以进程的形式运行。</li><li>线程：适用于需要并发执行多个任务、共享资源的场景。例如，多线程服务器可以同时处理多个客户端的请求。</li><li>协程：适用于需要高并发、低延迟的场景，如Web服务器、游戏服务器等。协程可以充分利用CPU资源，提高程序的响应性和吞吐量。</li></ul></li></ol><h1 id="概念和特性"><a href="#概念和特性" class="headerlink" title="概念和特性"></a>概念和特性</h1><p>编程中除了之前提到的多态性之外，还有许多重要的概念和特性。以下是一些常见的编程概念和特性，并参考了提供的文章中的相关信息：</p><ol><li><p><strong>数据结构</strong>：</p><ul><li>数据结构是组织和存储数据的方式，以便有效地访问和修改这些数据。</li><li>常见的数据结构包括数组、链表、栈、队列、树（如二叉树、红黑树）、图等。</li><li>每种数据结构都有其特定的性质和应用场景，如数组的插入快、存取快但查找和删除慢，链表的插入和删除快但查找慢等。</li></ul></li><li><p><strong>算法</strong>：</p><ul><li>算法是解决特定问题的一系列步骤或规则。</li><li>算法的基本特性包括输入、输出、有穷性、确定性和可行性。</li><li>输入是算法开始前需要的数据，输出是算法执行后产生的结果。</li><li>有穷性表示算法在执行有限的步骤后会终止。</li><li>确定性意味着算法的每一步都是明确规定的，没有歧义。</li><li>可行性则要求算法的每一步都是可行的，即每一步都能在有限时间内完成。</li></ul></li><li><p><strong>封装</strong>：</p><ul><li>封装是面向对象编程的三大基本特性之一。</li><li>它通过隐藏对象的属性和方法的具体实现细节，仅对外提供公共的访问方式，来保护对象的内部状态和数据不被随意修改，提高代码的安全性和可维护性。</li></ul></li><li><p><strong>继承</strong>：</p><ul><li>继承是面向对象编程中代码重用的主要手段之一。</li><li>它允许我们定义一个通用的类（父类或基类），然后创建它的子类来继承其属性和方法。子类可以添加新的属性或方法，或者重写父类的方法来实现多态性。</li></ul></li><li><p><strong>接口</strong>：</p><ul><li>接口是面向对象编程中定义行为规范的一种机制。</li><li>它定义了一组方法的签名，但不包含方法的实现。任何类只要实现了接口中定义的方法，就可以被视为该接口的实现类。</li><li>接口可以提高代码的灵活性和可扩展性，使得不同的类可以遵循相同的规范进行通信。</li></ul></li><li><p><strong>抽象类</strong>：</p><ul><li>抽象类是一种特殊的类，它不能被实例化，但可以定义抽象方法和非抽象方法。</li><li>抽象方法只有方法的签名，没有具体的实现。子类必须实现抽象类中的所有抽象方法才能被实例化。</li><li>抽象类通常用于定义一组具有共同特性的对象的公共属性和方法。</li></ul></li><li><p><strong>多态性</strong>（已详细讨论）：</p><ul><li>多态性是面向对象编程的重要特性之一。它允许我们使用父类类型的变量来引用子类对象，并调用子类对象的方法。这样可以在运行时动态地确定要调用的方法，提高了代码的灵活性和可扩展性。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>异常处理是编程中用于处理运行时错误的一种机制。</li><li>当程序遇到无法处理的错误时，会抛出一个异常。程序可以使用try-catch块来捕获并处理这些异常，以防止程序崩溃或产生不可预期的结果。</li></ul></li><li><p><strong>泛型</strong>：</p><ul><li>泛型是编程语言提供的一种支持参数化类型的机制。</li><li>通过使用泛型，我们可以编写更加灵活和可重用的代码，减少类型转换的错误和不必要的代码冗余。</li></ul></li></ol><p>这些概念和特性在编程中起着至关重要的作用，它们共同构成了编程语言的基础和框架，使得我们能够更加高效、安全地编写出高质量的代码。</p><p>在编程中，除了之前提到的概念和特性外，还有以下一些重要的概念和特性，它们对于编写高效、健壮和可维护的代码至关重要：</p><ol><li><p><strong>数据类型</strong>：</p><ul><li>数据类型是编程中的一个基本概念，它定义了变量或数据元素可以持有的值的种类。</li><li>常见的数据类型包括整数（int）、浮点数（float）、字符串（string）、布尔值（boolean）等。</li><li>了解不同数据类型的特性以及如何在程序中使用它们，是编写正确程序的重要前提。</li></ul></li><li><p><strong>源文件（Source File）</strong>：</p><ul><li>在开发软件的过程中，源文件是用于保存编写好的代码的文件。</li><li>源文件使得代码不会丢失，能够被编译器找到，并最终转化为可执行文件。</li><li>每种编程语言的源文件都有特定的后缀，如C语言的源文件后缀是.c，C++语言的是.cpp，Python的是.py等。</li></ul></li><li><p><strong>简洁性和明确性</strong>：</p><ul><li>编程语言的语法应简洁而明确，以降低学习难度，提高代码的可读性。</li><li>简洁性意味着语法规则不应过于复杂，避免不必要的冗余。</li><li>明确性则要求语法规则清晰，减少歧义，使代码更易于理解和维护。</li></ul></li><li><p><strong>强类型系统</strong>：</p><ul><li>强类型系统能够在编译时检测出许多类型错误，防止运行时错误，提高代码的健壮性。</li><li>它还能提供更好的代码补全和重构工具，提高开发效率。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>现代编程语言应内置对安全的支持，例如对内存安全的保护、对并发和异步操作的安全控制等。</li><li>这有助于减少程序员的错误，防止安全漏洞。</li></ul></li><li><p><strong>跨平台兼容性</strong>：</p><ul><li>跨平台兼容性指的是编程语言编写的程序能够在不同的操作系统或硬件平台上运行而无需大量修改。</li><li>这通常通过编译器或解释器来实现，使得程序能够覆盖更广泛的用户基础。</li></ul></li><li><p><strong>垃圾回收机制</strong>：</p><ul><li>自动垃圾回收是管理内存的重要机制，可以防止内存泄漏和无效引用。</li><li>它能够降低程序员的负担，提高程序的稳定性。</li></ul></li><li><p><strong>易读性和易写性</strong>：</p><ul><li>易读性指的是代码的清晰度和直观性，编程语言应该设计得易于人们阅读和理解。</li><li>易写性则包括语言的易学性和易维护性，编程语言应当容易上手，并提供丰富的库和框架来支持快速开发。</li></ul></li><li><p><strong>抽象性</strong>：</p><ul><li>抽象性是编程语言的重要特性之一，它允许开发者创建与硬件之间的抽象层，从而提高代码的通用性和灵活性。</li><li>抽象性还表现在数据类型、控制结构等方面的抽象，有助于程序员更加简明地表达计算过程，降低编程的难度。</li></ul></li><li><p><strong>可移植性</strong>：</p><ul><li>可移植性是指编程语言编写的程序能够在不同的环境和平台间进行迁移的能力。</li><li>高可移植性的编程语言能够减少为适配不同系统环境所付出的工作量，从而提高开发效率。</li></ul></li><li><p><strong>高效性</strong>：</p><ul><li>高效性涉及编程语言的执行速度和资源消耗。</li><li>优秀的编程语言应生成高效的代码，充分利用计算资源，实现快速执行和高效内存使用。</li></ul></li></ol><p>以上概念和特性是编程中非常重要的组成部分，它们共同构成了编程语言的基础和框架，为开发者提供了强大的工具来构建高质量的软件系统。</p><h1 id="游戏开发语言熟练度"><a href="#游戏开发语言熟练度" class="headerlink" title="游戏开发语言熟练度"></a>游戏开发语言熟练度</h1><p>游戏开发程序员需要具备的编程能力和技能包括熟练掌握至少一种游戏编程语言、理解游戏引擎原理和工作机制、精通数据结构与算法、拥有良好的数学和物理基础、以及持续的学习和适应新技术的能力。在这些基础上，<strong>精通数据结构与算法</strong>是不可或缺的，因为游戏开发中常常涉及复杂的问题解决，效率优化，以及多变的功能实现，而这一切的基础都是坚实的算法和数据结构知识。</p><p>一、编程语言掌握</p><p>游戏开发程序员首先需要熟练掌握至少一种常用的游戏编程语言。C++因其高性能和大型游戏项目中频繁使用而成为游戏行业的主流语言。C#也因为其与Unity游戏引擎的紧密结合而受到广泛欢迎。Python、Java和JavaScript等其他语言也在某些游戏开发环境中有其应用。</p><ul><li>熟练使用C++：C++以其接近硬件的操作能力和高性能，在游戏开发中尤其是AAA游戏制作中占有重要位置。</li><li>掌握C#和Unity：Unity是目前非常流行的游戏开发平台，而C#是Unity的主要脚本语言，因此熟练C#对Unity游戏开发者至关重要。</li></ul><p>二、游戏引擎使用</p><p>游戏引擎是游戏开发的核心，程序员必须理解其原理并能熟练使用至少一种游戏引擎。不同的游戏引擎有其特色和适应的游戏类型，如Unreal Engine擅长制作视觉冲击力强的3D游戏，而Unity则在2D和3D游戏开发上都有很好的表现。</p><ul><li>深入理解引擎架构：了解游戏引擎的底层逻辑、渲染流程和物理仿真等，可以帮助开发者更高效地使用引擎。</li><li>熟悉引擎提供的工具及API：熟练掌握游戏引擎提供的各种工具和API能大幅提升开发效率和游戏质量。</li></ul><p>三、数学和物理基础</p><p>游戏开发不仅需要良好的编程技术，还需要扎实的数学和物理知识，尤其是线性代数、几何和动力学等。3D图形编程需要使用矩阵变换、向量运算、光线追踪等数学工具，而物理引擎的开发和调试则需要运动学和力学的知识。</p><ul><li>掌握线性代数和几何学：这些数学知识是3D游戏图形编程的基础，负责描述和变换游戏世界中的对象。</li><li>理解动力学原理：游戏中的物体运动，碰撞处理等需要使用到牛顿运动定律等力学原理。</li></ul><p>四、数据结构与算法</p><p>游戏开发程序员必须熟练应用数据结构和算法。游戏内部复杂数据的存取、游戏场景的快速检索、<a href="https://docs.pingcode.com/blog/59162.html">AI</a>的路径查找等都需要高效的数据结构和算法支持。</p><ul><li>掌握常用数据结构：比如数组、链表、堆、哈希表、图和树等，这些都是处理游戏数据的基本工具。</li><li>精通算法设计：这包括但不限于排序、搜索、路径查找（如A*算法）、动态规划等，在游戏开发中有着广泛应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP关键字</title>
      <link href="/2025/03/15/cpp/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2025/03/15/cpp/%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h1><ul><li><p>🔵未了解</p></li><li><p>🔴了解</p></li></ul><ul><li><input disabled="" type="checkbox"> <table><thead><tr><th>数据类型</th><th>控制</th><th>存储</th><th>类</th><th>转换</th><th>异常</th></tr></thead><tbody><tr><td><strong>int</strong>  整型🔴</td><td><strong>if</strong>  如果🔴</td><td><strong>auto</strong> 字典推导🔴</td><td><strong>class</strong>类🔴</td><td><strong>const_cas</strong>类型转换🔵</td><td><strong>catch</strong>异常处理🔵</td></tr><tr><td><strong>long</strong>  长整型🔴</td><td><strong>else</strong>  否则🔴</td><td><strong>static</strong>  静态🔴</td><td><strong>template</strong>模🔴板</td><td><strong>dynamic_cast</strong> 类型转换操作符🔵</td><td><strong>throw</strong>抛出异常🔵</td></tr><tr><td><strong>float</strong> 浮点🔴</td><td><strong>switch</strong>判断🔴</td><td><strong>extern</strong>其他文件定义🔵</td><td><strong>friend</strong>友元🔴</td><td><strong>reinterpret_cast</strong>类型转换🔵</td><td><strong>try</strong>异常</td></tr><tr><td><strong>double</strong>  双精度🔴</td><td><strong>case</strong>  或者🔴</td><td><strong>mutable</strong>在常量函数修改属性🔴</td><td><strong>union</strong> 联合体🔴</td><td><strong>static_cast</strong>型转换操作符之🔵</td><td></td></tr><tr><td><strong>char</strong>  字符🔴</td><td><strong>default</strong> switch的否则🔴</td><td><strong>sizeof</strong>  长度🔴</td><td>**struct **结构体🔴</td><td></td><td></td></tr><tr><td><strong>wchar_t</strong>宽字符类型</td><td><strong>for</strong>  循坏🔴</td><td><strong>this</strong>  特殊指针🔴</td><td><strong>new</strong>指向🔴</td><td></td><td></td></tr><tr><td><strong>public</strong>公开🔴</td><td><strong>break</strong> 跳过🔴</td><td></td><td><strong>delete</strong>释放🔴</td><td></td><td></td></tr><tr><td><strong>protected</strong>保护🔴</td><td><strong>continue</strong>跳过循坏</td><td></td><td><strong>operator</strong>重载操作符🔵</td><td></td><td></td></tr><tr><td><strong>private</strong>私有🔴</td><td><strong>goto</strong>跳转🔵</td><td></td><td><strong>virtual</strong>重写🔴override</td><td></td><td></td></tr><tr><td><strong>void</strong>函数🔴</td><td><strong>return</strong>  返回🔴</td><td></td><td><strong>typeid</strong>确定类型🔵</td><td></td><td></td></tr><tr><td><strong>const</strong>常量🔴</td><td><strong>do</strong>至少会执行一次循环</td><td><strong>register</strong> 存储类说明符(弃用)🔵</td><td><strong>typename</strong>模板🔴</td><td></td><td></td></tr><tr><td><strong>enum</strong>  枚举🔴</td><td></td><td><strong>export</strong>指定模板实例化(弃用)🔵</td><td></td><td></td><td></td></tr><tr><td><strong>true</strong>  真🔴</td><td><strong>namespace</strong>  命名空间🔴</td><td><strong>inline</strong> 内联函数</td><td></td><td></td><td></td></tr><tr><td><strong>false</strong>假的🔴</td><td><strong>using</strong>  命名🔴</td><td><strong>volatile</strong>未知🔵</td><td></td><td></td><td></td></tr><tr><td><strong>bool</strong>  布尔🔴</td><td><strong>typedef</strong>新名字🔴</td><td>explicit  当构造函数被声明为<code>explicit</code>时，它不能用于隐式类型转换🔵</td><td></td><td></td><td></td></tr><tr><td><strong>unsigned</strong>用于声明无符号整数类型🔴</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>signed</strong>符号类型🔴</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>short</strong>短整型变量🔴</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>asm</strong>嵌入汇编语言代码到C++🔴</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></li></ul><p><img src="/img/sss5.png" alt="是"></p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table><thead><tr><th align="center">序号</th><th align="center">关键字</th><th align="center">中文翻译</th><th align="center">序号</th><th align="center">关键字</th><th align="center">中文翻译</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>alignas</code></td><td align="center">对齐指定</td><td align="center">15</td><td align="center"><code>const_cast</code></td><td align="center">常量转换</td></tr><tr><td align="center">2</td><td align="center"><code>alignof</code></td><td align="center">获取对齐</td><td align="center">16</td><td align="center"><code>continue</code></td><td align="center">继续</td></tr><tr><td align="center">3</td><td align="center"><code>asm</code></td><td align="center">汇编</td><td align="center">17</td><td align="center"><code>decltype</code></td><td align="center">声明类型</td></tr><tr><td align="center">4</td><td align="center"><code>auto</code></td><td align="center">自动类型推断</td><td align="center">18</td><td align="center"><code>default</code></td><td align="center">默认</td></tr><tr><td align="center">5</td><td align="center"><code>bool</code></td><td align="center">布尔型</td><td align="center">19</td><td align="center"><code>delete</code></td><td align="center">删除</td></tr><tr><td align="center">6</td><td align="center"><code>break</code></td><td align="center">跳出循环</td><td align="center">20</td><td align="center"><code>do</code></td><td align="center">循环体</td></tr><tr><td align="center">7</td><td align="center"><code>case</code></td><td align="center">情况</td><td align="center">21</td><td align="center"><code>double</code></td><td align="center">双精度浮点型</td></tr><tr><td align="center">8</td><td align="center"><code>catch</code></td><td align="center">捕获</td><td align="center">22</td><td align="center"><code>dynamic_cast</code></td><td align="center">动态转换</td></tr><tr><td align="center">9</td><td align="center"><code>char</code></td><td align="center">字符型</td><td align="center">23</td><td align="center"><code>else</code></td><td align="center">否则</td></tr><tr><td align="center">10</td><td align="center"><code>char16_t</code></td><td align="center">16位字符型</td><td align="center">24</td><td align="center"><code>enum</code></td><td align="center">枚举</td></tr><tr><td align="center">11</td><td align="center"><code>char32_t</code></td><td align="center">32位字符型</td><td align="center">25</td><td align="center"><code>explicit</code></td><td align="center">显式</td></tr><tr><td align="center">12</td><td align="center"><code>class</code></td><td align="center">类</td><td align="center">26</td><td align="center"><code>export</code></td><td align="center">导出</td></tr><tr><td align="center">13</td><td align="center"><code>const</code></td><td align="center">常量</td><td align="center">27</td><td align="center"><code>extern</code></td><td align="center">外部</td></tr><tr><td align="center">14</td><td align="center"><code>constexpr</code></td><td align="center">常量表达式</td><td align="center">28</td><td align="center"><code>false</code></td><td align="center">假</td></tr><tr><td align="center">29</td><td align="center"><code>float</code></td><td align="center">浮点型</td><td align="center">43</td><td align="center"><code>protected</code></td><td align="center">受保护的</td></tr><tr><td align="center">30</td><td align="center"><code>for</code></td><td align="center">循环</td><td align="center">44</td><td align="center"><code>public</code></td><td align="center">公有的</td></tr><tr><td align="center">31</td><td align="center"><code>friend</code></td><td align="center">友元</td><td align="center">45</td><td align="center"><code>register</code></td><td align="center">寄存器</td></tr><tr><td align="center">32</td><td align="center"><code>goto</code></td><td align="center">跳转</td><td align="center">46</td><td align="center"><code>reinterpret_cast</code></td><td align="center">重新解释转换</td></tr><tr><td align="center">33</td><td align="center"><code>if</code></td><td align="center">如果</td><td align="center">47</td><td align="center"><code>return</code></td><td align="center">返回</td></tr><tr><td align="center">34</td><td align="center"><code>inline</code></td><td align="center">内联</td><td align="center">48</td><td align="center"><code>short</code></td><td align="center">短整型</td></tr><tr><td align="center">35</td><td align="center"><code>int</code></td><td align="center">整型</td><td align="center">49</td><td align="center"><code>signed</code></td><td align="center">有符号</td></tr><tr><td align="center">36</td><td align="center"><code>long</code></td><td align="center">长整型</td><td align="center">50</td><td align="center"><code>sizeof</code></td><td align="center">字节大小</td></tr><tr><td align="center">37</td><td align="center"><code>mutable</code></td><td align="center">可变的</td><td align="center">51</td><td align="center"><code>static</code></td><td align="center">静态</td></tr><tr><td align="center">38</td><td align="center"><code>namespace</code></td><td align="center">命名空间</td><td align="center">52</td><td align="center"><code>static_assert</code></td><td align="center">静态断言</td></tr><tr><td align="center">39</td><td align="center"><code>new</code></td><td align="center">新建</td><td align="center">53</td><td align="center"><code>static_cast</code></td><td align="center">静态转换</td></tr><tr><td align="center">40</td><td align="center"><code>noexcept</code></td><td align="center">不抛出异常</td><td align="center">54</td><td align="center"><code>struct</code></td><td align="center">结构体</td></tr><tr><td align="center">41</td><td align="center"><code>nullptr</code></td><td align="center">空指针</td><td align="center">55</td><td align="center"><code>switch</code></td><td align="center">开关</td></tr><tr><td align="center">42</td><td align="center"><code>operator</code></td><td align="center">操作符</td><td align="center">56</td><td align="center"><code>template</code></td><td align="center">模板</td></tr><tr><td align="center">57</td><td align="center"><code>private</code></td><td align="center">私有的</td><td align="center">62</td><td align="center"><code>try</code></td><td align="center">尝试</td></tr><tr><td align="center">58</td><td align="center"><code>this</code></td><td align="center">当前对象指针</td><td align="center">63</td><td align="center"><code>typedef</code></td><td align="center">类型定义</td></tr><tr><td align="center">59</td><td align="center"><code>thread_local</code></td><td align="center">线程局部</td><td align="center">64</td><td align="center"><code>typeid</code></td><td align="center">类型ID</td></tr><tr><td align="center">60</td><td align="center"><code>throw</code></td><td align="center">抛出</td><td align="center">65</td><td align="center"><code>typename</code></td><td align="center">类型名称</td></tr><tr><td align="center">61</td><td align="center"><code>true</code></td><td align="center">真</td><td align="center">66</td><td align="center"><code>union</code></td><td align="center">联合</td></tr><tr><td align="center">67</td><td align="center"><code>using</code></td><td align="center">使用</td><td align="center">71</td><td align="center"><code>volatile</code></td><td align="center">易变的</td></tr><tr><td align="center">68</td><td align="center"><code>virtual</code></td><td align="center">虚函数</td><td align="center">72</td><td align="center"><code>wchar_t</code></td><td align="center">宽字符型</td></tr><tr><td align="center">69</td><td align="center"><code>void</code></td><td align="center">无类型</td><td align="center">73</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">70</td><td align="center"><code>while</code></td><td align="center">当</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int-整型"><a href="#int-整型" class="headerlink" title="int 整型"></a>int 整型</h3><ul><li>整型的数据类型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> 数据=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="long-长整型"><a href="#long-长整型" class="headerlink" title="long 长整型"></a>long 长整型</h3><ul><li>长整型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> 数据=<span class="number">100000</span>;</span><br></pre></td></tr></table></figure><h3 id="short-短整型"><a href="#short-短整型" class="headerlink" title="short 短整型"></a>short 短整型</h3><ul><li>短整型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> 数据=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="floa-字符串"><a href="#floa-字符串" class="headerlink" title="floa 字符串"></a>floa 字符串</h3><ul><li>字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> 数据=<span class="number">3.1415726</span></span><br></pre></td></tr></table></figure><h3 id="double-双精度浮点型"><a href="#double-双精度浮点型" class="headerlink" title="double 双精度浮点型"></a>double 双精度浮点型</h3><ul><li>浮点型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> 数据=<span class="number">3.1415926</span></span><br></pre></td></tr></table></figure><h3 id="char-字符型"><a href="#char-字符型" class="headerlink" title="char 字符型"></a>char 字符型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> 字符=<span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="wchar-t-宽字符类型"><a href="#wchar-t-宽字符类型" class="headerlink" title="wchar_t 宽字符类型"></a>wchar_t 宽字符类型</h3><ul><li>wchar_t是一种宽字符类型，用于表示宽字符数据。它的大小通常是2或4个字节，可以存储更广泛的字符集，包括Unicode字符</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> ch = <span class="string">L&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">wchar_t</span> str[] = <span class="string">L&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="bool-布尔"><a href="#bool-布尔" class="headerlink" title="bool 布尔"></a>bool 布尔</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> 开关=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="true-整的"><a href="#true-整的" class="headerlink" title="true 整的"></a>true 整的</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> 开关=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="fales-假的"><a href="#fales-假的" class="headerlink" title="fales 假的"></a>fales 假的</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> 开关=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="enum-枚举"><a href="#enum-枚举" class="headerlink" title="enum 枚举"></a>enum 枚举</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 选择&#123;A,B,C,D&#125;;</span><br></pre></td></tr></table></figure><h3 id="unsgned-无符号"><a href="#unsgned-无符号" class="headerlink" title="unsgned 无符号"></a>unsgned 无符号</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsgned 数据=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="signed-有符号"><a href="#signed-有符号" class="headerlink" title="signed 有符号"></a>signed 有符号</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> 数据=<span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h3 id="asm-嵌入汇编"><a href="#asm-嵌入汇编" class="headerlink" title="asm 嵌入汇编"></a>asm 嵌入汇编</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">asm</span> (<span class="string">&quot;Assembler&quot;</span>);<span class="comment">//Assenmbler指汇编指令</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *你会看到“asm”变成了关键字样式的字体</span></span><br><span class="line"><span class="comment"> *汇编指令由字符串方式填在括号里</span></span><br><span class="line"><span class="comment"> *有的编译器会把嵌入的汇编指令单独放在一个文件里编译</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//另外插入多条汇编语句：</span></span><br><span class="line"><span class="built_in">asm</span>(</span><br><span class="line"><span class="string">&quot;mov eax,1\n&quot;</span></span><br><span class="line"><span class="string">&quot;leave\n&quot;</span></span><br><span class="line"><span class="string">&quot;ret\n&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//Intel和AT&amp;T转换。</span></span><br><span class="line"><span class="built_in">asm</span>(<span class="string">&quot;.intel_syntax\n&quot;</span>)<span class="comment">//Intel</span></span><br><span class="line"><span class="built_in">asm</span>(<span class="string">&quot;.att_syntax\n&quot;</span>);<span class="comment">//AT&amp;T</span></span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h3 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h3><ul><li>const修饰的属性无法被修改</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> 数据=<span class="number">10</span>;  <span class="comment">//声明一个常量数据</span></span><br><span class="line">数据=<span class="number">20</span>;   <span class="comment">//此处会报错</span></span><br></pre></td></tr></table></figure><h3 id="volatile-随意改变"><a href="#volatile-随意改变" class="headerlink" title="volatile 随意改变"></a>volatile 随意改变</h3><h3 id="mutable-在常量中修改属性"><a href="#mutable-在常量中修改属性" class="headerlink" title="mutable 在常量中修改属性"></a>mutable 在常量中修改属性</h3><ul><li>用于修饰变量,此变量可以在函数常量中修改修饰过的属性</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> key)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    x=key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a>static 静态</h3><ul><li>未知</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">char</span> *<span class="title">num_check</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (v % <span class="number">2</span> &gt; <span class="number">0</span>) ? <span class="string">&quot;奇&quot;</span> : <span class="string">&quot;偶&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d   %s\n&quot;</span>, i, <span class="built_in">num_check</span>(i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sizeof-获取大小"><a href="#sizeof-获取大小" class="headerlink" title="sizeof 获取大小"></a>sizeof 获取大小</h3><ul><li>获取数据的长度</li></ul><h3 id="this-特殊指针"><a href="#this-特殊指针" class="headerlink" title="this 特殊指针"></a>this 特殊指针</h3><ul><li>特殊指针</li></ul><h3 id="auto-推导"><a href="#auto-推导" class="headerlink" title="auto 推导"></a>auto 推导</h3><ul><li>类似var  在声明变量时自动转换类型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x=<span class="number">60</span>;     <span class="comment">//x为int类型</span></span><br><span class="line"><span class="keyword">auto</span> y=<span class="string">&quot;哈哈&quot;</span>   <span class="comment">//y为字符数组</span></span><br></pre></td></tr></table></figure><h3 id="public-公开的"><a href="#public-公开的" class="headerlink" title="public 公开的"></a>public 公开的</h3><ul><li>public修饰的属性和方法可在任何地方访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:     <span class="comment">//公开的</span></span><br><span class="line">        <span class="type">int</span> x;   <span class="comment">//可以在其他类访问</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;x&lt;&lt;endl;  <span class="comment">//在类外访问</span></span><br></pre></td></tr></table></figure><h3 id="private-私有的"><a href="#private-私有的" class="headerlink" title="private 私有的"></a>private 私有的</h3><ul><li>private修饰的属性和方法只可以在类内访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:     <span class="comment">//私有的</span></span><br><span class="line">        <span class="type">int</span> x;   <span class="comment">//不可以在其他类外或者函数访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;x&lt;&lt;endl;  <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure><h3 id="protected-受保护的"><a href="#protected-受保护的" class="headerlink" title="protected 受保护的"></a>protected 受保护的</h3><ul><li>protected修饰的属性可以在子类访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> 子类:类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">void</span> 方法()</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extern-其它文件定义"><a href="#extern-其它文件定义" class="headerlink" title="extern 其它文件定义"></a>extern 其它文件定义</h3><ul><li>在其他文件等于在另一个文件实现</li></ul><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="if-如果"><a href="#if-如果" class="headerlink" title="if 如果"></a>if 如果</h3><ul><li>判断括号内容,如果为真则执行大括号的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">50</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//此处代码可执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//此处代码不会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="else-否则"><a href="#else-否则" class="headerlink" title="else 否则"></a>else 否则</h3><ul><li>多个判断,如果成立就执行</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">30</span>)&#123;</span><br><span class="line">    <span class="comment">//不成立不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-选择判断"><a href="#switch-选择判断" class="headerlink" title="switch 选择判断"></a>switch 选择判断</h3><ul><li>判断选择执行</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> op;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">switch</span>(op)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="case-选择"><a href="#case-选择" class="headerlink" title="case 选择"></a>case 选择</h3><h3 id="default-否则"><a href="#default-否则" class="headerlink" title="default 否则"></a>default 否则</h3><h3 id="break-打断"><a href="#break-打断" class="headerlink" title="break 打断"></a>break 打断</h3><h3 id="continue-跳过"><a href="#continue-跳过" class="headerlink" title="continue 跳过"></a>continue 跳过</h3><ul><li>跳过成立的条件 ,执行下一个循坏</li><li>问题:给老婆做饭,星期3没空打印出忙了没做</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;忙了没做&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;给老婆做饭的第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;天&quot;</span>&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-至少循坏1次"><a href="#do-至少循坏1次" class="headerlink" title="do 至少循坏1次"></a>do 至少循坏1次</h3><ul><li>无条件提前执行</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>  <span class="comment">//程序开始执行一次</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    i++;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">20</span>);  <span class="comment">//如果i小于等于20就退出</span></span><br></pre></td></tr></table></figure><h3 id="goto-跳转"><a href="#goto-跳转" class="headerlink" title="goto 跳转"></a>goto 跳转</h3><ul><li>跳转到标记出</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">op:<span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">15</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> op;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    i++;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="return-返回"><a href="#return-返回" class="headerlink" title="return 返回"></a>return 返回</h3><ul><li>return数据或者跳出</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key==null) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//如果key等于空则跳出函数不再执行往下的代码并返回一个值;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key;      <span class="comment">//在此处跳出函数并返回一个值;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h3><h3 id="templata-模板"><a href="#templata-模板" class="headerlink" title="templata 模板"></a>templata 模板</h3><h3 id="typename-模板"><a href="#typename-模板" class="headerlink" title="typename 模板"></a>typename 模板</h3><h3 id="friend-友元"><a href="#friend-友元" class="headerlink" title="friend 友元"></a>friend 友元</h3><ul><li>可以在其他类访问指定私有函数</li></ul><h3 id="union-联合体"><a href="#union-联合体" class="headerlink" title="union 联合体"></a>union 联合体</h3><ul><li>共用内存</li></ul><h3 id="virtual-重写"><a href="#virtual-重写" class="headerlink" title="virtual 重写"></a>virtual 重写</h3><ul><li>重写 override</li></ul><h3 id="operator-重载"><a href="#operator-重载" class="headerlink" title="operator 重载"></a>operator 重载</h3><ul><li>重载</li></ul><h3 id="typeid-确定类型"><a href="#typeid-确定类型" class="headerlink" title="typeid 确定类型"></a>typeid 确定类型</h3><ul><li>确定类型</li></ul><h3 id="new-返回指针"><a href="#new-返回指针" class="headerlink" title="new 返回指针"></a>new 返回指针</h3><ul><li>返回堆指针</li></ul><h3 id="delete-释放"><a href="#delete-释放" class="headerlink" title="delete 释放"></a>delete 释放</h3><ul><li>释放数据</li></ul><h3 id="struct-结构体"><a href="#struct-结构体" class="headerlink" title="struct 结构体"></a>struct 结构体</h3><ul><li>声明结构体,与类类似</li></ul><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="const-cas"><a href="#const-cas" class="headerlink" title="const_cas"></a>const_cas</h3><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="catch-异常处理"><a href="#catch-异常处理" class="headerlink" title="catch 异常处理"></a>catch 异常处理</h3><h3 id="throw-抛出异常"><a href="#throw-抛出异常" class="headerlink" title="throw 抛出异常"></a>throw 抛出异常</h3><h3 id="try-异常"><a href="#try-异常" class="headerlink" title="try 异常"></a>try 异常</h3>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImGUI</title>
      <link href="/2025/03/15/cpp/inGUI/"/>
      <url>/2025/03/15/cpp/inGUI/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><ul><li>ImGui库是一个强大的C++GUI开源库,可用于开发多种可视化程序</li></ul><h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h2 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h2><ul><li>源码声明</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ImGui::Begin</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">bool</span>* p_open, ImGuiWindowFlags flags)</span>  <span class="comment">//创建窗口</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ImGui::End</span><span class="params">()</span>  <span class="comment">//结束</span></span></span><br></pre></td></tr></table></figure><ul><li>name 窗口名</li><li>p_open 布尔指针,控制窗口显示</li><li>ImGuiWindowFlags 标志</li></ul><h2 id="ImGuiWindowFlags"><a href="#ImGuiWindowFlags" class="headerlink" title="ImGuiWindowFlags"></a>ImGuiWindowFlags</h2><table><thead><tr><th>Flag</th><th>窗口没有特殊行为或外观。</th></tr></thead><tbody><tr><td>ImGuiWindowFlags_None</td><td>窗口没有特殊行为或外观。</td></tr><tr><td>ImGuiWindowFlags_NoTitleBar</td><td>窗口没有标题栏。</td></tr><tr><td>ImGuiWindowFlags_NoResize</td><td>禁用窗口的调整大小功能。</td></tr><tr><td>ImGuiWindowFlags_NoScrollbar</td><td>隐藏水平和&#x2F;或垂直滚动条。</td></tr><tr><td>ImGuiWindowFlags_NoCollapse</td><td>窗口不能通过双击其标题栏或按钮来折叠&#x2F;展开。</td></tr><tr><td>ImGuiWindowFlags_AlwaysAutoResize</td><td>窗口总是自动调整大小以适应其内容。</td></tr><tr><td>ImGuiWindowFlags_NoBringToFrontOnFocus</td><td>当窗口获得焦点时，不将其带到其他窗口前面。</td></tr><tr><td>ImGuiWindowFlags_NoMove</td><td>禁用窗口的移动功能。</td></tr><tr><td>ImGuiWindowFlags_NoBackground</td><td>窗口没有背景色（仅显示内容，没有边框或背景）。</td></tr><tr><td>ImGuiWindowFlags_NoSavedSettings</td><td>不保存窗口的位置、大小或折叠状态到用户配置中。</td></tr><tr><td>ImGuiWindowFlags_MenuBar</td><td>在窗口的顶部有一个菜单栏。</td></tr><tr><td>ImGuiWindowFlags_HorizontalScrollbar</td><td>始终显示水平滚动条（即使内容不需要滚动）。</td></tr><tr><td>ImGuiWindowFlags_NoFocusOnAppearing</td><td>当窗口首次出现时，不给予它焦点。</td></tr><tr><td>ImGuiWindowFlags_NoNavInputs</td><td>窗口不接收导航输入（如键盘上的箭头键或 Tab 键）。</td></tr></tbody></table><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><table><thead><tr><th>实现</th><th>声明</th><th>详细</th></tr></thead><tbody><tr><td>文本</td><td><code>ImGui::Text(const char* fmt)</code></td><td>1.<code>fmt</code>文本</td></tr><tr><td>显示带有标签的文本</td><td><code>ImGui::LabelText(const char* label, const char* fmt, ...)</code></td><td></td></tr><tr><td>按钮</td><td><code>ImGui::Button(const char* label, const ImVec2&amp; size_arg)</code></td><td>1.<code>lable</code>:文本<br />2.<code>size_arg </code>:大小</td></tr><tr><td>创建一个文本输入框</td><td><code>ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiTextEditCallback callback = NULL, void* user_data = NULL)</code></td><td></td></tr><tr><td>创建一个浮点数滑动条</td><td><code>ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = &quot;%.3f&quot;, ImGuiSliderFlags flags = 0)</code></td><td></td></tr><tr><td>建一个整数滑动条</td><td><code>ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = &quot;%d&quot;, ImGuiSliderFlags flags = 0)</code></td><td></td></tr><tr><td>创建一个复选框</td><td><code>ImGui::Checkbox(const char* label, bool* v)</code></td><td></td></tr><tr><td>创建一个单选按钮（通常与<code>ImGui::RadioButton</code>的连续调用结合使用，以创建单选按钮组）</td><td><code>ImGui::RadioButton(const char* label, bool active)</code></td><td></td></tr><tr><td>创建一个列表框</td><td><code>ImGui::ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items = -1)</code></td><td></td></tr><tr><td>创建一个RGB颜色选择器</td><td><code>ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0)</code></td><td></td></tr><tr><td>创建一个树节点</td><td><code>ImGui::TreeNode(const char* label)</code></td><td></td></tr><tr><td>创建一个进度条</td><td><code>ImGui::ProgressBar(float fraction, const ImVec2&amp; size_arg = ImVec2(-1,0), const char* overlay = NULL)</code></td><td></td></tr><tr><td>创建一个线图</td><td><code>ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MIN, ImVec2 graph_size = ImVec2(0,0), int stride = sizeof(float))</code></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="样式和布局"><a href="#样式和布局" class="headerlink" title="样式和布局"></a>样式和布局</h2><ul><li><code>ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)</code>: 推送颜色样式到栈中。</li><li><code>ImGui::PopStyleColor(int count = 1)</code>: 弹出颜色样式。</li><li><code>ImGui::PushStyleVar(ImGuiStyleVar var_idx, float val)</code>: 推送样式变量到栈中。</li><li><code>ImGui::PopStyleVar(int count = 1)</code>: 弹出样式变量。</li><li><code>ImGui::SetNextWindowSize(const ImVec2&amp; size, ImGuiCond cond = 0)</code>: 设置下一个窗口的大小。</li><li><code>ImGui::SetNextWindowPos(const ImVec2&amp; pos, ImGuiCond cond = 0)</code>: 设置下一个窗口的位置。</li></ul><h2 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h2><ul><li><code>ImGui::OpenPopup(const char* str_id)</code>: 打开一个弹出窗口。</li><li><code>ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0)</code>: 开始一个弹出窗口。</li><li><code>ImGui::EndPopup()</code>: 结束弹出窗口的绘制。</li><li><code>ImGui::IsItemHovered()</code>: 检查当前鼠标是否悬停在某个项上。</li><li><code>ImGui::IsItemActive()</code>: 检查当前项是否处于活动状态（如被拖动、编辑等）</li></ul><p>除了之前提到的ImGui常用API外，还有一些其他的API和功能也值得注意：</p><h3 id="文本输入和键盘处理"><a href="#文本输入和键盘处理" class="headerlink" title="文本输入和键盘处理"></a>文本输入和键盘处理</h3><ul><li><code>ImGui::InputTextMultiline(...)</code>: 创建一个支持多行文本的输入框。</li><li><code>ImGui::InputTextWithHint(...)</code>: 创建一个带有提示文本的输入框。</li><li><code>ImGui::KeyboardChar(...)</code>: 向ImGui传递一个键盘字符事件（通常用于处理键盘输入）。</li></ul><h3 id="选择器和列表"><a href="#选择器和列表" class="headerlink" title="选择器和列表"></a>选择器和列表</h3><ul><li><code>ImGui::Combo(...)</code>: 创建一个下拉选择器，允许用户从预定义的选项列表中选择一个。</li><li><code>ImGui::ListBoxHeader(...)</code> 和 <code>ImGui::ListBoxFooter(...)</code>: 用于自定义列表框的渲染。</li></ul><h3 id="布局控制"><a href="#布局控制" class="headerlink" title="布局控制"></a>布局控制</h3><ul><li><code>ImGui::BeginGroup()</code> 和 <code>ImGui::EndGroup()</code>: 创建一个可以移动、缩放或隐藏的元素组。</li><li><code>ImGui::Indent(...)</code> 和 <code>ImGui::Unindent(...)</code>: 增加或减少缩进级别，用于控制子元素的缩进。</li><li><code>ImGui::Columns(...)</code>、<code>ImGui::NextColumn()</code> 等：用于创建列布局。</li></ul><h3 id="弹出窗口和工具提示"><a href="#弹出窗口和工具提示" class="headerlink" title="弹出窗口和工具提示"></a>弹出窗口和工具提示</h3><ul><li><code>ImGui::BeginTooltip()</code> 和 <code>ImGui::EndTooltip()</code>: 创建一个工具提示（tooltip）。</li><li><code>ImGui::SetTooltip(...)</code>: 为当前悬停的项设置工具提示文本。</li></ul><h3 id="拖放和滑动"><a href="#拖放和滑动" class="headerlink" title="拖放和滑动"></a>拖放和滑动</h3><ul><li><code>ImGui::DragFloat(...)</code>, <code>ImGui::DragInt(...)</code> 等：用于创建可以拖放的滑块。</li><li><code>ImGui::SliderScalar(...)</code>: 创建一个可以拖放的滑块，支持各种数据类型。</li></ul><h3 id="菜单和上下文菜单"><a href="#菜单和上下文菜单" class="headerlink" title="菜单和上下文菜单"></a>菜单和上下文菜单</h3><ul><li><code>ImGui::BeginMainMenuBar()</code> 和 <code>ImGui::EndMainMenuBar()</code>: 创建主菜单栏。</li><li><code>ImGui::BeginMenu(...)</code> 和 <code>ImGui::EndMenu()</code>: 创建一个下拉菜单。</li><li><code>ImGui::BeginPopupContextItem(...)</code> 和 <code>ImGui::BeginPopupContextWindow(...)</code>: 创建与特定项或窗口关联的上下文菜单。</li></ul><h3 id="图像和绘图"><a href="#图像和绘图" class="headerlink" title="图像和绘图"></a>图像和绘图</h3><ul><li><code>ImGui::Image(...)</code>: 显示一个图像。</li><li><code>ImGui::ImageButton(...)</code>: 创建一个可以点击的图像按钮。</li><li><code>ImGui::GetWindowDrawList()</code>: 获取当前窗口的绘图列表，用于自定义绘图。</li></ul><h3 id="工具和实用程序"><a href="#工具和实用程序" class="headerlink" title="工具和实用程序"></a>工具和实用程序</h3><ul><li><code>ImGui::ShowDemoWindow(...)</code>: 显示一个演示窗口，其中包含ImGui的所有功能和控件的示例。</li><li><code>ImGui::ShowMetricsWindow(...)</code>: 显示一个窗口，其中包含关于ImGui渲染性能的详细统计信息。</li><li><code>ImGui::StyleColorsDark(...)</code>, <code>ImGui::StyleColorsClassic(...)</code> 等：应用预定义的样式主题。</li></ul><h3 id="窗口标志和样式"><a href="#窗口标志和样式" class="headerlink" title="窗口标志和样式"></a>窗口标志和样式</h3><ul><li><code>ImGuiWindowFlags</code> 枚举：包含用于控制窗口行为的多个标志。</li><li><code>ImGuiStyle</code> 结构体：包含用于控制ImGui界面样式的多个字段。</li></ul><p>这些只是ImGui库提供的一部分功能和API，具体的使用方法和效果请参考ImGui的官方文档和示例代码。</p><h2 id="如窗口、标签页、按钮、文本框、进度条、滑块、输入框、树"><a href="#如窗口、标签页、按钮、文本框、进度条、滑块、输入框、树" class="headerlink" title="如窗口、标签页、按钮、文本框、进度条、滑块、输入框、树"></a>如窗口、标签页、按钮、文本框、进度条、滑块、输入框、树</h2><h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><p>ImGui库提供了许多常用的控件，包括但不限于以下这些：</p><ol><li><p><strong>基本控件</strong>：</p><ul><li>Label：用于显示文本标签。</li><li>Text：用于显示文本内容。</li><li>Button：创建可点击的按钮。</li><li>Checkbox：创建复选框控件，用于表示开关状态。</li><li>Radio Button：创建单选按钮控件，用于从一组选项中选择一个。</li><li>Slider：创建滑动条控件，用于选择连续的值。</li><li>Drag：与Slider类似，但更侧重于拖拽操作来选择值。</li></ul></li><li><p><strong>输入控件</strong>：</p><ul><li>Input Text：创建文本框控件，用于输入文本。</li><li>Input Float, Input Int：创建用于输入浮点数或整数的控件。</li></ul></li><li><p><strong>列表和树形控件</strong>：</p><ul><li>List Box：创建列表框控件，用于显示可选项列表。</li><li>Tree：创建树形控件，用于展示层次结构的数据。</li></ul></li><li><p><strong>颜色选择器</strong>：</p><ul><li>Color Picker：允许用户选择颜色。</li></ul></li><li><p><strong>菜单和工具栏</strong>：</p><ul><li>Menu：创建下拉菜单。</li><li>Toolbar：创建工具栏，通常包含多个按钮或选项。</li></ul></li><li><p><strong>滚动条和滚动区域</strong>：</p><ul><li>Scrollbar：创建滚动条控件。</li><li>Scrolling Region：允许在滚动区域内显示大量内容。</li></ul></li><li><p><strong>弹出窗口和对话框</strong>：</p><ul><li>Popup：创建弹出窗口。</li><li>Modal Window：创建模态对话框，阻止用户与对话框之外的其他内容交互。</li></ul></li><li><p><strong>其他</strong>：</p><ul><li>Progress Bar：显示进度条。</li><li>Tab Bar：创建选项卡栏，用于在不同视图或页面之间切换。</li><li>Collapsing Header：可折叠的标题，通常用于组织相关内容。</li><li>ComboBox：组合框，结合了文本框和下拉列表的功能。</li><li>Image：显示图像。</li></ul></li></ol><p>请注意，ImGui库还在不断更新和发展中，可能会添加新的控件或改进现有控件的功能。因此，建议查阅最新的ImGui文档或源代码以获取最准确和完整的信息。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp模板</title>
      <link href="/2025/03/15/cpp/cpp%E6%A8%A1%E6%9D%BF/"/>
      <url>/2025/03/15/cpp/cpp%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li><p>拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 链接</span><br></pre></td></tr></table></figure></li><li><p>修改</p></li><li><p>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;input yours message&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp数据结构</title>
      <link href="/2025/03/15/cpp/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2025/03/15/cpp/cpp%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><table><thead><tr><th>方法</th><th></th></tr></thead><tbody><tr><td>初始化<code>init()</code></td><td></td></tr><tr><td>头插<code>insertAtHead(int vale)</code></td><td></td></tr><tr><td>尾插<code>insertAtTail(int vale)</code></td><td></td></tr><tr><td>删除指定元素<code>deletenode(int vale)</code></td><td></td></tr><tr><td>遍历输出<code>printList()</code></td><td></td></tr><tr><td>析构<code>LinkedList()</code></td><td></td></tr></tbody></table><h1 id="线性表-1"><a href="#线性表-1" class="headerlink" title="线性表"></a>线性表</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;    <span class="comment">//最大容量为10</span></span><br><span class="line"><span class="type">int</span> res[N + <span class="number">1</span>];    <span class="comment">//存储元素,下标从1开始</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;    <span class="comment">//数组指针，也表示当前元素数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_key</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == N)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器已满！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res[++cnt] = key;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置前插入元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_key</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == N)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器已满！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断指定的位置下标是否超出范围或数组越界</span></span><br><span class="line">    <span class="keyword">if</span> (idx&lt;<span class="number">1</span> || idx&gt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;下标不满足要求!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt; i &gt;= idx; i--)</span><br><span class="line">        res[i + <span class="number">1</span>] = res[i];    <span class="comment">//将插入位置的后面所有元素都后移一位</span></span><br><span class="line">    res[idx] = key;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到指定元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        <span class="keyword">if</span> (res[i] == key)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_key</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> idx = <span class="built_in">find</span>(key);    <span class="comment">//找到该元素的位置</span></span><br><span class="line">    <span class="keyword">if</span> (idx == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不存在该元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = idx; i &lt;= cnt; i++)</span><br><span class="line">        res[i] = res[i + <span class="number">1</span>];    <span class="comment">//让删除元素后面的所有元素向前移一位就可以覆盖掉删除元素</span></span><br><span class="line">    cnt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示容器中元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        cout &lt;&lt; res[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">push_key</span>(i);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">insert_key</span>(<span class="number">3</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="built_in">insert_key</span>(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">delete_key</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">delete_key</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;        <span class="comment">//数据</span></span><br><span class="line">    node* next;        <span class="comment">//指向下一个结点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node* head = <span class="literal">NULL</span>;    <span class="comment">//将头指针设为全局变量，方便使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_node</span><span class="params">()</span></span>;         <span class="comment">//初始化结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">head_insert</span><span class="params">(<span class="type">int</span>)</span></span>;    <span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">end_insert</span><span class="params">(<span class="type">int</span>)</span></span>;     <span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(<span class="type">int</span>)</span></span>;    <span class="comment">//删除结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;              <span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_node</span>();</span><br><span class="line">    <span class="built_in">head_insert</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">head_insert</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">end_insert</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">delete_node</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* temp = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前还没有创建结点&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; temp-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_node</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = <span class="number">-1</span>;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">head_insert</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = key;</span><br><span class="line">    new_node-&gt;next = head-&gt;next;    <span class="comment">//将新结点的next指向head的ne</span></span><br><span class="line">    head-&gt;next = new_node;          <span class="comment">//将head的next指向新结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">end_insert</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* new_node = <span class="keyword">new</span> node;</span><br><span class="line">    node* temp = head;                <span class="comment">//创建一个临时指针</span></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)        <span class="comment">//将临时指针指向最后一个结点</span></span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    new_node-&gt;data = key;            <span class="comment">//给新结点赋值</span></span><br><span class="line">    new_node-&gt;next = temp-&gt;next;    <span class="comment">//将新结点的next指向temp的next</span></span><br><span class="line">    temp-&gt;next = new_node;            <span class="comment">//将temp的next指向新结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node* temp = head-&gt;next;</span><br><span class="line">    node* prev = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;data != key &amp;&amp; temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        prev = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;没有此结点&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prev-&gt;next = temp-&gt;next;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">delete</span>[]temp;</span><br><span class="line">    temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP基础</title>
      <link href="/2025/03/15/cpp/cpp%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/15/cpp/cpp%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><ul><li>记录CPP的一些基础用法</li></ul><h1 id="基础变量"><a href="#基础变量" class="headerlink" title="基础变量"></a>基础变量</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> 整型=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[] 数组=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">char</span> 字符=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">String 字符串=<span class="string">&quot;我是字符串&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体声明"><a href="#结构体声明" class="headerlink" title="结构体声明"></a>结构体声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> 结构体</span><br><span class="line">&#123;</span><br><span class="line">string 字符串;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 公有成员</span></span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// 受保护成员</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// 私有成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul><li>通过指针函数对函数进行调用</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> initialValue=<span class="number">10</span>) : <span class="built_in">value</span>(initialValue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">initCallback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置属性值并触发回调</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> newValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newValue==value)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        value = newValue;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(callback)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">callback</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_price</span><span class="params">(<span class="type">int</span> newValue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue==price)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        price = newValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用回调函数</span></span><br><span class="line">        <span class="keyword">if</span>(callback)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">callback</span>(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化回调函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//callback = [this](int newValue) &#123; myCallback(newValue); &#125;;</span></span><br><span class="line">        callback = [<span class="keyword">this</span>](<span class="type">int</span> newValue) &#123; </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">myCallback</span>(newValue);</span><br><span class="line">            &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line">                std::cerr &lt;&lt; <span class="string">&quot;Callback exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">assert</span>(callback != <span class="literal">nullptr</span>);  <span class="comment">// 确保回调函数不为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span>  <span class="title">myCallback</span><span class="params">(<span class="type">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value changed toa: &quot;</span> &lt;&lt; newValue &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;  <span class="comment">// 属性</span></span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; callback;  <span class="comment">// 回调函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClassA</span>:<span class="keyword">public</span> MyClass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClassA</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myCallback</span><span class="params">(<span class="type">int</span> newValue)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">u8&quot;重写: &quot;</span> &lt;&lt; newValue &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    MyClassA objA;</span><br><span class="line"></span><br><span class="line">    objA.<span class="built_in">set_price</span>(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改属性值</span></span><br><span class="line">    obj.<span class="built_in">setValue</span>(<span class="number">100</span>);  <span class="comment">// 输出: Value changed to: 10</span></span><br><span class="line">    obj.<span class="built_in">setValue</span>(<span class="number">20</span>);  <span class="comment">// 输出: Value changed to: 20</span></span><br><span class="line">    obj.<span class="built_in">set_price</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmake</title>
      <link href="/2025/03/15/cpp/CMake/"/>
      <url>/2025/03/15/cpp/CMake/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><ul><li>用于记录CMake编译器的用法</li></ul><h1 id="CMake用法"><a href="#CMake用法" class="headerlink" title="CMake用法"></a>CMake用法</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>模板</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)  <span class="comment">#版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(MyProject)  <span class="comment">#项目名</span></span><br></pre></td></tr></table></figure><ul><li>可执行文件</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(可执行文件名 main.cpp) </span><br></pre></td></tr></table></figure><ul><li>多个可执行文件</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(可执行文件名<span class="number">1</span> my1.cpp) </span><br><span class="line"><span class="keyword">add_executable</span>(可执行文件名<span class="number">2</span> my2.cpp) </span><br></pre></td></tr></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><ul><li>生成静态库</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(MUL_SOURCES ./mul/mul.cpp)          <span class="comment">#设置CPP路径变量</span></span><br><span class="line"><span class="keyword">add_library</span>(mul STATIC <span class="variable">$&#123;MUL_SOURCES&#125;</span>)  <span class="comment">#通过MUL_SOURCES路径STATIC属性添加为静态库</span></span><br></pre></td></tr></table></figure><ul><li>链接全局,将静态链接链接至所有程序</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(./)  <span class="comment">#添加头文件路径</span></span><br><span class="line"><span class="number">1</span>.<span class="keyword">link_directories</span>(路径)  <span class="comment">#添加静态库链接所在目录</span></span><br><span class="line"><span class="number">2</span>.<span class="keyword">link_libraries</span>(库名)      <span class="comment">#将静态库链接到全局文件</span></span><br></pre></td></tr></table></figure><ul><li>链接指定目标,将静态链接链接向指定目标</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(./)  <span class="comment">#添加头文件路径</span></span><br><span class="line"><span class="number">1</span>.<span class="keyword">target_link_directories</span>(main PUBLIC 路径)  <span class="comment">#添加静态库链接所在目录</span></span><br><span class="line"><span class="number">2</span>.<span class="keyword">target_link_libraries</span>(main 库名)      <span class="comment">#将静态库链接到全局文件</span></span><br></pre></td></tr></table></figure><h2 id="生成动态文件"><a href="#生成动态文件" class="headerlink" title="生成动态文件"></a>生成动态文件</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(MUL_SOURCES ./mul/mul.cpp)          <span class="comment">#设置CPP路径变量</span></span><br><span class="line"><span class="keyword">add_library</span>(mul SHARED <span class="variable">$&#123;MUL_SOURCES&#125;</span>)  <span class="comment">#通过MUL_SOURCES路径SHARED属性添加为动态库</span></span><br></pre></td></tr></table></figure><ul><li>链接全局,将静态链接链接至所有程序</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(./)  <span class="comment">#添加头文件路径</span></span><br><span class="line"><span class="number">1</span>.<span class="keyword">link_directories</span>(路径)  <span class="comment">#添加动态库链接所在目录</span></span><br><span class="line"><span class="number">2</span>.<span class="keyword">link_libraries</span>(库名)      <span class="comment">#将动态库链接到全局文件</span></span><br></pre></td></tr></table></figure><ul><li>链接指定目标,将静态链接链接向指定目标</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(./)  <span class="comment">#添加头文件路径</span></span><br><span class="line"><span class="number">1</span>.<span class="keyword">target_link_directories</span>(main PUBLIC 路径)  <span class="comment">#添加动态库链接所在目录</span></span><br><span class="line"><span class="number">2</span>.<span class="keyword">target_link_libraries</span>(main 库名)      <span class="comment">#将动态库链接到全局文件</span></span><br></pre></td></tr></table></figure><h2 id="调用第三方库"><a href="#调用第三方库" class="headerlink" title="调用第三方库"></a>调用第三方库</h2><ul><li>调用静态库,必须要有头文件</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt  </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(MyProject)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/tt)  <span class="comment">#头文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件 main  </span></span><br><span class="line"><span class="keyword">add_executable</span>(my main.cpp)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(my <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/tt/gx.lib)  <span class="comment">#静态库路径</span></span><br></pre></td></tr></table></figure><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="构建可执行文件"><a href="#构建可执行文件" class="headerlink" title="构建可执行文件"></a>构建可执行文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目录结构</span></span><br><span class="line"></span><br><span class="line">我的项目</span><br><span class="line">    main.cpp</span><br><span class="line">    CMakeLists.txt </span><br><span class="line">    test/</span><br><span class="line">        test.cpp</span><br><span class="line">        test.h</span><br></pre></td></tr></table></figure><ul><li>CMakeLists.txt</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)  </span><br><span class="line"><span class="keyword">project</span>(MyProject) </span><br><span class="line"><span class="keyword">add_executable</span>(my main.cpp)  </span><br></pre></td></tr></table></figure><h1 id="库管理工具vcpkg"><a href="#库管理工具vcpkg" class="headerlink" title="库管理工具vcpkg"></a>库管理工具vcpkg</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/microsoft/vcpkg.git</span><br></pre></td></tr></table></figure><h2 id="cmd指令"><a href="#cmd指令" class="headerlink" title="cmd指令"></a>cmd指令</h2><p><code>vcpkg</code>（或 <code>vcpkg.exe</code> 在 Windows 上）是 Microsoft 的跨平台 C++ 包管理器。它允许你轻松地从源代码构建、安装和管理 C++ 库和工具。</p><p>以下是一些常用的 <code>vcpkg</code> 指令：</p><ol><li><strong>搜索包</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg search &lt;package-name&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>安装包</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>例如，要安装 <code>zlib</code>，你可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg install zlib</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>更新包</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg update</span><br></pre></td></tr></table></figure><p>或者更新特定的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg update &lt;package-name&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>列出已安装的包</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg list</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>删除包</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg remove &lt;package-name&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>导出包</strong>：为指定的包生成 NuGet 包。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg <span class="built_in">export</span> &lt;package-name&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>查看包的信息</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg info &lt;package-name&gt;</span><br></pre></td></tr></table></figure><ol start="8"><li><strong>集成到 Visual Studio</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg integrate install</span><br></pre></td></tr></table></figure><p>这将自动将 vcpkg 安装的库集成到 Visual Studio 中，以便你可以直接在项目中引用它们。<br>9. <strong>集成到 CMake</strong>：<br>vcpkg 提供了 CMake 工具链文件，你可以在你的 CMakeLists.txt 文件中包含它们来找到和链接 vcpkg 安装的库。<br>10. <strong>清理构建缓存</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg purge</span><br></pre></td></tr></table></figure><ol start="11"><li><strong>查看帮助</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>或针对特定的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>查看版本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg version</span><br></pre></td></tr></table></figure><p>请注意，<code>vcpkg</code> 的具体命令和选项可能会随着版本的更新而发生变化。因此，建议经常查看其官方文档或运行 <code>vcpkg help</code> 来获取最新的信息。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++数组</title>
      <link href="/2025/03/15/cpp/C++%E6%95%B0%E7%BB%84/"/>
      <url>/2025/03/15/cpp/C++%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h1><ul><li>此文档记录了C++普通数组实现增删改查的方法</li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">const</span> 数组最大长度=<span class="number">10</span>;      <span class="comment">//声明数组最大长度</span></span><br><span class="line"><span class="type">int</span> 数组数据=[N<span class="number">+1</span>];       <span class="comment">//声明数组,长度为11       同:int 数组数据[11];</span></span><br><span class="line"><span class="type">int</span> 元素数量=<span class="number">0</span>;           <span class="comment">//声明一个整形遍历,用来记录存储数组元素数量</span></span><br></pre></td></tr></table></figure><p><img src="https://img2.imgtp.com/2024/04/09/BehIfI1Z.jpg"></p><h3 id="插入数组的方法"><a href="#插入数组的方法" class="headerlink" title="插入数组的方法"></a>插入数组的方法</h3><ul><li>创建一个带有一个参数的方法</li><li>判断数组数组元素数量是否等于最大数组元素,如果等于则返回跳出</li><li>如果元素数量小于最大元素数量,数组&#x3D;等于参数,元素数量+1,</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> 插入元素(<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (元素数量==数组最大长度)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;数组满了&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">//跳出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    数组数据[元素数量=元素数量<span class="number">+1</span>]=元素;  <span class="comment">//数组数据[1]=元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2.imgtp.com/2024/04/09/ExvItH47.jpg"></p><ul><li>通过以上方法可以通过<code>for</code>直接插入数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)       <span class="comment">//此时想数组数据插入了1,2,3,4,5   元素数量也加到了5</span></span><br><span class="line">&#123;</span><br><span class="line">    插入元素(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定位置前插入元素"><a href="#指定位置前插入元素" class="headerlink" title="指定位置前插入元素"></a>指定位置前插入元素</h3><ul><li>判断元素数量与最大数量</li><li>判断下标是否越界,小于1或者大于最大值</li><li>获取要添加数组的位置并将后面的数组往后移动</li><li>将数组插入</li><li>元素数量加1</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> 指定位置插入(<span class="type">int</span> 索引,<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断最大值代码...</span></span><br><span class="line">    <span class="comment">//判断边界代码...</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=元素数量;i&gt;=索引;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        元素[i<span class="number">+1</span>]=元素[i];</span><br><span class="line">    &#125;</span><br><span class="line">    数据元素[索引]=元素;</span><br><span class="line">    元素数量++;                    <span class="comment">//灵魂=找到数组位置并移动后面的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找到指定元素"><a href="#找到指定元素" class="headerlink" title="找到指定元素"></a>找到指定元素</h3><ul><li>遍历元素,如何存在就返回索引</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> 找到指定元素(<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=元素数量;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(数组数据[i]==元素)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> 最大元素数量=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> 数据[最大元素数量 + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> 元素数量 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 插入元素(<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (元素数量 == 最大元素数量)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器满了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    数据[元素数量] = 元素;</span><br><span class="line">    元素数量++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 指定位置插入元素(<span class="type">int</span> 索引,<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (元素数量 == 最大元素数量)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器满了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (索引 &lt; <span class="number">1</span> || 索引 == 最大元素数量)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;超出界限&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = 元素数量; i &lt;= 索引; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        数据[i<span class="number">+1</span>] = 数据[i];</span><br><span class="line">    &#125;</span><br><span class="line">    数据[索引] = 元素;</span><br><span class="line">    元素数量++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> 查找指定元素(<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= 元素数量; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (数据[i] == 元素)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> 删除指定元素(<span class="type">int</span> 元素)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (元素数量 == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;元素为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> 位置 = 查找指定元素(元素);</span><br><span class="line">    <span class="keyword">if</span> (位置 == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;没有指定元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = 位置; i &lt;= 元素数量; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        数据[i] = 数据[i<span class="number">+1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    元素数量--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    插入元素(<span class="number">20</span>);</span><br><span class="line">    插入元素(<span class="number">90</span>);</span><br><span class="line">    插入元素(<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; 数据[查找指定元素(<span class="number">70</span>)] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安知鱼网站部署</title>
      <link href="/2025/03/14/%E5%AE%89%E7%9F%A5%E9%B1%BC%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/03/14/%E5%AE%89%E7%9F%A5%E9%B1%BC%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="安知鱼网站部署"><a href="#安知鱼网站部署" class="headerlink" title="安知鱼网站部署"></a>安知鱼网站部署</h1><h2 id="初始化HEXO"><a href="#初始化HEXO" class="headerlink" title="初始化HEXO"></a>初始化HEXO</h2><ul><li>初始化</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>生成本地网页</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><ul><li>部署插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>部署</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h2 id="初始化安知鱼"><a href="#初始化安知鱼" class="headerlink" title="初始化安知鱼"></a>初始化安知鱼</h2><ul><li>安装</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> main https://github.com/anzhiyu<span class="literal">-c</span>/hexo<span class="literal">-theme-anzhiyu</span>.git themes/anzhiyu</span><br></pre></td></tr></table></figure><ul><li>安装渲染插件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><ul><li>应用主题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="title class_">Extensions</span></span><br><span class="line">## <span class="title class_">Plugins</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## <span class="title class_">Themes</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme</span>: anzhiyu</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://luojiangbao015.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/Myanzhiyu/</span></span><br><span class="line"><span class="comment">#url: http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">syntax_highlighter:</span> <span class="string">highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">anzhiyu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/Luojiangbao015/Myanzhiyu.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网页 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/14/hello-world/"/>
      <url>/2025/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怪物追玩家</title>
      <link href="/2024/03/30/unity/%E6%80%AA%E7%89%A9%E8%B7%9F%E8%B8%AA%E7%8E%A9%E5%AE%B6/"/>
      <url>/2024/03/30/unity/%E6%80%AA%E7%89%A9%E8%B7%9F%E8%B8%AA%E7%8E%A9%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="怪物跟踪算法"><a href="#怪物跟踪算法" class="headerlink" title="怪物跟踪算法"></a>怪物跟踪算法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (player != <span class="literal">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算怪物和玩家之间的方向向量  </span></span><br><span class="line">            Vector2 向量= (玩家.position - transform.position).normalized;  </span><br><span class="line">            <span class="comment">// 移动怪物  </span></span><br><span class="line">            transform.Translate(direction * 速度* Time.deltaTime);  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 变量 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AGS课程笔记</title>
      <link href="/2024/03/30/ue5/%E5%8F%98%E9%87%8F/AGS%E8%AF%BE%E7%A8%8B/"/>
      <url>/2024/03/30/ue5/%E5%8F%98%E9%87%8F/AGS%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </p><h1 id="第一章-添加玩家角色并控制"><a href="#第一章-添加玩家角色并控制" class="headerlink" title="第一章:添加玩家角色并控制"></a>第一章:添加玩家角色并控制</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">26-35  HUD血量和蓝量UI制作及更新数据 UI文件夹 AuraHUD  Widget overlayWidget</span><br><span class="line">36-41 GE捡到瓶子增加生命和法力</span><br><span class="line">42-44-47  异常附着</span><br><span class="line">48-62 标签</span><br><span class="line">63-73 数据表</span><br><span class="line">74-94 属性菜单</span><br><span class="line">95-109 技能异步及火球发射</span><br><span class="line">110-124 火球发射和击中怪物,怪物减血</span><br><span class="line">125-129 多敌人类型及敌人属性</span><br><span class="line">130-146 对属性计算,暴击啥的</span><br><span class="line">147-160 网络?</span><br><span class="line">161-174 敌人AI寻路避障</span><br><span class="line">175-187 敌人近战攻击行为和对玩家造成伤害</span><br><span class="line">188-196 敌人远程特殊攻击? 弹弓发射</span><br><span class="line">197-200 敌人法师攻击</span><br><span class="line"></span><br><span class="line">2-27 音乐粒子特效召唤?</span><br><span class="line">28-32 场景搭建</span><br><span class="line">33-46 场景微调 技能和经验UI</span><br><span class="line">47-61 等级</span><br><span class="line">62-67 向玩家状态添加属性作为成员变量及属性菜单升级</span><br><span class="line">68-100 技能菜单</span><br><span class="line">101-113 技能效果,检疫</span><br><span class="line">114-135 技能升级效果,雷电技能</span><br><span class="line">136-142 被动技能</span><br><span class="line">143-160 水晶技能 冷却</span><br><span class="line">161-169 火焰爆炸</span><br><span class="line">170-192 保存</span><br><span class="line"></span><br><span class="line">1-14 保存世界</span><br><span class="line">15-31 地图入口</span><br></pre></td></tr></table></figure><h2 id="第一节-添加CPP基类"><a href="#第一节-添加CPP基类" class="headerlink" title="第一节:添加CPP基类"></a>第一节:添加CPP基类</h2><ol><li><p>创建新项目</p></li><li><p>创建C++抽象角色类<code>玩家和怪物都继承自这个类</code>,命名<strong>AuraCharacterBase</strong>,</p></li><li><p>文件夹分类为Character</p><ul><li><p>删除没必要的函数,修改<code>PrimaryActorTick.bCanEverTick = true</code>为<code>PrimaryActorTick.bCanEverTick = false</code></p></li><li><p>AAuraCharacterBase.h</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> AAuraCharacterBase : <span class="keyword">public</span> ACharacter</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this character&#x27;s properties</span></span><br><span class="line"><span class="built_in">AAuraCharacterBase</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>AAuraCharacterBase.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacterBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AAuraCharacterBase::<span class="built_in">AAuraCharacterBase</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacterBase::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加装备组件</p><ul><li>AAuraCharacterBase.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> AAuraCharacterBase : <span class="keyword">public</span> ACharacter</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this character&#x27;s properties</span></span><br><span class="line"><span class="built_in">AAuraCharacterBase</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能指针</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, Category = <span class="string">&quot;Combat&quot;</span>)</span><br><span class="line">TObjectPtr&lt;USkeletalMeshComponent&gt;Weapon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>AAuraCharacterBase.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacterBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AAuraCharacterBase::<span class="built_in">AAuraCharacterBase</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//挂载,设置碰撞</span></span><br><span class="line">Weapon=<span class="built_in">CreateDefaultSubobject</span>&lt;USkeletalMeshComponent&gt;(<span class="string">&quot;Weapon&quot;</span>);</span><br><span class="line">Weapon-&gt;<span class="built_in">SetupAttachment</span>(<span class="built_in">GetMesh</span>(), <span class="built_in">FName</span>(<span class="string">&quot;WeaponSocket&quot;</span>));</span><br><span class="line">Weapon-&gt;<span class="built_in">SetCollisionEnabled</span>(ECollisionEnabled::NoCollision);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacterBase::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建继承自AuraCharacterBase的子类,分别为玩家Player和怪物Enemy</p></li></ol><h2 id="第二节-角色动画和装备武器"><a href="#第二节-角色动画和装备武器" class="headerlink" title="第二节:角色动画和装备武器"></a>第二节:角色动画和装备武器</h2><ol><li><p>创建角色蓝图,继承C++子类,角色继承Player,怪物继承Enemy</p></li><li><p>将角色网格体设置为角色网格体<img src="/..%5C%E8%93%9D%E5%9B%BE%5CQQ%E6%88%AA%E5%9B%BE20240922025724.png" alt="QQ截图20240922025724"></p></li><li><p>武器绑定<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%AD%A6%E5%99%A8%E7%BB%91%E5%AE%9A.png" alt="武器绑定"></p></li><li><p>调整绑定武器<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%BB%E5%8A%A0%E7%BB%91%E5%AE%9A%E6%AD%A6%E5%99%A8.png" alt="添加绑定武器"></p></li><li><p>调整绑定武器<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E8%B0%83%E6%95%B4%E6%AD%A6%E5%99%A8.png" alt="调整武器"></p></li></ol><h2 id="第三节-角色状态机和动画"><a href="#第三节-角色状态机和动画" class="headerlink" title="第三节 :角色状态机和动画"></a>第三节 :角色状态机和动画</h2><ol><li>创建状态机<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E5%88%9B%E5%BB%BA%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="创建状态机"></li><li>链接状态机<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E9%93%BE%E6%8E%A5%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="链接状态机"></li><li>添加动画<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%BB%E5%8A%A0%E7%8A%B6%E6%80%81.png" alt="添加状态"></li><li>链接混合动画<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E9%93%BE%E6%8E%A5%E6%B7%B7%E5%90%88%E5%8A%A8%E7%94%BB.png" alt="链接混合动画"></li><li>动画事件图表<img src="G:\MyWep\source_posts\ue5\蓝图\布尔角色状态机.png" alt="布尔角色状态机"><img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E5%8A%A8%E7%94%BB%E4%BA%8B%E4%BB%B6%E5%9B%BE%E8%A1%A8.png" alt="动画事件图表"></li><li>打开角色蓝图<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E8%A7%92%E8%89%B2%E7%BB%91%E5%AE%9A%E8%93%9D%E5%9B%BE%E5%8A%A8%E7%94%BB.png" alt="角色绑定蓝图动画"></li><li>将角色拖到进场景测试</li></ol><h2 id="第四节-怪物动画"><a href="#第四节-怪物动画" class="headerlink" title="第四节:怪物动画"></a>第四节:怪物动画</h2><ol><li><p>武器绑定同玩家的武器绑定</p></li><li><p>添加动画蓝图创建怪物动作模板<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E5%88%9B%E5%BB%BA%E6%80%AA%E7%89%A9%E5%8A%A8%E7%94%BB%E6%A8%A1%E6%9D%BF.png" alt="创建怪物动画模板"></p></li><li><p>模板状态机<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%80%AA%E7%89%A9%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="怪物状态机"></p></li></ol><p><img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%BB%E5%8A%A0%E6%80%AA%E7%89%A9%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="添加怪物状态机"></p><ol start="4"><li><p>混合状态<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%B7%E5%90%88%E7%8A%B6%E6%80%81blend.png" alt="混合状态blend"></p></li><li><p>添加怪物状态机<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%AD%A3%E5%BC%8F%E6%B7%BB%E5%8A%A0%E6%80%AA%E7%89%A9%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="正式添加怪物状态机"></p></li><li><p>设置混合动画<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E8%AE%BE%E7%BD%AE%E6%80%AA%E7%89%A9%E7%8A%B6%E6%80%81%E6%B7%B7%E5%90%88%E7%A9%BA%E9%97%B4.png" alt="设置怪物状态混合空间"></p></li></ol><h2 id="第五节-增强输入系统"><a href="#第五节-增强输入系统" class="headerlink" title="第五节:增强输入系统"></a>第五节:增强输入系统</h2><ol><li>添加输入操作,<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%9B%B4%E6%94%B9%E8%BE%93%E5%85%A5%E5%80%BC%E7%B1%BB%E5%9E%8B.png" alt="更改输入值类型"><img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%BB%E5%8A%A0%E8%BE%93%E5%85%A5%E6%93%8D%E4%BD%9C.png" alt="添加输入操作"></li><li>添加输入映射<img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E6%B7%BB%E5%8A%A0%E8%BE%93%E5%85%A5%E6%98%A0%E5%B0%84.png" alt="添加输入映射"></li></ol><p><img src="/..%5C%E8%93%9D%E5%9B%BE%5C%E8%B0%83%E6%95%B4%E8%BE%93%E5%85%A5%E6%98%A0%E5%B0%84.png" alt="调整输入映射"></p><ol start="3"><li><p>添加玩家控制器C++类,Player文件夹</p><ul><li>头文件AuraPlayerController.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/PlayerController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraPlayerController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInputMappingContext</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInputAction</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FInputActionValue</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> AAuraPlayerController : <span class="keyword">public</span> APlayerController</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AAuraPlayerController</span>();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SetupInputComponent</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, category = <span class="string">&quot;Input&quot;</span>);</span><br><span class="line">TObjectPtr&lt;UInputMappingContext&gt; AuraContext;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, category = <span class="string">&quot;Input&quot;</span>);</span><br><span class="line">TObjectPtr&lt;UInputAction&gt; MoveAction;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; InputActionValue)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>源文件AuraPlayerController.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnhancedInputSubsystems.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnhancedInputComponent.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AAuraPlayerController::<span class="built_in">AAuraPlayerController</span>()</span><br><span class="line">&#123;</span><br><span class="line">bReplicates = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">    <span class="comment">//检查输入映射是否有效</span></span><br><span class="line"><span class="built_in">check</span>(AuraContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取增强输入系统</span></span><br><span class="line">UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::<span class="built_in">GetSubsystem</span>&lt;UEnhancedInputLocalPlayerSubsystem&gt;(<span class="built_in">GetLocalPlayer</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加映射上下文</span></span><br><span class="line">Subsystem-&gt;<span class="built_in">AddMappingContext</span>(AuraContext, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">bShowMouseCursor = <span class="literal">true</span>;</span><br><span class="line">DefaultMouseCursor = EMouseCursor::Default;</span><br><span class="line"></span><br><span class="line">FInputModeGameAndUI InputModeData;</span><br><span class="line">InputModeData.<span class="built_in">SetLockMouseToViewportBehavior</span>(EMouseLockMode::DoNotLock);</span><br><span class="line">InputModeData.<span class="built_in">SetHideCursorDuringCapture</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">SetInputMode</span>(InputModeData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::SetupInputComponent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">SetupInputComponent</span>();</span><br><span class="line"></span><br><span class="line">UEnhancedInputComponent* EnhancedInputComponent = <span class="built_in">CastChecked</span>&lt;UEnhancedInputComponent&gt;(InputComponent);</span><br><span class="line"></span><br><span class="line">EnhancedInputComponent-&gt;<span class="built_in">BindAction</span>(MoveAction, ETriggerEvent::Triggered, <span class="keyword">this</span>, &amp;AAuraPlayerController::Move);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::Move</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; InputActionValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> FVector2D InputAxisVector = InputActionValue.<span class="built_in">Get</span>&lt;FVector2D&gt;();</span><br><span class="line"><span class="type">const</span> FRotator Rotation = <span class="built_in">GetControlRotation</span>();</span><br><span class="line"><span class="function"><span class="type">const</span> FRotator <span class="title">YawRotation</span><span class="params">(<span class="number">0.f</span>, Rotation.Yaw, <span class="number">0.f</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> FVector ForwardDirection = <span class="built_in">FRotationMatrix</span>(YawRotation).<span class="built_in">GetUnitAxis</span>(EAxis::X);</span><br><span class="line"><span class="type">const</span> FVector RightDirection = <span class="built_in">FRotationMatrix</span>(YawRotation).<span class="built_in">GetUnitAxis</span>(EAxis::Y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (APawn* ControlledPawn = <span class="built_in">GetPawn</span>&lt;APawn&gt;())</span><br><span class="line">&#123;</span><br><span class="line">ControlledPawn-&gt;<span class="built_in">AddMovementInput</span>(RightDirection * InputAxisVector.Y);</span><br><span class="line">ControlledPawn-&gt;<span class="built_in">AddMovementInput</span>(ForwardDirection * InputAxisVector.X);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建继承自AuraPlayerController的蓝图类</li><li>选择控制器映射和控制器</li><li>添加游戏基础模式蓝图</li><li>选择玩家控制器及玩家蓝图<img src="G:\MyWep\source_posts\ue5\蓝图\游戏模式设置.png" alt="游戏模式设置"></li><li>在游戏世界场景切换游戏模式,添加玩家出生点并运行</li></ol></li></ol><h2 id="第六节-添加相机及设置角色选择"><a href="#第六节-添加相机及设置角色选择" class="headerlink" title="第六节:添加相机及设置角色选择"></a>第六节:添加相机及设置角色选择</h2><ol><li><p>打开角色蓝图添加弹簧臂</p></li><li><p>弹簧臂下添加相机,通过调整弹簧臂设置相机位置及角度</p></li><li><p>前往玩家CPP类,AuraCharacter.h,控制玩家旋转</p><ul><li>头文件AuraCharacter.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacterBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> AAuraCharacter : <span class="keyword">public</span> AAuraCharacterBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AAuraCharacter</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>源文件AuraCharacter.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/CharacterMovementComponent.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AAuraCharacter::<span class="built_in">AAuraCharacter</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;bOrientRotationToMovement = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;RotationRate=<span class="built_in">FRotator</span>(<span class="number">0.0</span>, <span class="number">400.0f</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;bConstrainToPlane=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;bSnapToPlaneAtStart=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">bUseControllerRotationRoll = <span class="literal">false</span>;</span><br><span class="line">bUseControllerRotationPitch = <span class="literal">false</span>;</span><br><span class="line">bUseControllerRotationYaw = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回引擎,打开角色蓝图,将弹簧臂</p></li><li><p>yaw取消,将旋转朝向运动打开,设置旋转速率为500<img src="G:\MyWep\source\_posts\ue5\蓝图\设置弹簧臂摄像机.png" alt="设置弹簧臂摄像机" style="zoom: 200%;" /></p></li></ol><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GAS,</span><br><span class="line">Attribute(属性),</span><br><span class="line">gameplay effects</span><br><span class="line">gameplay tags</span><br><span class="line">MVC 架构 处理UI</span><br><span class="line">gameplay ABILITIES  技能</span><br><span class="line">行为树</span><br></pre></td></tr></table></figure><p>​GE  属性初始化和UI显示等…</p><p>GamplayAbility 简称 GA，是UE引擎里的GAS内的功能组件，它的主要功能包括技能冷却时间（CD）和技能消耗的管理，同时也支持网络同步和实例支持。开发者可以在ActivateAbility事件中编写相关的技能逻辑，如角色动作、粒子效果以及角色数值的变动。根据技能是否施展成功，可以调用CommitAbility()或EndAbility()来结束技能。<br>————————————————</p><p>原文链接：<a href="https://blog.csdn.net/qq_30100043/article/details/137234914">https://blog.csdn.net/qq_30100043/article/details/137234914</a></p><h2 id="第一节-添加接口"><a href="#第一节-添加接口" class="headerlink" title="第一节:添加接口"></a>第一节:添加接口</h2><ol><li><p>创建Interaction文件夹C++类EnemyInteraction<img src="G:\MyWep\source_posts\ue5\蓝图\接口类.png" alt="接口类"></p><ul><li>EnemyInteraction头文件代码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/Interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnemyInterface.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class does not need to be modified.</span></span><br><span class="line"><span class="built_in">UINTERFACE</span>(MinimalAPI)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UEnemyInterface</span> : <span class="keyword">public</span> UInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> IEnemyInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add interface functions to this class. This is the class that will be inherited to implement this interface.</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明接口类</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">HighightActor</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">UnHighlightActor</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在怪物基类实现接口AuraEnemy.h</p><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacterBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface/EnemyInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraEnemy.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()  <span class="comment">//继承接口类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAS_API</span> AAuraEnemy : <span class="keyword">public</span> AAuraCharacterBase,<span class="keyword">public</span> IEnemyInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//实现接口函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HighightActor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UnHighlightActor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraEnemy.h&quot;</span></span></span><br><span class="line"><span class="comment">//实现接口函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraEnemy::HighightActor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraEnemy::UnHighlightActor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><h2 id="创建血量UI"><a href="#创建血量UI" class="headerlink" title="创建血量UI"></a>创建血量UI</h2><ul><li><p>尺寸框控件-SizeBox_Root</p></li><li><p>覆盖控件-Overlay_Root</p></li><li><p>图片控件[背景]-Image_Background</p></li><li><p>进度条控件</p><ul><li>样式-填充图&#x3D;图片</li><li>样式-填充图-改为图形填充</li><li>百分比&#x3D;1</li><li>下至上</li><li>外观-填充透明A&#x3D;1</li><li>样式-背景-透明度&#x3D;0</li></ul></li><li><p>添加图片控件-比例</p><ul><li>更新玻璃背景</li><li>设置填充大小</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="用户控件基类"><a href="#用户控件基类" class="headerlink" title="用户控件基类"></a>用户控件基类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户界面基类</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetWidgetController</span><span class="params">(UObject* InWidgetController)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly)</span><br><span class="line">TObjectPtr&lt;UObject&gt; WidgetController;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintImplementableEvent)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WidgetControllerSet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/Widget/AuraUserWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraUserWidget::SetWidgetController</span><span class="params">(UObject* InWidgetController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 将传入的Widget控制器对象赋值给类成员变量WidgetController</span></span><br><span class="line">WidgetController = InWidgetController;</span><br><span class="line"><span class="comment">// 调用WidgetControllerSet函数，通知已经设置了Widget控制器对象</span></span><br><span class="line"><span class="built_in">WidgetControllerSet</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraWidgetController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FWidgetControllerParame</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FWidgetControllerParame</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">FWidgetControllerParame</span>(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* InAbiliASCtySystemComponent, UAttributeSet* AS)</span><br><span class="line">: <span class="built_in">PlayerController</span>(PC), <span class="built_in">PlayerState</span>(PS), <span class="built_in">AbilitySystemComponent</span>(InAbiliASCtySystemComponent), <span class="built_in">AttributeSet</span>(AS)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;APlayerController&gt; PlayerController=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;APlayerState&gt; PlayerState=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器基类</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraWidgetController : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetWidgetControllerParams</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BroadcastInitialValues</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BindCallbacksToDependencies</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取对象数据*/</span></span><br><span class="line"><span class="comment">//获取玩家控制器</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;APlayerController&gt; PlayerController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取玩家状态</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;APlayerState&gt; PlayerState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取能力组件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性集</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::SetWidgetControllerParams</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PlayerController = WCParams.PlayerController;</span><br><span class="line">PlayerState = WCParams.PlayerState;</span><br><span class="line">AbilitySystemComponent = WCParams.AbilitySystemComponent;</span><br><span class="line">AttributeSet = WCParams.AttributeSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::BroadcastInitialValues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::BindCallbacksToDependencies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="控制器子类"><a href="#控制器子类" class="headerlink" title="控制器子类"></a>控制器子类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OverlayWidgetController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FOnAttributeChangeData</span>;</span><br><span class="line"><span class="comment">//生命值改变时发出通知</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnHealtChangedSignature, <span class="type">float</span>, NewHealt);</span><br><span class="line"><span class="comment">//最大生命值改变时发出通知</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnMaxHealtChangedSignature,<span class="type">float</span> , NewMaxHealt);</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnManaChangedSignature, <span class="type">float</span>, NewMana);</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnMaxManaChangedSignature,<span class="type">float</span> , NewMaxMana);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖层控制器子类</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable,BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UOverlayWidgetController : <span class="keyword">public</span> UAuraWidgetController</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//当属性改变时发出通知</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BroadcastInitialValues</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//当属性改变时绑定回调</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BindCallbacksToDependencies</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件:生命值改变时发出</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnHealtChangedSignature OnHealtChanged;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件:声明最大值改变时发出</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnMaxHealtChangedSignature OnMaxHealtChanged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnManaChangedSignature OnManaChanged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnMaxManaChangedSignature OnMaxManaChanged;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 生命值改变时发出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 最大生命值改变时发出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaxHealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaxManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/OverlayWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化属性时发出通知*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::BroadcastInitialValues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BroadcastInitialValues</span>();</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AuraAttributeSet = <span class="built_in">CastChecked</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line">OnHealtChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetHealth</span>());</span><br><span class="line">OnMaxHealtChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMaxHealth</span>());</span><br><span class="line">OnManaChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMana</span>());</span><br><span class="line">OnMaxManaChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMaxMana</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*绑定属性回调*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::BindCallbacksToDependencies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BindCallbacksToDependencies</span>();</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AuraAttributeSet = <span class="built_in">CastChecked</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line"><span class="comment">//绑定生命值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetHealthAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::HealthChanged);</span><br><span class="line"><span class="comment">//绑定最大生命值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetMaxHealthAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::MaxHealthChanged);</span><br><span class="line"><span class="comment">//绑定法力值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetManaAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::ManaChanged);</span><br><span class="line"><span class="comment">//绑定最大法力值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetMaxManaAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::MaxManaChanged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                       <span class="comment">/*当属性改变时发出通知*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::HealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnHealtChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::MaxHealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnMaxHealtChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::ManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnManaChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::MaxManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnMaxManaChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h3><ul><li>事件基本在这发出和绑定</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/HUD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/Widget/AuraUserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraHUD.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UOverlayWidgetController</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAuraUserWidget</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FWidgetControllerParame</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家HUD,负责创建覆盖控件和绑定控制器</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable, BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraHUD : <span class="keyword">public</span> AHUD</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//覆盖控件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAuraUserWidget&gt; OverlayWidget;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过结构体创建或者获取控制器</span></span><br><span class="line"><span class="function">UOverlayWidgetController *<span class="title">GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化控制器数据</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitOverlay</span><span class="params">(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* ASC, UAttributeSet* AS)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//覆盖控件类引用</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UAuraUserWidget&gt; OverlayWidgetClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器实例指针</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UOverlayWidgetController&gt; OverlayWidgetController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器类引用</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UOverlayWidgetController&gt; OverlayWidgetControllerClass;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/HUD/AuraHUD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/OverlayWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">UOverlayWidgetController* <span class="title">AAuraHUD::GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(OverlayWidgetController == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">OverlayWidgetController = <span class="built_in">NewObject</span>&lt;UOverlayWidgetController&gt;(<span class="keyword">this</span>, OverlayWidgetControllerClass);</span><br><span class="line">OverlayWidgetController-&gt;<span class="built_in">SetWidgetControllerParams</span>(WCParams);</span><br><span class="line">OverlayWidgetController-&gt;<span class="built_in">BindCallbacksToDependencies</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OverlayWidgetController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraHUD::InitOverlay</span><span class="params">(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* ASC, UAttributeSet* AS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断控制器类类引用和状态UI类引用是否有效</span></span><br><span class="line"><span class="built_in">checkf</span>(OverlayWidgetClass, <span class="built_in">TEXT</span>(<span class="string">&quot;OverlayWidgetClass is nullptr&quot;</span>))</span><br><span class="line"><span class="built_in">checkf</span>(OverlayWidgetControllerClass, <span class="built_in">TEXT</span>(<span class="string">&quot;OverlayWidgetControllerClass is nullptr&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建覆盖控件</span></span><br><span class="line">UUserWidget * Widget = <span class="built_in">CreateWidget</span>&lt;UUserWidget&gt;(<span class="built_in">GetWorld</span>(), OverlayWidgetClass);</span><br><span class="line">OverlayWidget= <span class="built_in">Cast</span>&lt;UAuraUserWidget&gt;(Widget);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体并将参数构造</span></span><br><span class="line"><span class="type">const</span> FWidgetControllerParame FWidgetControllerParame = &#123;PC, PS, ASC, AS&#125;;</span><br><span class="line"><span class="comment">//获取OverlayWidgetController</span></span><br><span class="line">UOverlayWidgetController * WidgetController = <span class="built_in">GetOverlayWidgetController</span>(FWidgetControllerParame);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置覆盖控件的控制器,发出事件</span></span><br><span class="line">OverlayWidget-&gt;<span class="built_in">SetWidgetController</span>(WidgetController);</span><br><span class="line">WidgetController-&gt;<span class="built_in">BroadcastInitialValues</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到视口</span></span><br><span class="line">Widget-&gt;<span class="built_in">AddToViewport</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AuraCharacter-cpp-为初始化的地方"><a href="#AuraCharacter-cpp-为初始化的地方" class="headerlink" title="AuraCharacter.cpp*********************************************为初始化的地方"></a>AuraCharacter.cpp*********************************************为初始化的地方</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/HUD/AuraHUD.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::OnRep_PlayerState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnRep_PlayerState</span>();</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::InitAbilityActorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*初始化玩家角色能力系统和属性*/</span></span><br><span class="line">AAuraPlayerState* AuraPlayerState = <span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line"><span class="built_in">check</span>(AuraPlayerState);</span><br><span class="line">AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>()-&gt;<span class="built_in">InitAbilityActorInfo</span>(AuraPlayerState, <span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>())-&gt;<span class="built_in">AbilityActorInfoSet</span>();<span class="comment">//绑定委托,未实现</span></span><br><span class="line">AbilitySystemComponent = AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">AttributeSet = AuraPlayerState-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Mvc控制器*********************************************</span></span><br><span class="line"><span class="keyword">if</span>(AAuraPlayerController* AuraPlayerController = <span class="built_in">Cast</span>&lt;AAuraPlayerController&gt;(<span class="built_in">GetController</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(AAuraHUD* AuraHUD = <span class="built_in">Cast</span>&lt;AAuraHUD&gt;(AuraPlayerController-&gt;<span class="built_in">GetHUD</span>()))</span><br><span class="line">&#123;</span><br><span class="line">AuraHUD-&gt;<span class="built_in">InitOverlay</span>(AuraPlayerController, AuraPlayerState, AbilitySystemComponent, AttributeSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="配置GAS"><a href="#配置GAS" class="headerlink" title="配置GAS"></a>配置GAS</h1><h2 id="第一节-添加CPP类和声明"><a href="#第一节-添加CPP类和声明" class="headerlink" title="第一节:添加CPP类和声明"></a>第一节:添加CPP类和声明</h2><ul><li><p>打开插件添加UAbilitySystemComponent的c++类</p></li><li><p>添加UAttributeSet的c++类</p></li><li><p>在玩家基类添加前向声明</p></li><li><pre><code class="language-cpp">class UAbilitySystemComponent;class UAttributeSet;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3. 玩家基类添加IAbilitySystemInterface接口</span><br><span class="line">4. 声明IAbilitySystemInterface和UAttributeSet对象</span><br><span class="line"></span><br><span class="line">5. 实现接口函数virtual UAbilitySystemComponent* GetAbilitySystemComponent() const override</span><br><span class="line"></span><br><span class="line">   ```cpp</span><br><span class="line">   return IAbilitySystemInterface实例</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="6"><li>添加APlayerState c++类,将角色声明的UAbilitySystemComponent也复制一份进去,前向声明也需要</li></ol><h2 id="第二节-创建实例"><a href="#第二节-创建实例" class="headerlink" title="第二节:创建实例"></a>第二节:创建实例</h2><ul><li>玩家的需要在AAuraPlayerState构造函数上实例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AAuraPlayerState::<span class="built_in">AAuraPlayerState</span>()</span><br><span class="line">&#123;</span><br><span class="line">AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAbilitySystemComponent&gt;(<span class="string">&quot;AbilitySystemComponent&quot;</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetIsReplicated</span>(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置网络同步 同步技能冷却事件等</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetReplicationMode</span>(EGameplayEffectReplicationMode::Mixed);</span><br><span class="line"></span><br><span class="line">AttributeSet = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAttributeSet&gt;(<span class="string">&quot;AttributeSet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这段C++代码是Unreal Engine中的一部分，用于设置一个玩家状态(AAuraPlayerState)的网络更新频率</span></span><br><span class="line">NetUpdateFrequency=<span class="number">100.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>怪物的需要在怪物基类构造函数实例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ACharacterEnemy::<span class="built_in">ACharacterEnemy</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//基类AbilitySystemComponent属性</span></span><br><span class="line"><span class="comment">//创建默认子对象:</span></span><br><span class="line"><span class="comment">//设置属性复制:</span></span><br><span class="line"><span class="comment">//设定效果复制模式:</span></span><br><span class="line">AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAbilitySystemComponent&gt;(<span class="string">&quot;AbilitySystemComponent&quot;</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetIsReplicated</span>(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置网络同步,不同步技能冷却事件等</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetReplicationMode</span>(EGameplayEffectReplicationMode::Minimal);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这段代码的作用是创建并初始化一个默认的属性集(UAuraAttributeSet)作为该类的一个子对象。</span></span><br><span class="line">AttributeSet = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAttributeSet&gt;(<span class="string">&quot;AttributeSet&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三节-处理网络同步-如上注释"><a href="#第三节-处理网络同步-如上注释" class="headerlink" title="第三节:处理网络同步,如上注释"></a>第三节:处理网络同步,如上注释</h2><ul><li><p>设置怪物和玩家网络同步AbilitySystemComponent-&gt;SetReplicationMode(EGameplayEffectReplicationMode::Minimal); 带面见上边</p></li><li><p>设置怪物代理,在BeginPlay函数下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACharacterEnemy::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"><span class="built_in">check</span>(AbilitySystemComponent)</span><br><span class="line"><span class="comment">//初始化属性? 怪物自己持有,怪物自己代理</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">InitAbilityActorInfo</span>(<span class="keyword">this</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置玩家代理,在玩家基类下声明InitAbilityActorInfo()和重写两个虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACharacterBase::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line">Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnRep_PlayerState</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACharacterBase::OnRep_PlayerState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line">Super::<span class="built_in">OnRep_PlayerState</span>();</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 自己持有,代理玩家</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACharacterBase::InitAbilityActorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AAuraPlayerState* AuraPlayerState = <span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line"><span class="built_in">check</span>(AuraPlayerState);</span><br><span class="line">AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>()-&gt;<span class="built_in">InitAbilityActorInfo</span>(AuraPlayerState, <span class="keyword">this</span>);  </span><br><span class="line"><span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>())-&gt;<span class="built_in">AbilityActorInfoSet</span>(); <span class="comment">//漏写</span></span><br><span class="line">AbilitySystemComponent = AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">AttributeSet = AuraPlayerState-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第四节-属性声明"><a href="#第四节-属性声明" class="headerlink" title="第四节:属性声明"></a>第四节:属性声明</h2><ul><li><p>属性声明打开UAttributeSet</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*在虚幻引擎5（UE5）中，UAttributeSet 是一个用于存储和管理游戏中实体（如角色、敌人等）属性的数据结构。</span></span><br><span class="line"><span class="comment"> *它是基于 Unreal 的属性系统（Attribute System），该系统设计用于高效地处理和同步这些属性，尤其是在网络环境中。</span></span><br><span class="line"><span class="comment">UAttributeSet 类通常作为蓝图类或者C++类的一个成员变量来使用，</span></span><br><span class="line"><span class="comment">它允许开发者定义一系列属性，如生命值（Health）、魔法值（Mana）、力量（Strength）等，并提供了访问和修改这些属性值的接口。</span></span><br><span class="line"><span class="comment">这些属性可以被标记为需要在网络上同步，以便于多人游戏中的状态同步。</span></span><br><span class="line"><span class="comment">要创建自定义的 UAttributeSet 类，你需要继承自 UAttributeSet 并定义你的属性。</span></span><br><span class="line"><span class="comment">这通常涉及到使用 UPROPERTY() 宏来声明属性，并可能使用 UPROPERTY(Replicated) 来确保它们在网络上的客户端间正确同步。</span></span><br><span class="line"><span class="comment">此外，你可能还需要实现一些逻辑来处理属性的变化，例如当生命值减少到零时触发死亡事件*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraAttributeSet.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置访问宏</span></span><br><span class="line"><span class="comment">//在虚幻引擎（Unreal Engine）的C++编程中，</span></span><br><span class="line"><span class="comment">//ATTRIBUTE_ACCESSORS 是一个宏，用于自动生成属性（Attribute）的存取器（Getter 和 Setter）函数。</span></span><br><span class="line"><span class="comment">//这个宏常用于UAttributeSet子类中，以便于更便捷地操作游戏属性，如角色的生命值、能量、攻击力等</span></span><br><span class="line"><span class="comment">//使用 ATTRIBUTE_ACCESSORS 宏可以减少重复代码，让代码更加简洁且易于维护。</span></span><br><span class="line"><span class="comment">//它通常与属性声明一起使用，自动为你生成相应的函数来读取和设置 FGameplayAttributeData 中的属性值。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ATTRIBUTE_ACCESSORS(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_GETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_SETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_INITTER(PropertyName)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GASDEMO_API</span> UAuraAttributeSet : <span class="keyword">public</span> UAttributeSet</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UAuraAttributeSet</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*属性声明*/</span></span><br><span class="line"><span class="comment">//生命值</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Health, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Health;                  <span class="comment">//GameplayAttributeData 结构体是用来存储游戏属性的具体数值及其相关元数据的</span></span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Health); </span><br><span class="line"><span class="comment">//最大生命值</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxHealth, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData MaxHealth;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, MaxHealth);</span><br><span class="line"><span class="comment">//魔法值</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Mana, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Mana;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Mana);</span><br><span class="line"><span class="comment">//最大魔法值</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxMana, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData MaxMana;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, MaxMana);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*属性函数*/</span></span><br><span class="line"><span class="comment">//在你的代码中，OnRep_Health 是一个 Unreal Engine 中的特殊函数，用于处理网络复制（replication）过程中属性发生变化的情况。</span></span><br><span class="line"><span class="comment">//当一个具有 replicated 属性的变量（在这个例子中似乎是Health，尽管它没有直接展示出来）在服务器上发生改变时，</span></span><br><span class="line"><span class="comment">//此函数会在所有相关的客户端上被调用来反映这一变化，确保所有玩家看到的游戏状态是一致的</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Mana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMana)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_MaxMana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxMana)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Net/UnrealNetwork.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UAuraAttributeSet::<span class="built_in">UAuraAttributeSet</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="built_in">InitHealth</span>(<span class="number">100.f</span>);</span><br><span class="line"><span class="built_in">InitMaxHealth</span>(<span class="number">100.f</span>);</span><br><span class="line"><span class="built_in">InitMana</span>(<span class="number">50.f</span>);</span><br><span class="line"><span class="built_in">InitMaxMana</span>(<span class="number">50.f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*注册属性*/</span></span><br><span class="line"><span class="comment">//在Unreal Engine网络编程中，DOREPLIFETIME_CONDITION_NOTIFY 宏用于控制特定Actor或ActorComponent属性的生命周期管理，</span></span><br><span class="line"><span class="comment">//特别是关于其在网络中的复制行为。</span></span><br><span class="line"><span class="comment">//这个宏帮助你定义哪些属性应该在网络上同步，以及在什么条件下同步，同时还能在属性发生变化时触发自定义的通知回调。</span></span><br><span class="line"><span class="comment">//UAuraAttributeSet: 这里指定了属性所属的类，即属性集类，它通常继承自 UAttributeSet 并用于存储游戏角色的各种属性。</span></span><br><span class="line"><span class="comment">//Health: 指定要管理其网络生命周期的属性名。在这个上下文中，Health 是玩家或角色的一个关键属性，需要在网络环境中实时同步</span></span><br><span class="line"><span class="comment">//COND_None: 这是同步条件。COND_None 表示没有特别的条件限制，意味着无论何时只要属性值改变就会尝试进行同步。</span></span><br><span class="line"><span class="comment">//在其他情况下，可能会有比如仅当玩家拥有控制器 (COND_OwnerOnly) 或者仅当属性在特定范围内改变 (COND_SkipIfNotDirty) 等条件。</span></span><br><span class="line"><span class="comment">//EPNOTIFY_Always: 这决定何时触发通知回调。REPNOTIFY_Always 表明每次属性值改变时，不论是在服务器还是客户端，都会调用通知回调函数（通常是 OnRep_Health）。</span></span><br><span class="line"><span class="comment">//这意味着每次 Health 值发生变动，即使变动后的值与旧值相同，也会触发通知。</span></span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, MaxHealth, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Mana, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, MaxMana, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*属性函数实现*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//宏的作用：此宏会在编译时期生成必要的代码来自动调用 OnRep_Health 函数，当 Health 属性的值在服务器上发生变化时。</span></span><br><span class="line"><span class="comment">//它确保了当属性的值由于服务器端的更新而有所不同时，所有相关的客户端都会得到通知，并执行相应的 OnRep_Health 回调。</span></span><br><span class="line"><span class="comment">//UAuraAttributeSet：这是属性集类的名称，即定义属性和复制逻辑的类。</span></span><br><span class="line"><span class="comment">//Health：这是你要为其添加复制通知的属性名称。这意味着每当 Health 属性的值发生变化时，框架都会自动处理网络同步。</span></span><br><span class="line"><span class="comment">//ldHealth：这是传递给 OnRep_Health 回调函数的参数名称，表示属性更改前的旧值。这允许你在回调中比较新旧值并做出相应处理</span></span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Health, OldHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, MaxHealth, OldMaxHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Mana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMana)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Mana, OldMana);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_MaxMana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxMana)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, MaxMana, OldMaxMana);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="代码文件夹"><a href="#代码文件夹" class="headerlink" title="代码文件夹"></a>代码文件夹</h2><table><thead><tr><th>文件夹</th><th>中文</th></tr></thead><tbody><tr><td>Ability System</td><td>能力系统</td></tr><tr><td>Actor</td><td>演员</td></tr><tr><td>AI</td><td>人工智能</td></tr><tr><td>Anim Notifies</td><td>动画通知</td></tr><tr><td>Characte</td><td>角色</td></tr><tr><td>checkpoint</td><td>检查站,存档点</td></tr><tr><td>Game</td><td>游戏</td></tr><tr><td>Input</td><td>输入</td></tr><tr><td>MainMenu</td><td>主菜单</td></tr><tr><td>Player</td><td>玩家</td></tr><tr><td>Spawn Volumes</td><td>产卵量</td></tr><tr><td>UI</td><td>UI</td></tr></tbody></table><h2 id="Ability-System"><a href="#Ability-System" class="headerlink" title="Ability System"></a>Ability System</h2><ul><li>Abilities 技能</li><li>AbilityTasks 鼠标</li></ul><table><thead><tr><th>类</th><th>描述</th><th>继承</th></tr></thead><tbody><tr><td>AuraGameplayAbility</td><td>该C++类定义了一个游戏中的技能组件</td><td>UGameplayAbility</td></tr><tr><td>UAuraDamageGameplayAbility</td><td>&#x2F;&#x2F;该C++类定义了一个名为UAuraDamageGameplayAbility的游戏能力，继承自UAuraGameplayAbility。主要功能包括： &#x2F;&#x2F; CauseDamage：对目标造成伤害。 &#x2F;&#x2F; MakeDamageEffectParamsFromClassDefaults：根据类默认值生成伤害效果参数。 &#x2F;&#x2F; GetDamageAtLevel：获取当前等级下的伤害值。 &#x2F;&#x2F; 包含多个编辑器属性，如伤害类型、伤害值、减益效果等，用于配置伤害行为</td><td>AuraGameplayAbility</td></tr><tr><td>UAuraPassiveAbility</td><td>&#x2F;&#x2F; 该C++类定义了一个名为UAuraPassiveAbility的被动技能基类，继承自UAuraGameplayAbility。主要包含两个函数： &#x2F;&#x2F; ActivateAbility：重写父类的激活能力函数，用于初始化被动技能。 &#x2F;&#x2F; ReceiveDeactivate：接收并处理被动技能被移除或失效的情况，参数为一个游戏标签</td><td>AuraGameplayAbility</td></tr><tr><td>UAuraSummonAbility</td><td>&#x2F;&#x2F; 该C++类UAuraSummonAbility继承自UAuraGameplayAbility，主要用于游戏中的召唤功能。主要功能如下： &#x2F;&#x2F; GetSpawnLocations：返回一系列用于召唤的位置向量。 &#x2F;&#x2F; GetRandomMinionClass：返回一个随机的召唤物（小兵）类。 &#x2F;&#x2F; NumMinions：设置需要召唤的小兵数量，默认为5。 &#x2F;&#x2F; MinionClasses：存储可召唤的小兵类列表。 &#x2F;&#x2F; MinSpawnDistance：设置最小召唤距离，默认为50单位。 &#x2F;&#x2F; MaxSpawnDistance：设置最大召唤距离，默认为250单位。 &#x2F;&#x2F; SpawnSpread：设置召唤物分布的角度范围，默认为90度。</td><td>AuraGameplayAbility</td></tr><tr><td>UArcaneShards</td><td>&#x2F;&#x2F;该C++类UArcaneShards继承自UAuraDamageGameplayAbility，主要用于游戏中的某种伤害能力。它包含： &#x2F;&#x2F; 虚拟函数GetDescription，返回技能描述。 &#x2F;&#x2F; 虚拟函数GetNextLevelDescription，返回升级后的技能描述。 &#x2F;&#x2F; 成员变量MaxNumShards，存储最大碎片数量，默认为11。</td><td>UAuraDamageGameplayAbility</td></tr><tr><td>UAuraBeamSpell</td><td>&#x2F;&#x2F; 该C++类UAuraBeamSpell继承自UAuraDamageGameplayAbility，主要用于实现游戏中的一种光束法术能力。其主要功能包括： &#x2F;&#x2F; 存储鼠标点击信息（位置和演员）。 &#x2F;&#x2F; 追踪首个目标的位置。 &#x2F;&#x2F; 存储额外的目标列表。 &#x2F;&#x2F; 处理主要目标和额外目标死亡事件。 &#x2F;&#x2F; 其中成员变量定义了鼠标点击位置、点击到的演员、拥有者控制器及角色等信息，并设置了最大可追踪目标数量为5。</td><td>UAuraDamageGameplayAbility</td></tr><tr><td>UAuraFireBlast</td><td>&#x2F;&#x2F; 该C++类UAuraFireBlast继承自UAuraDamageGameplayAbility，主要功能包括： &#x2F;&#x2F; 生成火球描述文本（GetDescription和GetNextLevelDescription方法）。 &#x2F;&#x2F; 召唤多个火球（通过SpawnFireBalls方法）。 &#x2F;&#x2F; 定义了火球数量（NumFireBalls属性，默认为12）和火球类（FireBallClass属性）</td><td>UAuraDamageGameplayAbility</td></tr><tr><td>UAuraMeleeAttack</td><td></td><td>UAuraDamageGameplayAbility</td></tr><tr><td>UElectrocute</td><td>&#x2F;&#x2F; 该C++类UElectrocute继承自UAuraBeamSpell，主要用于实现游戏中的“电击”法术效果。其功能包括： &#x2F;&#x2F; 重写GetDescription方法，用于获取当前等级的法术描述。 &#x2F;&#x2F; 重写GetNextLevelDescription方法，用于获取升级后的法术描述。</td><td>UAuraBeamSpell</td></tr><tr><td>UAuraFireBolt</td><td></td><td>UAuraProjectileSpell</td></tr><tr><td>UElectrocute</td><td></td><td>UAuraBeamSpell</td></tr></tbody></table><p>graph TD;<br>    A–&gt;B;<br>    A–&gt;C;<br>    B–&gt;D;</p><h2 id="UI-MVC架构"><a href="#UI-MVC架构" class="headerlink" title="UI MVC架构"></a>UI MVC架构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要的代码</span><br><span class="line">小部件控制器 负责操作数据</span><br><span class="line">小部件 负责显示属性</span><br><span class="line">HUD 负责绘制小部件</span><br></pre></td></tr></table></figure><ul><li>HUD</li><li>ViewModel MVVM</li><li>Widget 控件基类</li><li>WidgetController  小部件控制</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="Ability-System-技能管理"><a href="#Ability-System-技能管理" class="headerlink" title="Ability System 技能管理"></a>Ability System 技能管理</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>AuraSummonAbility</strong></td><td>怪物召唤</td></tr><tr><td>ProjectileSpell</td><td>投射物</td></tr><tr><td>UAuraBeamSpell</td><td>光束</td></tr><tr><td><strong>Electrocute</strong>：继承UArcaneShards</td><td>雷电技能</td></tr><tr><td>UArcaneShards</td><td>水晶碎片</td></tr><tr><td>UAuraFireBlast</td><td>多火球</td></tr><tr><td>UAuraFireBolt：继承投射物ProjectileSpell</td><td>火球</td></tr><tr><td>UAuraGameplayAbility</td><td>基类</td></tr><tr><td>UAuraPassiveAbility</td><td>被动</td></tr><tr><td>UAuraDamageGameplayAbility</td><td>处理伤害</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="Actor-技能实例"><a href="#Actor-技能实例" class="headerlink" title="Actor 技能实例"></a>Actor 技能实例</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>AuraEffectActor</td><td>火焰</td><td></td></tr><tr><td>AuraEnemySpawnPoint</td><td>敌人生成</td><td></td></tr><tr><td>Enemy Spawn Volume</td><td>敌人生成</td><td></td></tr><tr><td>Fire Ball</td><td>火球</td><td></td></tr><tr><td>AuraProjectile</td><td>弹</td><td></td></tr><tr><td>Magic Circle</td><td>魔术圈</td><td></td></tr><tr><td>Point Collection</td><td>点集合</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h1><h2 id="ACS配置"><a href="#ACS配置" class="headerlink" title="ACS配置"></a>ACS配置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GasDemo</span> : ModuleRules</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GasDemo</span><span class="params">(ReadOnlyTargetRules Target)</span> : base(Target)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>,<span class="string">&quot;EnhancedInput&quot;</span>, <span class="string">&quot;GameplayAbilities&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">PrivateDependencyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123; <span class="string">&quot;GameplayTags&quot;</span>, <span class="string">&quot;GameplayTasks&quot;</span>, <span class="string">&quot;NavigationSystem&quot;</span>, <span class="string">&quot;Niagara&quot;</span>, <span class="string">&quot;AIModule&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment if you are using Slate UI</span></span><br><span class="line"><span class="comment">// PrivateDependencyModuleNames.AddRange(new string[] &#123; &quot;Slate&quot;, &quot;SlateCore&quot; &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment if you are using online features</span></span><br><span class="line"><span class="comment">// PrivateDependencyModuleNames.Add(&quot;OnlineSubsystem&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To include OnlineSubsystemSteam, add it to the plugins section in your uproject file with the Enabled attribute set to true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><h3 id="UAttributeSet配置"><a href="#UAttributeSet配置" class="headerlink" title="UAttributeSet配置"></a>UAttributeSet配置</h3><p>showdebug abilitysystem 显示属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyAttributeSet.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ATTRIBUTE_ACCESSORS(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_GETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_SETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_INITTER(PropertyName)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JIANGBAODEMO_API</span> UMyAttributeSet : <span class="keyword">public</span> UAttributeSet</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UMyAttributeSet</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Health, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Health;                  </span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UMyAttributeSet, Health); </span><br><span class="line"><span class="comment">//最大生命值</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxHealth, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData MaxHealth;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UMyAttributeSet, MaxHealth);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyAttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Net/UnrealNetwork.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UMyAttributeSet::<span class="built_in">UMyAttributeSet</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">InitHealth</span>(<span class="number">100.f</span>);</span><br><span class="line"><span class="built_in">InitMaxHealth</span>(<span class="number">100.f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UMyAttributeSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UMyAttributeSet, MaxHealth, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UMyAttributeSet, Health, OldHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UMyAttributeSet, MaxHealth, OldMaxHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PlayerState配置"><a href="#PlayerState配置" class="headerlink" title="PlayerState配置"></a>PlayerState配置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/PlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraPlayerState.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GASDEMO_API</span> AAuraPlayerState : <span class="keyword">public</span> APlayerState,<span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AAuraPlayerState</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function">UAttributeSet* <span class="title">GetAttributeSet</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> AttributeSet; &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="comment">//指向UAbilitySystemComponent的智能指针，用于管理玩家的能力和效果。</span></span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="comment">//指向UAttributeSet的智能指针，用于存储玩家的属性值，如生命值、魔法值等</span></span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">AAuraPlayerState::<span class="built_in">AAuraPlayerState</span>()</span><br><span class="line">&#123;</span><br><span class="line">AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAbilitySystemComponent&gt;(<span class="string">&quot;AbilitySystemComponent&quot;</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetIsReplicated</span>(<span class="literal">true</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetReplicationMode</span>(EGameplayEffectReplicationMode::Mixed);</span><br><span class="line"></span><br><span class="line">AttributeSet = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAttributeSet&gt;(<span class="string">&quot;AttributeSet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这段C++代码是Unreal Engine中的一部分，用于设置一个玩家状态(AAuraPlayerState)的网络更新频率</span></span><br><span class="line">NetUpdateFrequency=<span class="number">100.f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口继承的方法，返回AbilitySystemComponent</span></span><br><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AAuraPlayerState::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="玩家配置"><a href="#玩家配置" class="headerlink" title="玩家配置"></a>玩家配置</h3><ul><li>基类</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraCharacterBase : <span class="keyword">public</span> ACharacter,<span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AAuraCharacterBase</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function">UAttributeSet* <span class="title">GetAttributeSet</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> AttributeSet; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*UAbilitySystemComponent对象*/</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"><span class="comment">/*UAttributeSet对象*/</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AAuraCharacterBase::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraCharacter : <span class="keyword">public</span> AAuraCharacterBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//网络同步相关</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnRep_PlayerState</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitAbilityActorInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::OnRep_PlayerState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnRep_PlayerState</span>();</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::InitAbilityActorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*初始化玩家角色能力系统和属性*/</span></span><br><span class="line">AAuraPlayerState* AuraPlayerState = <span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line"><span class="built_in">check</span>(AuraPlayerState);</span><br><span class="line">    <span class="comment">//玩家状态对玩家角色施加?</span></span><br><span class="line">AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>()-&gt;<span class="built_in">InitAbilityActorInfo</span>(AuraPlayerState, <span class="keyword">this</span>); <span class="comment">//如果是怪物则AuraPlayerState改为this</span></span><br><span class="line"><span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>())-&gt;<span class="built_in">AbilityActorInfoSet</span>();<span class="comment">//绑定委托,未实现</span></span><br><span class="line">AbilitySystemComponent = AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">AttributeSet = AuraPlayerState-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加和删除"><a href="#添加和删除" class="headerlink" title="添加和删除"></a>添加和删除</h3><ul><li>添加</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbilitySystemComponent-&gt;SpawnedAttributes.<span class="built_in">AddUnique</span>(WeaponAttributeSetPointer);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">ForceReplication</span>();</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbilitySystemComponent-&gt;SpawnedAttributes.<span class="built_in">Remove</span>(WeaponAttributeSetPointer);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">ForceReplication</span>();</span><br></pre></td></tr></table></figure><h2 id="能力（Ability）"><a href="#能力（Ability）" class="headerlink" title="能力（Ability）"></a>能力（Ability）</h2><h3 id="GA一般要做的事"><a href="#GA一般要做的事" class="headerlink" title="GA一般要做的事"></a>GA一般要做的事</h3><ul><li><p>设置GA的Tag、CD、Cost等属性。</p></li><li><p>获取必要信息，主要通过Get Actor Info。如果是通过Event调用的GA（使用Activate Ability From Event节点作为输入），还可以通过Gameplay Event Data获取。</p></li><li><p>编写逻辑，如播放动画、应用GE、应用冲量等。</p></li><li><p>一定不要忘了EndAbility。</p><h3 id="标签（Tags）"><a href="#标签（Tags）" class="headerlink" title="标签（Tags）"></a>标签（Tags）</h3><ul><li>能力标签（Ability Tags）</li><li>取消带标签的能力（Cancel abilities with tag）</li><li>锁定带标签的能力（vlock [应为“lock”的误写] abilities with tag）</li><li>激活拥有的标签（activation owned tags）</li><li>激活被阻止的标签（activation blocked tags）</li><li>源所需标签（source required tags）</li><li>源被阻止的标签（source blocked tags）</li><li>目标所需标签（target required tags）</li><li>目标被阻止的标签（target blocked tags）</li></ul><h3 id="输入（Input）"><a href="#输入（Input）" class="headerlink" title="输入（Input）"></a>输入（Input）</h3><ul><li>直接复制输入（Replicate Input Directly）</li></ul><h3 id="高级（Advanced）"><a href="#高级（Advanced）" class="headerlink" title="高级（Advanced）"></a>高级（Advanced）</h3><ul><li>复制策略（ReplicationPolicy）</li><li>实例化策略（Instancing Policy）</li><li>服务器尊重远程能力取消（Server Respects Remote Ability Cancellation）</li><li>重新触发实例化能力（Retrigger Instanced Ability）</li><li>网络执行策略（Net Execution Policy）</li><li>网络安全策略（Net Security Policy）</li></ul><h3 id="成本（Costs）"><a href="#成本（Costs）" class="headerlink" title="成本（Costs）"></a>成本（Costs）</h3><ul><li>成本游戏效果类（Cost Gameplay Effect Class）</li></ul><h3 id="触发器（Triggers）"><a href="#触发器（Triggers）" class="headerlink" title="触发器（Triggers）"></a>触发器（Triggers）</h3><ul><li>能力触发器（Ability Triggers）</li></ul><h3 id="冷却时间（Cooldowns）"><a href="#冷却时间（Cooldowns）" class="headerlink" title="冷却时间（Cooldowns）"></a>冷却时间（Cooldowns）</h3><ul><li>冷却时间游戏效果类（Cooldown Gameplay Effect Class）</li></ul></li></ul><h4 id="申请GE实现扣血"><a href="#申请GE实现扣血" class="headerlink" title="申请GE实现扣血"></a>申请GE实现扣血</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">applygameplayeffecttoowner</span><br><span class="line">    playmontageandwai</span><br></pre></td></tr></table></figure><h2 id="GE"><a href="#GE" class="headerlink" title="GE"></a>GE</h2><ul><li>编辑器状态文本 (Editor Status Text)</li><li>持续时间 (Duration)<ul><li>Instant 立即生效</li><li>Infinite 永久生效</li><li>Period 周期内生效</li></ul></li><li>游戏效果 (Gameplay Effect)<ul><li>组件 (Components)</li><li>修饰符 (Modifiers)</li><li>执行 (Executions)</li></ul></li><li>游戏提示 (Gameplay Cues)<ul><li>Require Modifier Success to Trigger Cues 需要修饰符成功才能触发提示</li><li>Suppress Stacking Cues 抑制叠加提示</li><li>Gameplay Cues 游戏提示</li></ul></li><li>叠加 (Stacking)<ul><li>Stacking Type 叠加类型</li></ul></li></ul><h1 id="蓝图文件夹"><a href="#蓝图文件夹" class="headerlink" title="蓝图文件夹"></a>蓝图文件夹</h1><h2 id="AbilitySystem-能力系统"><a href="#AbilitySystem-能力系统" class="headerlink" title="AbilitySystem 能力系统"></a>AbilitySystem 能力系统</h2><ul><li>定义能力系统,包括GE,GA,GC和属性数据</li></ul><h3 id="Aura"><a href="#Aura" class="headerlink" title="Aura"></a>Aura</h3><ul><li>Abilities 能力  里边的蓝图好像是魔法阵的</li><li>Effects 效果 用于初始化数据的GE类</li></ul><h3 id="data-数据表格和数据资产"><a href="#data-数据表格和数据资产" class="headerlink" title="data 数据表格和数据资产"></a>data 数据表格和数据资产</h3><h4 id="Enemy-怪物的技能和能力"><a href="#Enemy-怪物的技能和能力" class="headerlink" title="Enemy 怪物的技能和能力"></a>Enemy 怪物的技能和能力</h4><h4 id="GameplayCueNotifies-特效和音效等"><a href="#GameplayCueNotifies-特效和音效等" class="headerlink" title="GameplayCueNotifies 特效和音效等"></a>GameplayCueNotifies 特效和音效等</h4><h4 id="GameplayTags-游戏标签数据表"><a href="#GameplayTags-游戏标签数据表" class="headerlink" title="GameplayTags 游戏标签数据表"></a>GameplayTags 游戏标签数据表</h4><h2 id="Actor-演员-用于当玩家碰撞物品时将效果应用到玩家身上"><a href="#Actor-演员-用于当玩家碰撞物品时将效果应用到玩家身上" class="headerlink" title="Actor 演员(用于当玩家碰撞物品时将效果应用到玩家身上)"></a>Actor 演员(用于当玩家碰撞物品时将效果应用到玩家身上)</h2><h4 id="Area-地火演员和GE"><a href="#Area-地火演员和GE" class="headerlink" title="Area 地火演员和GE"></a>Area 地火演员和GE</h4><h4 id="Crystal-水晶"><a href="#Crystal-水晶" class="headerlink" title="Crystal 水晶"></a>Crystal 水晶</h4><h4 id="FadeActor-建筑蓝图-继承接口-识别可点击点"><a href="#FadeActor-建筑蓝图-继承接口-识别可点击点" class="headerlink" title="FadeActor 建筑蓝图,继承接口,识别可点击点?"></a>FadeActor 建筑蓝图,继承接口,识别可点击点?</h4><h4 id="FlamePillar-火焰柱"><a href="#FlamePillar-火焰柱" class="headerlink" title="FlamePillar 火焰柱"></a>FlamePillar 火焰柱</h4><h4 id="Potion-药水"><a href="#Potion-药水" class="headerlink" title="Potion 药水"></a>Potion 药水</h4><h4 id="Test-Actor-测试的演员"><a href="#Test-Actor-测试的演员" class="headerlink" title="Test Actor 测试的演员"></a>Test Actor 测试的演员</h4><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h2 id="AnimNotifies-动画通知"><a href="#AnimNotifies-动画通知" class="headerlink" title="AnimNotifies 动画通知"></a>AnimNotifies 动画通知</h2><h2 id="Character-角色-除了玩家怪物都没用蓝图节点"><a href="#Character-角色-除了玩家怪物都没用蓝图节点" class="headerlink" title="Character  角色  (除了玩家怪物都没用蓝图节点)"></a>Character  角色  (除了玩家怪物都没用蓝图节点)</h2><h2 id="Checkpoint-检查点-用了蓝图"><a href="#Checkpoint-检查点-用了蓝图" class="headerlink" title="Checkpoint 检查点 (用了蓝图)"></a>Checkpoint 检查点 (用了蓝图)</h2><h2 id="Game-游戏-游戏单例类-包含存储"><a href="#Game-游戏-游戏单例类-包含存储" class="headerlink" title="Game 游戏 (游戏单例类,包含存储)"></a>Game 游戏 (游戏单例类,包含存储)</h2><h2 id="Input-输入-输入映射配置"><a href="#Input-输入-输入映射配置" class="headerlink" title="Input 输入 (输入映射配置)"></a>Input 输入 (输入映射配置)</h2><h2 id="MainMenu-主菜单-开始界面"><a href="#MainMenu-主菜单-开始界面" class="headerlink" title="MainMenu 主菜单 (开始界面)"></a>MainMenu 主菜单 (开始界面)</h2><h2 id="Player-玩家-玩家控制器和玩家状态蓝图"><a href="#Player-玩家-玩家控制器和玩家状态蓝图" class="headerlink" title="Player 玩家 (玩家控制器和玩家状态蓝图)"></a>Player 玩家 (玩家控制器和玩家状态蓝图)</h2><h2 id="SpawnVolumes-产卵量"><a href="#SpawnVolumes-产卵量" class="headerlink" title="SpawnVolumes 产卵量"></a>SpawnVolumes 产卵量</h2><h2 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h2><h4 id="data-数据表"><a href="#data-数据表" class="headerlink" title="data 数据表"></a>data 数据表</h4><h4 id="HUD-1"><a href="#HUD-1" class="headerlink" title="HUD"></a>HUD</h4><h4 id="ViewModel-数据模型"><a href="#ViewModel-数据模型" class="headerlink" title="ViewModel 数据模型"></a>ViewModel 数据模型</h4><h4 id="WidgetController-小部件控制器-继承者UObject"><a href="#WidgetController-小部件控制器-继承者UObject" class="headerlink" title="WidgetController 小部件控制器 继承者UObject"></a>WidgetController 小部件控制器 继承者UObject</h4>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ue5API</title>
      <link href="/2024/03/30/ue5/%E5%8F%98%E9%87%8F/API/"/>
      <url>/2024/03/30/ue5/%E5%8F%98%E9%87%8F/API/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><pre><code>## 组件API</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件的声明及应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例组件</span></span><br><span class="line">StaticMeshComponent=<span class="built_in">CreateDefaultSubobject</span>&lt;UStaticMeshComponent&gt;(<span class="string">&quot;AuraStaticMeshComponent&quot;</span>);</span><br><span class="line"><span class="built_in">SetRootComponent</span>(StaticMeshComponent);  <span class="comment">//设置为根组件</span></span><br><span class="line">SkeletalMeshComponent-&gt;<span class="built_in">SetupAttachment</span>(父级);  <span class="comment">//切换组件层级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下两个在调用SetupAttachment后可以不用</span></span><br><span class="line"><span class="comment">//注册组件</span></span><br><span class="line">SkeletalMeshComponent-&gt;<span class="built_in">RegisterComponent</span>()</span><br><span class="line"><span class="comment">//添加组件进数组</span></span><br><span class="line"><span class="built_in">AddInstanceComponent</span>(SkeletalMeshComponent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按类查找组件</span></span><br><span class="line"><span class="built_in">FindComponentByClass</span>()</span><br><span class="line">UMyCustomComponent* MyComponent = <span class="built_in">FindComponentByClass</span>(MyActor, UMyCustomComponent::<span class="built_in">StaticClass</span>());</span><br><span class="line"><span class="comment">//直接访问公开的成员变量</span></span><br><span class="line">就是组件你已经给定了变量来存储</span><br><span class="line"><span class="comment">//使用Tag标签查找</span></span><br></pre></td></tr></table></figure><p>SetVisibility(bool): 设置组件是否可见。传入true表示显示，false表示隐藏。<br>SetWorldLocation(FVector): 设置组件在世界空间中的位置。<br>SetWorldRotation(FRotator): 设置组件在世界空间中的旋转。<br>SetWorldScale3D(FVector): 设置组件在世界空间中的缩放比例。<br>AddLocalOffset(FVector, bool): 在组件的本地坐标系下添加一个偏移量。第二个参数决定是否更新组件的物理状态。<br>AddLocalRotation(FRotator, bool): 在组件的本地坐标系下添加一个旋转增量。第二个参数决定是否更新组件的物理状态。<br>SetRelativeLocation(FVector): 设置组件相对于其父组件的位置。<br>SetRelativeRotation(FRotator): 设置组件相对于其父组件的旋转。<br>SetCollisionEnabled(ECollisionEnabled::Type): 控制组件的碰撞检测模式，如禁用、查询或物理模拟。<br>SetCollisionProfileName(FName): 改变组件的碰撞配置文件，用于定义组件的碰撞行为。<br>AttachToComponent(UPrimitiveComponent, FAttachmentTransformRules, FName)<em>: 将当前组件附加到指定的父组件上，并可自定义附加规则（如是否保持相对位置、旋转等）。<br>DetachFromParent(bool): 从父组件上分离当前组件。如果参数为true，则保持当前位置和旋转；否则，重置到组件的初始变换。<br>SetSimulatePhysics(bool): 开启或关闭组件的物理模拟，使组件受到物理引擎的影响。<br>SetMaterial(int32, UMaterialInterface)</em>: 更改组件材质的某一索引处的材质。<br>GetOwner(): 获取组件所属的Actor。</p><ul><li>源文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Myclass::构造函数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加到对象</span></span><br><span class="line">    myclass = CreateDefaultSubobject&lt;USceneCo</span><br></pre></td></tr></table></figure><h1 id="加载静态网格体资源"><a href="#加载静态网格体资源" class="headerlink" title="加载静态网格体资源"></a>加载静态网格体资源</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditInstanceOnly, Category = <span class="string">&quot;StaticMesh&quot;</span>)</span><br><span class="line">UStaticMeshComponent* StaticMeshComponent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> ConstructorHelpers::FObjectFinder&lt;UStaticMesh&gt;<span class="built_in">Cube</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;/Script/Engine.StaticMesh&#x27;/Game/StarterContent/Shapes/Shape_Tube.Shape_Tube&#x27;&quot;</span>)); <span class="comment">//加载资源</span></span><br><span class="line">StaticMeshComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UStaticMeshComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">//组件名字</span></span><br><span class="line">StaticMeshComponent-&gt;<span class="built_in">SetupAttachment</span>(RootComponent);     <span class="comment">//添加组件 RootComponent父级</span></span><br><span class="line">StaticMeshComponent-&gt;<span class="built_in">SetStaticMesh</span>(Cube.Object);         <span class="comment">//设置静态网格</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="添加骨骼网格体"><a href="#添加骨骼网格体" class="headerlink" title="添加骨骼网格体"></a>添加骨骼网格体</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">USkeletalMesh*Skletamesh;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateMode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">()</span></span>;&#123;</span><br><span class="line">  Skletamesh=<span class="built_in">LoadObject</span>&lt;USkeletalMesh&gt;(<span class="literal">NULL</span>,<span class="built_in">TEXT</span>(CHAT));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateMode</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">GetMesh</span>()-&gt;设置旋转(); <span class="number">0</span>,<span class="number">-90</span>,<span class="number">0</span></span><br><span class="line"><span class="built_in">GetMesh</span>()-&gt;设置位置(); <span class="number">0</span>,<span class="number">0</span>,<span class="number">-100</span></span><br><span class="line"><span class="built_in">GetMesh</span>()-&gt;<span class="built_in">SetSkeletaMesh</span>(Skletamesh); <span class="comment">//设置网格体</span></span><br><span class="line"><span class="built_in">GetCapsuleComponent</span>()-&gt;<span class="built_in">InitCapsuleSize</span>(<span class="number">4.</span>,<span class="number">100</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取玩家对象"><a href="#获取玩家对象" class="headerlink" title="获取玩家对象"></a>获取玩家对象</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取玩家控制器和玩家的Pawn</span></span><br><span class="line">APlayerController* PlayerController = UGameplayStatics::<span class="built_in">GetPlayerController</span>(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断玩家引用是否有效</span></span><br><span class="line"><span class="keyword">if</span> (PlayerController)</span><br><span class="line">&#123;</span><br><span class="line">APawn* Pawn = PlayerController-&gt;<span class="built_in">GetPawn</span>();</span><br><span class="line"><span class="keyword">if</span> (Pawn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;PlayerController:%s, Pawn:%s&quot;</span>), *PlayerController-&gt;<span class="built_in">GetName</span>(), *Pawn-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;PlayerController:%s, Pawn:NULL&quot;</span>), *PlayerController-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;未能获取到 PlayerController&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类-UGameplayStatics"><a href="#类-UGameplayStatics" class="headerlink" title="类:UGameplayStatics"></a>类:UGameplayStatics</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UGameplayStatics 是 Unreal Engine 中的一个静态类，提供了一些便捷的静态方法，帮助开发者在游戏中执行常见的操作，比如获取游戏实例、玩家控制器、播放声音、生成粒子效果等。它主要用于简化一些重复性操作，避免直接操作底层 API。</span><br><span class="line"></span><br><span class="line">主要功能</span><br><span class="line">以下是 UGameplayStatics 常见的一些功能：</span><br><span class="line"></span><br><span class="line">获取玩家控制器：例如，UGameplayStatics::GetPlayerController 可以获取当前玩家的控制器。</span><br><span class="line"></span><br><span class="line">获取玩家角色：还有一个方法 UGameplayStatics::GetPlayerPawn，可以直接获取到第一个玩家的角色（Pawn）。</span><br><span class="line"></span><br><span class="line">生成对象：使用如 UGameplayStatics::SpawnActor 来在世界中生成新的对象（例如生成子弹或敌人）。</span><br><span class="line"></span><br><span class="line">播放声音/音乐：可以通过 UGameplayStatics::PlaySoundAtLocation 播放指定位置的声音等。</span><br><span class="line"></span><br><span class="line">蓝图与 C++ 的交互：UGameplayStatics 提供的方法可在蓝图中使用，方便设计师与程序员协作。</span><br></pre></td></tr></table></figure><h3 id="朝玩家移动"><a href="#朝玩家移动" class="headerlink" title="朝玩家移动"></a>朝玩家移动</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">APawn*PlayerPawn</span><br><span class="line">    PlayerPawn=Pawn</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (PlayerPawn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 获取玩家的位置</span></span><br><span class="line">FVector PlayerLocation = PlayerPawn-&gt;<span class="built_in">GetActorLocation</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前 Actor 的位置，朝玩家位置移动</span></span><br><span class="line"><span class="comment">// 这里可以使用简单的插值移动，或直接设置位置</span></span><br><span class="line">FVector NewLocation = FMath::<span class="built_in">VInterpTo</span>(<span class="built_in">GetActorLocation</span>(), PlayerLocation, DeltaTime, <span class="number">2.0f</span>); <span class="comment">// 5.0f 是控制移动速度的因子</span></span><br><span class="line"><span class="built_in">SetActorLocation</span>(NewLocation);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//旋转面朝玩家</span></span><br><span class="line">      `FRotator NewRotation = (PlayerLocation - <span class="built_in">GetActorLocation</span>()).<span class="built_in">Rotation</span>();</span><br><span class="line"><span class="built_in">SetActorRotation</span>(NewRotation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Unreal Engine 中，有许多常用的类用于不同的游戏开发需求。以下是一些常见的重要类及其简要说明：</p><p>以下是将上述内容整理成表格的形式，以便更清晰地查看和比较这些Unreal Engine中常用的类及其简要说明：</p><table><thead><tr><th align="center">类名</th><th align="center">简要说明</th></tr></thead><tbody><tr><td align="center">AActor</td><td align="center">所有游戏对象的基类，可以放置在关卡中。它是所有可以在世界中被实例化的对象的基础。</td></tr><tr><td align="center">APawn</td><td align="center">表示一个可控制的游戏实体，可以是玩家角色或 AI 角色。提供移动和控制的功能。</td></tr><tr><td align="center">ACharacter</td><td align="center">APawn 的子类，适用于需要复杂移动（如跳跃、滑行等）的角色。它通常用于玩家角色，并集成了动画组件。</td></tr><tr><td align="center">APlayerController</td><td align="center">代表玩家的控制器，用于处理玩家输入、相机控制和与游戏逻辑的交互。</td></tr><tr><td align="center">AGameMode</td><td align="center">定义游戏规则、胜利条件以及玩家生成的逻辑。一个关卡只能有一个游戏模式。</td></tr><tr><td align="center">AGameState</td><td align="center">用于保存游戏的状态信息，允许所有客户端（在网络游戏中）访问相同的游戏状态数据。</td></tr><tr><td align="center">APlayerState</td><td align="center">存储与个别玩家（及其状态）相关的信息，比如分数、生命值等。每个玩家控制器都有一个对应的 APlayerState 实例。</td></tr><tr><td align="center">UComponent</td><td align="center">所有组件类的基类，用于给 Actor 添加功能（如运动、碰撞、渲染等）。</td></tr><tr><td align="center">UStaticMeshComponent</td><td align="center">用于在世界中显示静态网格（3D 模型），通常用于表示环境中的物体。</td></tr><tr><td align="center">USkeletalMeshComponent</td><td align="center">用于显示具有骨骼动画的网格，通常用于角色模型，允许其执行动画。</td></tr><tr><td align="center">UCapsuleComponent</td><td align="center">通常用于角色的碰撞检测，帮助其处理地面、墙壁等显示和逻辑。</td></tr><tr><td align="center">UAnimInstance</td><td align="center">动画实例类，用于控制角色的动画状态和过渡，允许开发者实现复杂的动画逻辑。</td></tr><tr><td align="center">UBlueprint</td><td align="center">可视化脚本系统，用于实现游戏逻辑，无需编写代码。它可以代表任何 Actor 类型，允许设计师和程序员协作。</td></tr><tr><td align="center">UTexture2D</td><td align="center">用于处理 2D 纹理，常用于界面元素或游戏对象的外观。</td></tr><tr><td align="center">USoundBase</td><td align="center">一个音频资产的基类，所有音效和背景音乐都从这个类派生。</td></tr><tr><td align="center">UMaterial</td><td align="center">用于定义表面属性和视觉效果的类，包括颜色、纹理和光照等。</td></tr><tr><td align="center">AEnvironment</td><td align="center">环境类，允许在环境中引入动态光源和其他视觉效果。</td></tr><tr><td align="center">UPhysicsComponent</td><td align="center">用于处理物理效果的组件，可以用于模拟重力、碰撞和其他物理现象。</td></tr></tbody></table><p>这个表格提供了Unreal Engine中一些常见和重要的类的快速概览，有助于理解这些类在游戏开发中的作用和关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">不一定非要将敌人数组放在游戏模式中，虽然游戏模式是一种常见的做法。根据你的游戏设计和需求，你可以选择以下几个比较适合的方案：</span><br><span class="line"></span><br><span class="line">游戏模式（GameMode）：</span><br><span class="line"></span><br><span class="line">如果敌人在整个游戏的不同关卡中都是共享的，你可以将敌人数组放在游戏模式中。这是一个便于全球管理敌人的方式。</span><br><span class="line">自定义关卡类（Level Script Actor）：</span><br><span class="line"></span><br><span class="line">如前所述，你可以创建一个自定义的关卡类（继承自 ALevelScriptActor），将敌人数组放在这个类中，这样你可以针对每个关卡进行特定的敌人管理。</span><br><span class="line">敌人生成器（Spawner）：</span><br><span class="line"></span><br><span class="line">如果你有复杂的敌人生成逻辑，可以创建一个独立的敌人生成器类来管理敌人。这可以让敌人生成和管理更加模块化。</span><br><span class="line">角色类（Character Class）：</span><br><span class="line"></span><br><span class="line">尽管不太常见，但如果你的角色需要跟特定的敌人进行交互或者影响，你可以在角色类中持有敌人数组。</span><br><span class="line">全局单例或管理器：</span><br><span class="line"></span><br><span class="line">如果你的游戏架构较为复杂，可以考虑使用单例模式或管理器类，它们可以在游戏中完成敌人的全局管理。</span><br><span class="line">总结</span><br><span class="line">虽然将敌人数组放在游戏模式是一个常见且有效的方案，但根据你的实际需求和游戏结构，你可以选择最适合你的方案。考虑到扩展性和代码组织，选择一个易于管理和维护的方法是很重要的。如果你有具体的场景或设计考虑，请告诉我，我可以提供更具体的建议！</span><br></pre></td></tr></table></figure><h3 id="遍历世界的物体"><a href="#遍历世界的物体" class="headerlink" title="遍历世界的物体"></a>遍历世界的物体</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TArray&lt;AActor*&gt; ActorsToFind;</span><br><span class="line"><span class="keyword">if</span>(UWorld* World = <span class="built_in">GetWorld</span>())</span><br><span class="line">&#123;</span><br><span class="line">    UGameplayStatics::<span class="built_in">GetAllActorsOfClass</span>(<span class="built_in">GetWorld</span>(), AFireEffect::<span class="built_in">StaticClass</span>(), ActorsToFind);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (AActor* FireEffectActor: ActorsToFind)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DemoCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/LocalPlayer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Camera/CameraComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/CapsuleComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/CharacterMovementComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/SpringArmComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Controller.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnhancedInputComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnhancedInputSubsystems.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InputActionValue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义日志类别</span></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY</span>(LogTemplateCharacter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// ADemoCharacter</span></span><br><span class="line"></span><br><span class="line">ADemoCharacter::<span class="built_in">ADemoCharacter</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 设置碰撞胶囊的大小</span></span><br><span class="line"><span class="built_in">GetCapsuleComponent</span>()-&gt;<span class="built_in">InitCapsuleSize</span>(<span class="number">42.f</span>, <span class="number">96.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会因控制器旋转而旋转角色。让控制器只影响相机。</span></span><br><span class="line">bUseControllerRotationPitch = <span class="literal">false</span>;</span><br><span class="line">bUseControllerRotationYaw = <span class="literal">false</span>;</span><br><span class="line">bUseControllerRotationRoll = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置角色移动</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;bOrientRotationToMovement = <span class="literal">true</span>; <span class="comment">// 角色向输入方向移动</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;RotationRate = <span class="built_in">FRotator</span>(<span class="number">0.0f</span>, <span class="number">500.0f</span>, <span class="number">0.0f</span>); <span class="comment">// 在该旋转速率下移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：为了更快的迭代时间，这些变量和许多其他参数可以在角色蓝图中调整</span></span><br><span class="line"><span class="comment">// 而无需重新编译</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;JumpZVelocity = <span class="number">700.f</span>; <span class="comment">// 跳跃时的竖直速度</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;AirControl = <span class="number">0.35f</span>; <span class="comment">// 空中控制能力</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;MaxWalkSpeed = <span class="number">500.f</span>; <span class="comment">// 最大行走速度</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;MinAnalogWalkSpeed = <span class="number">20.f</span>; <span class="comment">// 最小模拟行走速度</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;BrakingDecelerationWalking = <span class="number">2000.f</span>; <span class="comment">// 行走时刹车减速</span></span><br><span class="line"><span class="built_in">GetCharacterMovement</span>()-&gt;BrakingDecelerationFalling = <span class="number">1500.0f</span>; <span class="comment">// 下落时刹车减速</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建相机弹簧臂（当发生碰撞时向玩家靠拢）</span></span><br><span class="line">CameraBoom = <span class="built_in">CreateDefaultSubobject</span>&lt;USpringArmComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;CameraBoom&quot;</span>));</span><br><span class="line">CameraBoom-&gt;<span class="built_in">SetupAttachment</span>(RootComponent);</span><br><span class="line">CameraBoom-&gt;TargetArmLength = <span class="number">400.0f</span>; <span class="comment">// 相机在角色后方跟随的距离</span></span><br><span class="line">CameraBoom-&gt;bUsePawnControlRotation = <span class="literal">true</span>; <span class="comment">// 根据控制器旋转弹簧臂</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建跟随相机</span></span><br><span class="line">FollowCamera = <span class="built_in">CreateDefaultSubobject</span>&lt;UCameraComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;FollowCamera&quot;</span>));</span><br><span class="line">FollowCamera-&gt;<span class="built_in">SetupAttachment</span>(CameraBoom, USpringArmComponent::SocketName); <span class="comment">// 将相机附加到弹簧臂的末端，并让弹簧臂根据控制器方向进行调整</span></span><br><span class="line">FollowCamera-&gt;bUsePawnControlRotation = <span class="literal">false</span>; <span class="comment">// 相机不相对于弹簧臂旋转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：在继承的Mesh组件上，骨骼网格和动画蓝图的引用</span></span><br><span class="line"><span class="comment">// 在名为ThirdPersonCharacter的派生蓝图资产中设置（以避免在C++中直接引用内容）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ADemoCharacter::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 调用基类</span></span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加输入映射上下文</span></span><br><span class="line"><span class="keyword">if</span> (APlayerController* PlayerController = <span class="built_in">Cast</span>&lt;APlayerController&gt;(Controller))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::<span class="built_in">GetSubsystem</span>&lt;UEnhancedInputLocalPlayerSubsystem&gt;(PlayerController-&gt;<span class="built_in">GetLocalPlayer</span>()))</span><br><span class="line">&#123;</span><br><span class="line">Subsystem-&gt;<span class="built_in">AddMappingContext</span>(DefaultMappingContext, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 输入处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ADemoCharacter::SetupPlayerInputComponent</span><span class="params">(UInputComponent* PlayerInputComponent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 设置动作绑定</span></span><br><span class="line"><span class="keyword">if</span> (UEnhancedInputComponent* EnhancedInputComponent = <span class="built_in">Cast</span>&lt;UEnhancedInputComponent&gt;(PlayerInputComponent)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳跃</span></span><br><span class="line">EnhancedInputComponent-&gt;<span class="built_in">BindAction</span>(JumpAction, ETriggerEvent::Started, <span class="keyword">this</span>, &amp;ACharacter::Jump);</span><br><span class="line">EnhancedInputComponent-&gt;<span class="built_in">BindAction</span>(JumpAction, ETriggerEvent::Completed, <span class="keyword">this</span>, &amp;ACharacter::StopJumping);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动</span></span><br><span class="line">EnhancedInputComponent-&gt;<span class="built_in">BindAction</span>(MoveAction, ETriggerEvent::Triggered, <span class="keyword">this</span>, &amp;ADemoCharacter::Move);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视角控制</span></span><br><span class="line">EnhancedInputComponent-&gt;<span class="built_in">BindAction</span>(LookAction, ETriggerEvent::Triggered, <span class="keyword">this</span>, &amp;ADemoCharacter::Look);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemplateCharacter, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;&#x27;%s&#x27; 找不到增强输入组件！此模板是建立在增强输入系统上。如果您打算使用传统系统，则需要更新此C++文件。&quot;</span>), *<span class="built_in">GetNameSafe</span>(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ADemoCharacter::Move</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 输入是一个Vector2D</span></span><br><span class="line">FVector2D MovementVector = Value.<span class="built_in">Get</span>&lt;FVector2D&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Controller != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 找出前方方向</span></span><br><span class="line"><span class="type">const</span> FRotator Rotation = Controller-&gt;<span class="built_in">GetControlRotation</span>();</span><br><span class="line"><span class="function"><span class="type">const</span> FRotator <span class="title">YawRotation</span><span class="params">(<span class="number">0</span>, Rotation.Yaw, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取前方向向量</span></span><br><span class="line"><span class="type">const</span> FVector ForwardDirection = <span class="built_in">FRotationMatrix</span>(YawRotation).<span class="built_in">GetUnitAxis</span>(EAxis::X);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取右方向向量 </span></span><br><span class="line"><span class="type">const</span> FVector RightDirection = <span class="built_in">FRotationMatrix</span>(YawRotation).<span class="built_in">GetUnitAxis</span>(EAxis::Y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加移动 </span></span><br><span class="line"><span class="built_in">AddMovementInput</span>(ForwardDirection, MovementVector.Y); <span class="comment">// 前进/后退</span></span><br><span class="line"><span class="built_in">AddMovementInput</span>(RightDirection, MovementVector.X); <span class="comment">// 左/右移动</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ADemoCharacter::Look</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 输入是一个Vector2D</span></span><br><span class="line">FVector2D LookAxisVector = Value.<span class="built_in">Get</span>&lt;FVector2D&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Controller != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将偏航和俯仰输入添加到控制器</span></span><br><span class="line"><span class="built_in">AddControllerYawInput</span>(LookAxisVector.X); <span class="comment">// 左/右看</span></span><br><span class="line"><span class="built_in">AddControllerPitchInput</span>(LookAxisVector.Y); <span class="comment">// 上/下看</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Logging/LogMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DemoCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前向声明类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">USpringArmComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UCameraComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInputMappingContext</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInputAction</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FInputActionValue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明日志类别</span></span><br><span class="line"><span class="built_in">DECLARE_LOG_CATEGORY_EXTERN</span>(LogTemplateCharacter, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(config=Game)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ADemoCharacter</span> : <span class="keyword">public</span> ACharacter</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 相机弹簧臂，将相机定位在角色后方 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">USpringArmComponent* CameraBoom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 跟随相机 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">UCameraComponent* FollowCamera;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 输入映射上下文 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">UInputMappingContext* DefaultMappingContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 跳跃输入动作 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">UInputAction* JumpAction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 移动输入动作 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">UInputAction* MoveAction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 视角输入动作 */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">UInputAction* LookAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ADemoCharacter</span>(); <span class="comment">// 构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理移动输入的函数 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; Value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理视角输入的函数 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Look</span><span class="params">(<span class="type">const</span> FInputActionValue&amp; Value)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// APawn 接口</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SetupPlayerInputComponent</span><span class="params">(<span class="keyword">class</span> UInputComponent* PlayerInputComponent)</span> <span class="keyword">override</span></span>; <span class="comment">// 设置输入组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加映射上下文</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span></span>; <span class="comment">// 初始化函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/** 返回 CameraBoom 子对象 **/</span></span><br><span class="line"><span class="function">FORCEINLINE <span class="keyword">class</span> USpringArmComponent* <span class="title">GetCameraBoom</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> CameraBoom; &#125;</span><br><span class="line"><span class="comment">/** 返回 FollowCamera 子对象 **/</span></span><br><span class="line"><span class="function">FORCEINLINE <span class="keyword">class</span> UCameraComponent* <span class="title">GetFollowCamera</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> FollowCamera; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="玩家类"><a href="#玩家类" class="headerlink" title="玩家类"></a>玩家类</h2><h3 id="角色移动组件-Pawn"><a href="#角色移动组件-Pawn" class="headerlink" title="角色移动组件:Pawn"></a>角色移动组件:Pawn</h3><ul><li><p>属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Velocity</td><td>速度</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p><font color= #FF6A6A>AddMovementInput</font></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">AddMovementInput</span>(FVector WorldDirection, <span class="type">float</span> ScaleValue = <span class="number">1.0f</span>, <span class="type">bool</span> bForce = <span class="literal">false</span>)</span><br><span class="line"><span class="comment">//推荐移动角色方法,类似Velocity,也可以通过SetActorLocation实现</span></span><br></pre></td></tr></table></figure><h1 id="碰撞"><a href="#碰撞" class="headerlink" title="碰撞"></a>碰撞</h1><p>碰撞检测与命中测试（Overlap and Hit Test）<br>使用方法：为玩家角色或其攻击组件添加一个碰撞体（如Sphere Collision或Capsule Component），并启用重叠事件（Overlap Events）或使用线性投射（Line Trace）进行命中测试。<br>实现细节：在蓝图中，可以设置OnComponentBeginOverlap或OnComponentEndOverlap事件处理函数来检测玩家与敌人的碰撞。如果是C++，则需要覆写相关组件的OnComponentBeginOverlap或OnActorBeginOverlap等函数。<br>2. 视线投射（Raycast）<br>使用方法：当玩家按下攻击键时，从玩家视角发出一条射线（Raycast），检测这条射线是否击中了敌人。<br>实现细节：可以使用蓝图中的Line Trace By Channel节点，或者在C++中使用UKismetSystemLibrary::LineTraceSingleForObjects函数。根据返回的结果判断是否击中敌人，并获取击中对象的信息。<br>3. 感知系统（Sense Component）<br>使用方法：为敌人添加感知组件（Senses Component），定义它们的感知范围和条件，然后在玩家身上添加相应的标签（Tags）。敌人通过感知组件检查范围内是否有带有特定标签的玩家。<br>实现细节：配置敌人蓝图中的感知组件（如AIPerceptionComponent），并在玩家蓝图中设置相应的感知标签。通过感知委托处理感知到玩家的逻辑。<br>4. 基于脚本的行为树（Behavior Tree）<br>使用方法：创建一个行为树，其中包含一个用于寻找玩家节点（Find Player Node），该节点利用上述的碰撞检测或视线投射机制来定位玩家。<br>实现细节：在UE编辑器中设计行为树，使用蓝图或C++编写具体逻辑。例如，可以使用BTTask_FindPlayer节点，并在成功找到玩家后触发其他行为，如追击或攻击。<br>5. 事件调度器（Event Dispatchers）<br>使用方法：利用UE5的事件系统，在玩家到达特定位置或满足特定条件时，触发一个全局或局部事件，敌人对象监听这个事件并作出反应。<br>实现细节：可以创建自定义事件，在玩家达到某些条件时广播该事件。敌人蓝图或代码中注册监听这些事件，并执行相应的逻辑来响应玩家的动作</p><h1 id="变换向量"><a href="#变换向量" class="headerlink" title="变换向量"></a>变换向量</h1><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><h3 id="GetUnitDirection-获取一个位置到一个位置的旋转向量"><a href="#GetUnitDirection-获取一个位置到一个位置的旋转向量" class="headerlink" title="GetUnitDirection      获取一个位置到一个位置的旋转向量"></a>GetUnitDirection      获取一个位置到一个位置的旋转向量</h3><p>目标相对位置&#x3D;向前向量乘以距离+自身XYz位置</p><p>平均旋转&#x3D;360除以箭头数量</p><p>箭头度数等于上一个箭头加上平均值</p><h1 id="用户控件"><a href="#用户控件" class="headerlink" title="用户控件"></a>用户控件</h1><p>当然，以下是 <code>UWidget</code> 类中部分 API 的用途翻译：</p><h3 id="渲染变换相关"><a href="#渲染变换相关" class="headerlink" title="渲染变换相关"></a>渲染变换相关</h3><ul><li><strong>GetRenderTransform</strong>: 获取小部件的渲染变换。</li><li><strong>SetRenderTransform</strong>: 设置小部件的渲染变换。</li><li><strong>SetRenderScale</strong>: 设置小部件的渲染缩放。</li><li><strong>SetRenderShear</strong>: 设置小部件的渲染剪切。</li><li><strong>SetRenderTransformAngle</strong>: 设置小部件的渲染旋转角度。</li><li><strong>GetRenderTransformAngle</strong>: 获取小部件的渲染旋转角度。</li><li><strong>SetRenderTranslation</strong>: 设置小部件的渲染平移。</li><li><strong>SetRenderTransformPivot</strong>: 设置小部件的渲染变换中心点。</li><li><strong>GetRenderTransformPivot</strong>: 获取小部件的渲染变换中心点。</li></ul><h3 id="流向方向偏好"><a href="#流向方向偏好" class="headerlink" title="流向方向偏好"></a>流向方向偏好</h3><ul><li><strong>GetFlowDirectionPreference</strong>: 获取小部件的流向方向偏好。</li><li><strong>SetFlowDirectionPreference</strong>: 设置小部件的流向方向偏好。</li></ul><h3 id="启用状态"><a href="#启用状态" class="headerlink" title="启用状态"></a>启用状态</h3><ul><li><strong>GetIsEnabled</strong>: 获取小部件当前的启用状态。</li><li><strong>SetIsEnabled</strong>: 设置小部件当前的启用状态。</li></ul><h3 id="是否在视口中"><a href="#是否在视口中" class="headerlink" title="是否在视口中"></a>是否在视口中</h3><ul><li><strong>IsInViewport</strong>: 返回小部件是否已通过 <code>AddToViewport</code> 或 <code>AddToPlayerScreen</code> 添加到视口中。</li></ul><h3 id="提示文本"><a href="#提示文本" class="headerlink" title="提示文本"></a>提示文本</h3><ul><li><strong>GetToolTipText</strong>: 获取小部件的提示文本。</li><li><strong>SetToolTipText</strong>: 设置小部件的提示文本。</li><li><strong>GetToolTip</strong>: 获取小部件的自定义提示小部件。</li><li><strong>SetToolTip</strong>: 设置小部件的自定义提示小部件。</li></ul><h3 id="鼠标光标"><a href="#鼠标光标" class="headerlink" title="鼠标光标"></a>鼠标光标</h3><ul><li><strong>GetCursor</strong>: 获取小部件上的鼠标光标。</li><li><strong>SetCursor</strong>: 设置小部件上的鼠标光标。</li><li><strong>ResetCursor</strong>: 重置小部件上的鼠标光标，移除任何自定义设置。</li></ul><h3 id="渲染状态"><a href="#渲染状态" class="headerlink" title="渲染状态"></a>渲染状态</h3><ul><li><strong>IsRendered</strong>: 返回小部件是否可见且渲染透明度大于 0。</li><li><strong>IsVisible</strong>: 返回小部件是否可见、命中测试不可见或自身命中测试不可见。</li><li><strong>GetVisibility</strong>: 获取小部件当前的可见性。</li><li><strong>SetVisibility</strong>: 设置小部件的可见性。</li><li><strong>SetVisibilityInternal</strong>: 内部方法，用于设置小部件的可见性。</li></ul><p>这些 API 主要用于控制和获取小部件的各种属性和状态，以便在用户界面中进行动态调整和响应。</p><p>提供的文件 <code>UserWidget.h</code> 是 Unreal Engine 5.3 版本中的一个头文件，定义了 <code>UUserWidget</code> 类。这个类是 Unreal Engine 中用于创建用户界面（UI）的基础类，支持通过蓝图（Blueprint）进行扩展。</p><h3 id="主要功能和特性："><a href="#主要功能和特性：" class="headerlink" title="主要功能和特性："></a>主要功能和特性：</h3><ul><li><strong>继承关系</strong>：<code>UUserWidget</code> 继承自 <code>UWidget</code> 和 <code>INamedSlotInterface</code>，提供了基本的 UI 功能和命名插槽接口。</li><li><strong>生命周期方法</strong>：<ul><li><code>OnInitialized</code>：初始化时调用，仅在游戏运行时调用一次。</li><li><code>PreConstruct</code>：构造前调用，适用于编辑器预览和运行时。</li><li><code>Construct</code>：Slate 小部件构造后调用。</li><li><code>Destruct</code>：Slate 小部件销毁时调用。</li></ul></li><li><strong>输入事件处理</strong>：<ul><li><code>OnFocusReceived</code>：获取焦点时调用。</li><li><code>OnFocusLost</code>：失去焦点时调用。</li><li><code>OnAddedToFocusPath</code>：添加到焦点路径时调用。</li><li><code>OnRemovedFromFocusPath</code>：从焦点路径中移除时调用。</li><li><code>OnKeyChar</code>：接收到字符输入时调用。</li><li><code>OnPreviewKeyDown</code>：预览按键按下事件。</li><li><code>OnKeyDown</code>：按键按下事件。</li><li><code>OnKeyUp</code>：按键释放事件。</li><li><code>OnAnalogValueChanged</code>：模拟值变化事件。</li><li><code>OnMouseButtonDown</code>：鼠标按钮按下事件。</li><li><code>OnPreviewMouseButtonDown</code>：预览鼠标按钮按下事件。</li><li><code>OnMouseButtonUp</code>：鼠标按钮释放事件。</li><li><code>OnMouseMove</code>：鼠标移动事件。</li><li><code>OnMouseEnter</code>：鼠标进入小部件时调用。</li><li><code>OnMouseLeave</code>：鼠标离开小部件时调用。</li><li><code>OnMouseWheel</code>：鼠标滚轮事件。</li></ul></li><li><strong>其他方法</strong>：<ul><li><code>AddToViewport</code>：将小部件添加到视口中。</li><li><code>AddToPlayerScreen</code>：将小部件添加到玩家屏幕。</li><li><code>SetPositionInViewport</code>：设置小部件在视口中的位置。</li><li><code>SetDesiredSizeInViewport</code>：设置小部件在视口中的大小。</li><li><code>SetAnchorsInViewport</code>：设置小部件在视口中的锚点。</li><li><code>SetAlignmentInViewport</code>：设置小部件在视口中的对齐方式。</li><li><code>SetVisibility</code>：设置小部件的可见性。</li><li><code>SetPlayerContext</code>：设置玩家上下文。</li><li><code>GetOwningLocalPlayer</code>：获取拥有该小部件的本地玩家。</li><li><code>GetOwningPlayer</code>：获取拥有该小部件的玩家控制器。</li><li><code>GetOwningPlayerPawn</code>：获取拥有该小部件的玩家角色。</li><li><code>GetOwningPlayerState</code>：获取拥有该小部件的玩家状态。</li><li><code>GetOwningPlayerCameraManager</code>：获取拥有该小部件的玩家相机管理器。</li></ul></li></ul><h3 id="枚举类型："><a href="#枚举类型：" class="headerlink" title="枚举类型："></a>枚举类型：</h3><ul><li><code>EWidgetTickFrequency</code>：定义了小部件的更新频率。</li><li><code>EWidgetAnimationEvent</code>：定义了动画事件类型。</li><li><code>EUMGSequencePlayMode</code>：定义了 UMG 序列的播放模式。</li><li><code>EDesignPreviewSizeMode</code>：定义了设计预览的尺寸模式。</li></ul><h3 id="结构体："><a href="#结构体：" class="headerlink" title="结构体："></a>结构体：</h3><ul><li><code>FAnimationEventBinding</code>：用于管理动画事件绑定。</li><li><code>FPaintContext</code>：用于绘制上下文。</li><li><code>FNamedSlotBinding</code>：用于命名插槽绑定。</li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li><code>GetWorld</code>：获取当前世界。</li><li><code>PostDuplicate</code>：复制后调用。</li><li><code>BeginDestroy</code>：开始销毁时调用。</li><li><code>PostLoad</code>：加载后调用。</li><li><code>DuplicateAndInitializeFromWidgetTree</code>：从小部件树中复制并初始化。</li><li><code>Initialize</code>：初始化小部件。</li><li><code>GetDesiredTickFrequency</code>：获取期望的更新频率。</li><li><code>GetWidgetTreeOwningClass</code>：获取生成小部件树的蓝图类。</li><li><code>UpdateCanTick</code>：更新是否可以更新。</li></ul><p>这些功能和特性使得 <code>UUserWidget</code> 成为 Unreal Engine 中创建和管理用户界面的重要基础类。</p><h2 id="绑定UI和动画"><a href="#绑定UI和动画" class="headerlink" title="绑定UI和动画"></a>绑定UI和动画</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/SizeBox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ItemBoxBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//物品箱子,用于包裹小格子容器的组件,获取小格子组件事件发送出去</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TESTDEMO_API</span> UItemBoxBase : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 小格子容器</span></span><br><span class="line"><span class="comment">//UPROPERTY(BlueprintReadWrite,EditAnywhere)</span></span><br><span class="line"><span class="comment">//USizeBox *sizebox;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativePreConstruct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">NativeConstruct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 小格子容器</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite,EditAnywhere,meta = (BindWidget))</span><br><span class="line">USizeBox* sizebox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">&quot;Animations&quot;</span>)</span><br><span class="line">UWidgetAnimation* ShowAnimation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定动画</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Transient, meta = (BindWidgetOptional) , meta = (BindWidgetAnim))</span><br><span class="line">UWidgetAnimation* Fade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据表格"><a href="#数据表格" class="headerlink" title="数据表格"></a>数据表格</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取行</span></span><br><span class="line"><span class="type">const</span> FFairyItemStruct* Row = DataTable-&gt;<span class="built_in">FindRow</span>&lt;FFairyItemStruct&gt;(RowName, ContextString);</span><br><span class="line"><span class="comment">//获取命名数组</span></span><br><span class="line">DataTable-&gt;<span class="built_in">GetRowNames</span>()</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="FTableRowBase-结构体"><a href="#FTableRowBase-结构体" class="headerlink" title="FTableRowBase 结构体"></a><code>FTableRowBase</code> 结构体</h3><h4 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h4><ul><li><p><strong><code>virtual void OnPostDataImport(const UDataTable* InDataTable, const FName InRowName, TArray&lt;FString&gt;&amp; OutCollectedImportProblems)</code></strong></p><ul><li>可以被子类重写；当数据表导入或重新导入时调用。</li><li>允许对初始读取的数据进行自定义修复、解析等操作。</li><li>参数：<ul><li><code>InDataTable</code>: 拥有此行的数据表。</li><li><code>InRowName</code>: 要进行修复的行的名称。</li><li><code>OutCollectedImportProblems</code>: 导入过程中累积的问题列表，可以通过此方法添加问题。</li></ul></li></ul></li><li><p><strong><code>virtual void OnDataTableChanged(const UDataTable* InDataTable, const FName InRowName)</code></strong></p><ul><li>可以被子类重写；当拥有此行的数据表被修改时调用。</li><li>允许对用户更改进行自定义修复、解析等操作。</li><li>参数：<ul><li><code>InDataTable</code>: 拥有此行的数据表。</li><li><code>InRowName</code>: 要进行修复的行的名称。</li></ul></li></ul></li></ul><h3 id="UDataTable-类"><a href="#UDataTable-类" class="headerlink" title="UDataTable 类"></a><code>UDataTable</code> 类</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li><p><strong><code>TObjectPtr&lt;UScriptStruct&gt; RowStruct</code></strong></p><ul><li>数据表中每一行使用的结构体，必须继承自 <code>FTableRowBase</code>。</li></ul></li><li><p><strong><code>TMap&lt;FName, uint8*&gt; RowMap</code></strong></p><ul><li>行名称到行数据结构的映射。</li></ul></li><li><p><strong><code>uint8 bStripFromClientBuilds : 1</code></strong></p><ul><li>如果设置为 <code>true</code>，则不会将此数据表打包到客户端构建中。适用于只有服务器需要知道的敏感表。</li></ul></li><li><p><strong><code>uint8 bIgnoreExtraFields : 1</code></strong></p><ul><li>如果设置为 <code>true</code>，则在导入数据时忽略多余的字段。否则会发出警告。</li></ul></li><li><p><strong><code>uint8 bIgnoreMissingFields : 1</code></strong></p><ul><li>如果设置为 <code>true</code>，则在导入数据时忽略预期但缺失的字段。否则会发出警告。</li></ul></li><li><p><strong><code>FString ImportKeyField</code></strong></p><ul><li>导入数据中的显式键字段。如果为空，则使用 JSON 中的 <code>Name</code> 或 CSV 中的第一个字段作为键。</li></ul></li><li><p><strong><code>TObjectPtr&lt;class UAssetImportData&gt; AssetImportData</code></strong></p><ul><li>导入此数据表的文件，可能为空。</li></ul></li><li><p><strong><code>FOnDataTableChanged OnDataTableChangedDelegate</code></strong></p><ul><li>当数据表发生变化时调用的多播委托。</li></ul></li></ul><h4 id="成员函数-1"><a href="#成员函数-1" class="headerlink" title="成员函数"></a>成员函数</h4><ul><li><p><strong><code>virtual void AddRowInternal(FName RowName, uint8* RowDataPtr)</code></strong></p><ul><li>向数据表中添加行。</li></ul></li><li><p><strong><code>virtual void RemoveRowInternal(FName RowName)</code></strong></p><ul><li>从数据表中删除行。</li></ul></li><li><p><strong><code>const TMap&lt;FName, uint8*&gt;&amp; GetRowMap() const</code></strong></p><ul><li>获取行映射。</li></ul></li><li><p><strong><code>const UScriptStruct* GetRowStruct() const</code></strong></p><ul><li>获取行结构体。</li></ul></li><li><p><strong><code>virtual bool AllowDuplicateRowsOnImport() const</code></strong></p><ul><li>返回是否允许在导入时存在多个同名行。</li></ul></li><li><p><strong><code>virtual void FinishDestroy()</code></strong></p><ul><li>完成销毁。</li></ul></li><li><p><strong><code>virtual void Serialize(FStructuredArchiveRecord Record)</code></strong></p><ul><li>序列化数据表。</li></ul></li><li><p><strong><code>static void AddReferencedObjects(UObject* InThis, FReferenceCollector&amp; Collector)</code></strong></p><ul><li>添加引用对象。</li></ul></li><li><p><strong><code>virtual void GetPreloadDependencies(TArray&lt;UObject*&gt;&amp; OutDeps)</code></strong></p><ul><li>获取预加载依赖项。</li></ul></li><li><p><strong><code>virtual void GetResourceSizeEx(FResourceSizeEx&amp; CumulativeResourceSize)</code></strong></p><ul><li>获取资源大小。</li></ul></li><li><p><strong><code>virtual bool NeedsLoadForClient() const</code></strong></p><ul><li>判断是否需要在客户端加载。</li></ul></li><li><p><strong><code>virtual bool NeedsLoadForEditorGame() const</code></strong></p><ul><li>判断是否需要在编辑器游戏中加载。</li></ul></li><li><p><strong><code>void HandleDataTableChanged(FName ChangedRowName = NAME_None)</code></strong></p><ul><li>当数据表数据发生变化时调用此方法，触发 <code>OnDataTableChanged</code> 委托和每行回调。</li></ul></li><li><p><strong><code>template &lt;class T&gt; void GetAllRows(const TCHAR* ContextString, OUT TArray&lt;T*&gt;&amp; OutRowArray) const</code></strong></p><ul><li>获取数据表中的所有行。</li></ul></li><li><p><strong><code>template &lt;class T&gt; T* FindRow(FName RowName, const TCHAR* ContextString, bool bWarnIfRowMissing = true) const</code></strong></p><ul><li>根据名称查找数据表中的行。</li></ul></li><li><p><strong><code>template &lt;class T&gt; void ForeachRow(const TCHAR* ContextString, TFunctionRef&lt;void (const FName&amp; Key, const T&amp; Value)&gt; Predicate) const</code></strong></p><ul><li>对每一行执行某个操作。</li></ul></li><li><p><strong><code>FProperty* FindTableProperty(const FName&amp; PropertyName) const</code></strong></p><ul><li>查找与列属性名称匹配的属性。</li></ul></li><li><p><strong><code>uint8* FindRowUnchecked(FName RowName) const</code></strong></p><ul><li>高性能版本，不进行类型检查。</li></ul></li><li><p><strong><code>virtual void EmptyTable()</code></strong></p><ul><li>清空数据表（不会清除 <code>RowStruct</code>）。</li></ul></li><li><p><strong><code>virtual TArray&lt;FName&gt; GetRowNames() const</code></strong></p><ul><li>获取所有行的名称。</li></ul></li><li><p><strong><code>virtual void RemoveRow(FName RowName)</code></strong></p><ul><li>通过名称删除单个行。</li></ul></li><li><p><strong><code>virtual void AddRow(FName RowName, const FTableRowBase&amp; RowData)</code></strong></p><ul><li>将行数据复制到数据表中。</li></ul></li><li><p><strong><code>virtual void CleanBeforeStructChange()</code></strong></p><ul><li>在结构体更改前清理。</li></ul></li><li><p><strong><code>virtual void RestoreAfterStructChange()</code></strong></p><ul><li>在结构体更改后恢复。</li></ul></li><li><p><strong><code>FString GetTableAsString(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将整个数据表输出为字符串。</li></ul></li><li><p><strong><code>FString GetTableAsCSV(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将整个数据表输出为 CSV 格式。</li></ul></li><li><p><strong><code>FString GetTableAsJSON(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将整个数据表输出为 JSON 格式。</li></ul></li><li><p><strong><code>template&lt;typename CharType = TCHAR&gt; bool WriteTableAsJSON(const TSharedRef&lt; TJsonWriter&lt;CharType, TPrettyJsonPrintPolicy&lt;CharType&gt; &gt; &gt;&amp; JsonWriter, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将整个数据表输出为 JSON 格式并写入 JSON 写入器。</li></ul></li><li><p><strong><code>template&lt;typename CharType = TCHAR&gt; bool WriteTableAsJSONObject(const TSharedRef&lt; TJsonWriter&lt;CharType, TPrettyJsonPrintPolicy&lt;CharType&gt; &gt; &gt;&amp; JsonWriter, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将整个数据表输出为 JSON 对象并写入 JSON 写入器。</li></ul></li><li><p><strong><code>template&lt;typename CharType = TCHAR&gt; bool WriteRowAsJSON(const TSharedRef&lt; TJsonWriter&lt;CharType, TPrettyJsonPrintPolicy&lt;CharType&gt; &gt; &gt;&amp; JsonWriter, const void* RowData, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>将特定行的字段输出为 JSON 格式并写入 JSON 写入器。</li></ul></li><li><p><strong><code>bool CopyImportOptions(UDataTable* SourceTable)</code></strong></p><ul><li>复制另一个数据表的导入选项，不复制行数据。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; CreateTableFromCSVString(const FString&amp; InString)</code></strong></p><ul><li>从 CSV 格式的字符串创建数据表。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; CreateTableFromJSONString(const FString&amp; InString)</code></strong></p><ul><li>从 JSON 格式的字符串创建数据表。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; CreateTableFromOtherTable(const UDataTable* InTable)</code></strong></p><ul><li>从另一个数据表创建数据表。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; CreateTableFromRawData(TMap&lt;FName, const uint8*&gt;&amp; DataMap, UScriptStruct* InRowStruct)</code></strong></p><ul><li>从原始数据映射和给定的脚本结构创建数据表。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; GetColumnTitles() const</code></strong></p><ul><li>获取所有列标题，使用属性的友好显示名称。</li></ul></li><li><p><strong><code>TArray&lt;FString&gt; GetUniqueColumnTitles() const</code></strong></p><ul><li>获取所有列标题，使用属性的唯一名称。</li></ul></li><li><p><strong><code>TArray&lt; TArray&lt;FString&gt; &gt; GetTableData(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None) const</code></strong></p><ul><li>获取每个行的数据数组，第一行是标题。</li></ul></li><li><p><strong><code>void SaveStructData(FStructuredArchiveSlot Slot)</code></strong></p><ul><li>保存结构体数据。</li></ul></li><li><p><strong><code>void LoadStructData(FStructuredArchiveSlot Slot)</code></strong></p><ul><li>加载结构体数据。</li></ul></li><li><p><strong><code>void OnPostDataImported(OUT TArray&lt;FString&gt;&amp; OutCollectedImportProblems)</code></strong></p><ul><li>当新数据导入数据表时调用，通知每个导入的行，并给行结构体一个操作导入数据的机会。</li></ul></li><li><p><strong><code>UScriptStruct&amp; GetEmptyUsingStruct() const</code></strong></p><ul><li>获取空的结构体。</li></ul></li></ul><h3 id="FDataTableRowHandle-结构体"><a href="#FDataTableRowHandle-结构体" class="headerlink" title="FDataTableRowHandle 结构体"></a><code>FDataTableRowHandle</code> 结构体</h3><h4 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li><p><strong><code>TObjectPtr&lt;const UDataTable&gt; DataTable</code></strong></p><ul><li>指向我们要获取行的数据表。</li></ul></li><li><p><strong><code>FName RowName</code></strong></p><ul><li>我们要获取的行的名称。</li></ul></li></ul><h4 id="成员函数-2"><a href="#成员函数-2" class="headerlink" title="成员函数"></a>成员函数</h4><ul><li><p><strong><code>bool IsNull() const</code></strong></p><ul><li>如果此句柄未指向任何内容，返回 <code>true</code>。</li></ul></li><li><p><strong><code>template &lt;class T&gt; T* GetRow(const TCHAR* ContextString) const</code></strong></p><ul><li>从行句柄中获取行。</li></ul></li><li><p><strong><code>template &lt;class T&gt; T* GetRow(const FString&amp; ContextString) const</code></strong></p><ul><li>从行句柄中获取行。</li></ul></li><li><p><strong><code>FString ToDebugString(bool bUseFullPath = false) const</code></strong></p><ul><li>返回调试字符串。</li></ul></li><li><p><strong><code>bool operator==(FDataTableRowHandle const&amp; Other) const</code></strong></p><ul><li>判断两个行句柄是否相等。</li></ul></li><li><p><strong><code>bool operator!=(FDataTableRowHandle const&amp; Other) const</code></strong></p><ul><li>判断两个行句柄是否不相等。</li></ul></li><li><p><strong><code>void PostSerialize(const FArchive&amp; Ar)</code></strong></p><ul><li>序列化后调用。</li></ul></li></ul><h3 id="FDataTableCategoryHandle-结构体"><a href="#FDataTableCategoryHandle-结构体" class="headerlink" title="FDataTableCategoryHandle 结构体"></a><code>FDataTableCategoryHandle</code> 结构体</h3><h4 id="成员变量-2"><a href="#成员变量-2" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li><p><strong><code>TObjectPtr&lt;const class UDataTable&gt; DataTable</code></strong></p><ul><li>指向我们要获取行的数据表。</li></ul></li><li><p><strong><code>FName ColumnName</code></strong></p><ul><li>我们要获取的列的名称。</li></ul></li><li><p><strong><code>FName RowContents</code></strong></p><ul><li>我们要获取的行的内容。</li></ul></li></ul><h4 id="成员函数-3"><a href="#成员函数-3" class="headerlink" title="成员函数"></a>成员函数</h4><ul><li><p><strong><code>bool IsNull() const</code></strong></p><ul><li>如果此句柄未指向任何内容，返回 <code>true</code>。</li></ul></li><li><p><strong><code>template &lt;class T&gt; void GetRows(TArray&lt;T*&gt;&amp; OutRows, const FString&amp; ContextString) const</code></strong></p><ul><li>在数据表中搜索所有包含 <code>RowContents</code> 的行，并将它们添加到 <code>OutRows</code> 中。</li></ul></li><li><p><strong><code>bool operator==(FDataTableCategoryHandle const&amp; Other) const</code></strong></p><ul><li>判断两个类别句柄是否相等。</li></ul></li><li><p><strong><code>bool operator!=(FDataTableCategoryHandle const&amp; Other) const</code></strong></p><ul><li>判断两个类别句柄是否不相等。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gas系统笔记</title>
      <link href="/2024/03/30/ue5/%E5%8F%98%E9%87%8F/GAS%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/03/30/ue5/%E5%8F%98%E9%87%8F/GAS%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Build-cs"><a href="#Build-cs" class="headerlink" title="Build.cs"></a>Build.cs</h1><ul><li>showdebug abilitysystem 调试信息</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyMVCtest</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyMVCtest</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>,<span class="string">&quot;EnhancedInput&quot;</span>, <span class="string">&quot;GameplayAbilities&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">PrivateDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;GameplayTags&quot;</span>, <span class="string">&quot;GameplayTasks&quot;</span>, <span class="string">&quot;NavigationSystem&quot;</span>, <span class="string">&quot;Niagara&quot;</span>, <span class="string">&quot;AIModule&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Gameplay Ability (GA)</p><ul><li>GA代表游戏中的技能或能力，是玩家或NPC可以执行的动作。</li><li>GA通常由一个或多个Ability Task（任务）组成，这些任务定义了技能的具体行为和效果。</li></ul></li><li><p>Gameplay Effect (GE)</p><p>：</p><ul><li>GE描述了一个游戏效果，例如治疗、伤害、加攻、减速等。</li><li>GE可以修改玩家属性、添加其他GE、修改玩家身上的Tag或给玩家某个Cue效果。</li><li>GE的配置包括时效性参数（如执行时长和周期）、属性修改、修改条件、Tag属性和后处理等。</li></ul></li><li><p>Gameplay Tag (Tag)</p><p>：</p><ul><li>Tag用于标记状态和类别，可以用来表示一个游戏对象的特性、状态、行为等信息。</li><li>例如，可以用”Character.Type.Enemy”和”Character.Type.Boss”等Tag来描述敌人角色，用”Character.State.Jump”和”Character.State.Swimming”等Tag来表明对象在跳跃或游泳。</li></ul></li><li><p>Gameplay Cue (GC)</p><p>：</p><ul><li>GC负责播放客户端表现，如特效、音效、动画、材质效果和后处理等。</li><li>GC可以通过DS（Data-Driven）端发起，广播到客户端，也可以直接在客户端触发。</li></ul></li><li><p>AttributeSet（属性集）</p><p>：</p><ul><li>AttributeSet定义了角色属性，如攻击力、防御力、血量等。</li><li>AttributeSet是GAS系统中用于存储和管理角色属性的核心组件。</li></ul></li><li><p>Ability System Component (ASC)</p><p>：</p><ul><li>ASC是GAS系统的管理组件，负责管理GAS模块对外接口，以及上述提到的GA、Task、GE、Tag、GC和AttributeSet等。</li><li>ASC提供了用于激活技能、管理游戏效果和标记等功能的接口。</li></ul></li></ol><h1 id="官方Tga"><a href="#官方Tga" class="headerlink" title="官方Tga"></a>官方Tga</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="keyword">namespace</span> FairyTag</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_DECLARE_GAMEPLAY_TAG_EXTERN</span>(Movement_Mode_Walking);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//源文件</span></span><br><span class="line"><span class="keyword">namespace</span> FairyTag</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_DEFINE_GAMEPLAY_TAG_COMMENT</span>(Movement_Mode_Walking, <span class="string">&quot;Movement.Mode.Walking&quot;</span>, <span class="string">&quot;Default Character movement tag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AttributeSet-属性配置"><a href="#AttributeSet-属性配置" class="headerlink" title="AttributeSet 属性配置"></a>AttributeSet 属性配置</h1><h2 id="创建AttributeSet-类"><a href="#创建AttributeSet-类" class="headerlink" title="创建AttributeSet 类"></a>创建AttributeSet 类</h2><ul><li><p>创建继承自AttributeSet的C++类，玩家和怪物的属性都在这里进行声明配置，如生命值魔法值等</p><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraAttributeSet.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">DECLARE_DELEGATE_RetVal</span>(FGameplayAttribute, FAttributeSignature);</span><br><span class="line"><span class="comment">// 属性访问器</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ATTRIBUTE_ACCESSORS(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_GETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_SETTER(PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_VALUE_INITTER(PropertyName)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊属性</span></span><br><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FEffectProperties</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="built_in">FEffectProperties</span>()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">FGameplayEffectContextHandle EffectContextHandle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">UAbilitySystemComponent* SourceASC = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">AActor* SourceAvatarActor = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">AController* SourceController = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">ACharacter* SourceCharacter = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">UAbilitySystemComponent* TargetASC = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">AActor* TargetAvatarActor = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">AController* TargetController = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">ACharacter* TargetCharacter = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">using</span> TStaticFuncPtr = <span class="keyword">typename</span> TBaseStaticDelegateInstance&lt;T, FDefaultDelegateUserPolicy&gt;::FFuncPtr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraAttributeSet : <span class="keyword">public</span> UAttributeSet</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="built_in">UAuraAttributeSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制属性</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//预处理属性,改变前调用</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PreAttributeChange</span><span class="params">(<span class="type">const</span> FGameplayAttribute&amp; Attribute, <span class="type">float</span>&amp; NewValue)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//后处理属性,改变后调用</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PostGameplayEffectExecute</span><span class="params">(<span class="type">const</span> FGameplayEffectModCallbackData&amp; Data)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Primary Attributes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Strength, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Strength;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Strength);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Intelligence, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Intelligence;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Intelligence);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Resilience, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Resilience;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Resilience);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Vigor, Category = <span class="string">&quot;Primary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Vigor;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Vigor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Secondary Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Armor, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Armor;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Armor);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_ArmorPenetration, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData ArmorPenetration;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, ArmorPenetration);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_BlockChance, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData BlockChance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, BlockChance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_CriticalHitChance, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData CriticalHitChance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, CriticalHitChance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_CriticalHitDamage, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData CriticalHitDamage;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, CriticalHitDamage);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_CriticalHitResistance, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData CriticalHitResistance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, CriticalHitResistance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_HealthRegeneration, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData HealthRegeneration;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, HealthRegeneration);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_ManaRegeneration, Category = <span class="string">&quot;Secondary Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData ManaRegeneration;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, ManaRegeneration);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxHealth, Category = <span class="string">&quot;Vital Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData MaxHealth;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, MaxHealth);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxMana, Category = <span class="string">&quot;Vital Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData MaxMana;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, MaxMana);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Resistance Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_FireResistance, Category = <span class="string">&quot;Resistance Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData FireResistance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, FireResistance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_LightningResistance, Category = <span class="string">&quot;Resistance Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData LightningResistance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, LightningResistance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_ArcaneResistance, Category = <span class="string">&quot;Resistance Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData ArcaneResistance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, ArcaneResistance);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_PhysicalResistance, Category = <span class="string">&quot;Resistance Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData PhysicalResistance;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, PhysicalResistance);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Vital Attributes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Health, Category = <span class="string">&quot;Vital Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Health;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Health);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, ReplicatedUsing = OnRep_Mana, Category = <span class="string">&quot;Vital Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData Mana;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, Mana);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Meta Attributes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category = <span class="string">&quot;Meta Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData IncomingDamage;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, IncomingDamage);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category = <span class="string">&quot;Meta Attributes&quot;</span>)</span><br><span class="line">FGameplayAttributeData IncomingXP;</span><br><span class="line"><span class="built_in">ATTRIBUTE_ACCESSORS</span>(UAuraAttributeSet, IncomingXP);</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Mana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMana)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Strength</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldStrength)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Intelligence</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldIntelligence)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Resilience</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldResilience)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Vigor</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldVigor)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Armor</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArmor)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_ArmorPenetration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArmorPenetration)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_BlockChance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldBlockChance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_CriticalHitChance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitChance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_CriticalHitDamage</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitDamage)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_CriticalHitResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitResistance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_HealthRegeneration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealthRegeneration)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_ManaRegeneration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldManaRegeneration)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_MaxMana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxMana)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_FireResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldFireResistance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_LightningResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldLightningResistance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_ArcaneResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArcaneResistance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_PhysicalResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldPhysicalResistance)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 设置效果属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetEffectProperties</span><span class="params">(<span class="type">const</span> FGameplayEffectModCallbackData&amp; Data, FEffectProperties&amp; Props)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//标签委托字典</span></span><br><span class="line"><span class="comment">// TMap&lt;FGameplayTag, FAttributeSignature&gt; TagsToAttributes;</span></span><br><span class="line"><span class="comment">//TMap&lt;FGameplayTag, FGameplayAttribute(*)()&gt; TagsToAttributes;</span></span><br><span class="line">TMap&lt;FGameplayTag, TStaticFuncPtr&lt;<span class="built_in">FGameplayAttribute</span>()&gt;&gt; TagsToAttributes;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemBlueprintLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayEffectExtension.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/GameplayTags/AuraGameplayTags.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Net/UnrealNetwork.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AttributeMenuWidgetController.h&quot;</span></span></span><br><span class="line"><span class="comment">//GAMEPLAYATTRIBUTE_REPNOTIFY(UAuraAttributeSet, Health, OldHealth);</span></span><br><span class="line">UAuraAttributeSet::<span class="built_in">UAuraAttributeSet</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取标签结构体</span></span><br><span class="line"><span class="type">const</span> FAuraGameplayTags&amp; GameplayTags = FAuraGameplayTags::<span class="built_in">Get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Primary Attributes */</span></span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Primary_Strength, GetStrengthAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Primary_Intelligence, GetIntelligenceAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Primary_Resilience, GetResilienceAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Primary_Vigor, GetVigorAttribute);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Secondary Attributes */</span></span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_Armor, GetArmorAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_ArmorPenetration, GetArmorPenetrationAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_BlockChance, GetBlockChanceAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_CriticalHitChance, GetCriticalHitChanceAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_CriticalHitResistance, GetCriticalHitResistanceAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_CriticalHitDamage, GetCriticalHitDamageAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_HealthRegeneration, GetHealthRegenerationAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_ManaRegeneration, GetManaRegenerationAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_MaxHealth, GetMaxHealthAttribute);</span><br><span class="line">TagsToAttributes.<span class="built_in">Add</span>(GameplayTags.Attributes_Secondary_MaxMana, GetMaxManaAttribute);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resistance Attributes */</span></span><br><span class="line"><span class="comment">// TagsToAttributes.Add(GameplayTags.Attributes_Resistance_Arcane, GetArcaneResistanceAttribute);</span></span><br><span class="line"><span class="comment">// TagsToAttributes.Add(GameplayTags.Attributes_Resistance_Fire, GetFireResistanceAttribute);</span></span><br><span class="line"><span class="comment">// TagsToAttributes.Add(GameplayTags.Attributes_Resistance_Lightning, GetLightningResistanceAttribute);</span></span><br><span class="line"><span class="comment">// TagsToAttributes.Add(GameplayTags.Attributes_Resistance_Physical, GetPhysicalResistanceAttribute);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Primary Attributes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Strength, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Intelligence, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Resilience, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Vigor, COND_None, REPNOTIFY_Always);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Secondary Attributes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Armor, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, ArmorPenetration, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, BlockChance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, CriticalHitChance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, CriticalHitDamage, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, CriticalHitResistance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, HealthRegeneration, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, ManaRegeneration, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, MaxHealth, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, MaxMana, COND_None, REPNOTIFY_Always);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resistance Attributes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, FireResistance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, LightningResistance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, ArcaneResistance, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, PhysicalResistance, COND_None, REPNOTIFY_Always);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vital Attributes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line"><span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UAuraAttributeSet, Mana, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性改变前调用,限制最大值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::PreAttributeChange</span><span class="params">(<span class="type">const</span> FGameplayAttribute&amp; Attribute, <span class="type">float</span>&amp; NewValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">PreAttributeChange</span>(Attribute, NewValue);</span><br><span class="line"><span class="keyword">if</span>(Attribute == <span class="built_in">GetHealthAttribute</span>())</span><br><span class="line">&#123;</span><br><span class="line">NewValue = FMath::<span class="built_in">Clamp</span>(NewValue, <span class="number">0.f</span>, <span class="built_in">GetMaxHealth</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Attribute == <span class="built_in">GetManaAttribute</span>())</span><br><span class="line">&#123;</span><br><span class="line">NewValue = FMath::<span class="built_in">Clamp</span>(NewValue, <span class="number">0.f</span>, <span class="built_in">GetMaxMana</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性改变后调用,用于限制属性最大值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::PostGameplayEffectExecute</span><span class="params">(<span class="type">const</span> FGameplayEffectModCallbackData&amp; Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">PostGameplayEffectExecute</span>(Data);</span><br><span class="line">FEffectProperties Props;</span><br><span class="line"><span class="built_in">SetEffectProperties</span>(Data, Props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(Props.TargetCharacter-&gt;Implements&lt;UCombatInterface&gt;() &amp;&amp; ICombatInterface::Execute_IsDead(Props.TargetCharacter)) return;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Data.EvaluatedData.Attribute == <span class="built_in">GetHealthAttribute</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">SetHealth</span>(FMath::<span class="built_in">Clamp</span>(<span class="built_in">GetHealth</span>(), <span class="number">0.f</span>, <span class="built_in">GetMaxHealth</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Data.EvaluatedData.Attribute == <span class="built_in">GetManaAttribute</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">SetMana</span>(FMath::<span class="built_in">Clamp</span>(<span class="built_in">GetMana</span>(), <span class="number">0.f</span>, <span class="built_in">GetMaxMana</span>()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置效果属性,在属性集类改变属性后调用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::SetEffectProperties</span><span class="params">(<span class="type">const</span> FGameplayEffectModCallbackData&amp; Data, FEffectProperties&amp; Props)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体设置效果上下文</span></span><br><span class="line">Props.EffectContextHandle = Data.EffectSpec.<span class="built_in">GetContext</span>();</span><br><span class="line"><span class="comment">//结构体设置能力系统组件</span></span><br><span class="line">Props.SourceASC = Props.EffectContextHandle.<span class="built_in">GetOriginalInstigatorAbilitySystemComponent</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果能力组件有效和角色有效</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsValid</span>(Props.SourceASC) &amp;&amp; Props.SourceASC-&gt;AbilityActorInfo.<span class="built_in">IsValid</span>() &amp;&amp; Props.SourceASC-&gt;AbilityActorInfo-&gt;AvatarActor.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">Props.SourceAvatarActor = Props.SourceASC-&gt;AbilityActorInfo-&gt;AvatarActor.<span class="built_in">Get</span>();</span><br><span class="line">Props.SourceController = Props.SourceASC-&gt;AbilityActorInfo-&gt;PlayerController.<span class="built_in">Get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果角色无效，则从角色中获取</span></span><br><span class="line"><span class="keyword">if</span> (Props.SourceController == <span class="literal">nullptr</span> &amp;&amp; Props.SourceAvatarActor != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="type">const</span> APawn* Pawn = <span class="built_in">Cast</span>&lt;APawn&gt;(Props.SourceAvatarActor))</span><br><span class="line">&#123;</span><br><span class="line">Props.SourceController = Pawn-&gt;<span class="built_in">GetController</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果角色有效，则从角色中获取</span></span><br><span class="line"><span class="keyword">if</span> (Props.SourceController)</span><br><span class="line">&#123;</span><br><span class="line">Props.SourceCharacter = <span class="built_in">Cast</span>&lt;ACharacter&gt;(Props.SourceController-&gt;<span class="built_in">GetPawn</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果目标有效和角色有效</span></span><br><span class="line"><span class="keyword">if</span> (Data.Target.AbilityActorInfo.<span class="built_in">IsValid</span>() &amp;&amp; Data.Target.AbilityActorInfo-&gt;AvatarActor.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">Props.TargetAvatarActor = Data.Target.AbilityActorInfo-&gt;AvatarActor.<span class="built_in">Get</span>();</span><br><span class="line">Props.TargetController = Data.Target.AbilityActorInfo-&gt;PlayerController.<span class="built_in">Get</span>();</span><br><span class="line">Props.TargetCharacter = <span class="built_in">Cast</span>&lt;ACharacter&gt;(Props.TargetAvatarActor);</span><br><span class="line">Props.TargetASC = UAbilitySystemBlueprintLibrary::<span class="built_in">GetAbilitySystemComponent</span>(Props.TargetAvatarActor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Health</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Health, OldHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Mana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMana)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Mana, OldMana);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Strength</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldStrength)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Strength, OldStrength);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Intelligence</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldIntelligence)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Intelligence, OldIntelligence);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Resilience</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldResilience)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Resilience, OldResilience);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Vigor</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldVigor)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Vigor, OldVigor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_Armor</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArmor)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, Armor, OldArmor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_ArmorPenetration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArmorPenetration)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, ArmorPenetration, OldArmorPenetration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_BlockChance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldBlockChance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, BlockChance, OldBlockChance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_CriticalHitChance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitChance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, CriticalHitChance, OldCriticalHitChance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_CriticalHitDamage</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitDamage)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, CriticalHitDamage, OldCriticalHitDamage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_CriticalHitResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldCriticalHitResistance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, CriticalHitResistance, OldCriticalHitResistance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_HealthRegeneration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldHealthRegeneration)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, HealthRegeneration, OldHealthRegeneration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_ManaRegeneration</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldManaRegeneration)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, ManaRegeneration, OldManaRegeneration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_MaxHealth</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxHealth)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, MaxHealth, OldMaxHealth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_MaxMana</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldMaxMana)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, MaxMana, OldMaxMana);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_FireResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldFireResistance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, FireResistance, OldFireResistance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_LightningResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldLightningResistance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, LightningResistance, OldLightningResistance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_ArcaneResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldArcaneResistance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, ArcaneResistance, OldArcaneResistance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAttributeSet::OnRep_PhysicalResistance</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; OldPhysicalResistance)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_REPNOTIFY</span>(UAuraAttributeSet, PhysicalResistance, OldPhysicalResistance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h3><ul><li><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemComponent.h&quot;</span>`组件头文件，需要使用AbilitySystemComponent类必须加载该头文件</span></span><br></pre></td></tr></table></figure></li><li><p>宏定义用于自动生成类属性的访问器方法</p><p>命名规范：确保宏中的方法名称符合项目的命名规范。<br>线程安全：如果属性在多线程环境中使用，考虑添加必要的同步机制。<br>性能优化：对于频繁访问的属性，可以考虑使用内联函数以提高性能。<br>通过这种方式，可以大大简化属性访问器的编写，提高代码的可维护性和一致性。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ATTRIBUTE_ACCESSORS 宏定义用于自动生成类属性的访问器方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ATTRIBUTE_ACCESSORS(ClassName, PropertyName) \</span></span><br><span class="line"><span class="meta">GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \ <span class="comment">//生成一个获取属性的方法，通常返回属性的引用或值</span></span></span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_VALUE_GETTER</span>(PropertyName) \  <span class="comment">//生成一个获取属性值的方法，通常返回属性的值</span></span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_VALUE_SETTER</span>(PropertyName) \  <span class="comment">//生成一个设置属性值的方法，通常接受一个参数并更新属性的值。</span></span><br><span class="line"><span class="built_in">GAMEPLAYATTRIBUTE_VALUE_INITTER</span>(PropertyName)   <span class="comment">//生成一个初始化属性值的方法，通常用于在构造函数或其他初始化方法中设置属性的初始值</span></span><br></pre></td></tr></table></figure><p>​假设我们有一个类 Character，并且希望为属性 Health 生成访问器方法，可以这样使用宏：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 使用宏生成访问器方法</span></span><br><span class="line">    <span class="built_in">ATTRIBUTE_ACCESSORS</span>(Character, Health)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> Health;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​展开后的代码<br>​宏展开后，生成的代码可能类似于以下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取属性的方法</span></span><br><span class="line">    <span class="function"><span class="type">float</span>&amp; <span class="title">GetHealth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Health; &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">float</span>&amp; <span class="title">GetHealth</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> Health; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取属性值的方法</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">GetHealthValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> Health; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置属性值的方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetHealthValue</span><span class="params">(<span class="type">float</span> NewValue)</span> </span>&#123; Health = NewValue; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化属性值的方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InitHealthValue</span><span class="params">(<span class="type">float</span> InitialValue)</span> </span>&#123; Health = InitialValue; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> Health;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="在玩家类中初始化"><a href="#在玩家类中初始化" class="headerlink" title="在玩家类中初始化"></a>在玩家类中初始化</h2><ul><li><p>因为玩家角色在游戏中死亡会被销毁释放，属性也会跟着被释放掉，为了避免这种情况，我们需要将玩家属性和玩家分开，我们可以通过PlayerState类配置玩家的属性，玩家再从PlayerState类里获取属性，这样即使玩家被释放了复活后依旧可以从这里获取属性</p></li><li><p>新建一个继承自PlayerState的类StestPlayerState</p></li><li><p>StestPlayerState源码如下</p><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/PlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StestPlayerState.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前向声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GASDEMO_API</span> AStestPlayerState : <span class="keyword">public</span> APlayerState,<span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AStestPlayerState</span>();</span><br><span class="line">    <span class="comment">//重写组件虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">//AttributeSet，属于AbilitySystemComponent</span></span><br><span class="line"><span class="function">UAttributeSet* <span class="title">GetAttributeSet</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> AttributeSet; &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="comment">//指向UAbilitySystemComponent的智能指针，用于管理玩家的能力和效果。</span></span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="comment">//指向UAttributeSet的智能指针，用于存储玩家的属性值，如生命值、魔法值等</span></span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/StestPlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">AStestPlayerState::<span class="built_in">AStestPlayerState</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建能力组件</span></span><br><span class="line">AbilitySystemComponent = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAbilitySystemComponent&gt;(<span class="string">&quot;AbilitySystemComponent&quot;</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetIsReplicated</span>(<span class="literal">true</span>);</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">SetReplicationMode</span>(EGameplayEffectReplicationMode::Mixed);</span><br><span class="line">AttributeSet = <span class="built_in">CreateDefaultSubobject</span>&lt;UAuraAttributeSet&gt;(<span class="string">&quot;AttributeSet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这段C++代码是Unreal Engine中的一部分，用于设置一个玩家状态(AStestPlayerState)的网络更新频率</span></span><br><span class="line">NetUpdateFrequency=<span class="number">100.f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口继承的方法，返回AbilitySystemComponent</span></span><br><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AStestPlayerState::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>角色基类源码如下,因为怪物和玩家都有能力组件，所以创建一个角色基类，玩家和怪物都继承自这个类，他们都有能力组件，不过初始化需要分开在子类中初始化，因为玩家的属性是分离的，怪物的不是。<code>注：记得前向声明</code></p><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystemInterface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraCharacterBase : <span class="keyword">public</span> ACharacter,<span class="keyword">public</span> IAbilitySystemInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AAuraCharacterBase</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> UAbilitySystemComponent* <span class="title">GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function">UAttributeSet* <span class="title">GetAttributeSet</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> AttributeSet; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家能力组件AbilitySystemComponent</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"><span class="comment">//玩家属性组件AttributeSet</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UAbilitySystemComponent* <span class="title">AAuraCharacterBase::GetAbilitySystemComponent</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> AbilitySystemComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>玩家源码，继承自角色基类</p><ul><li>头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacterBase.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraCharacter.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraCharacter : <span class="keyword">public</span> AAuraCharacterBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="type">void</span> <span class="title">PossessedBy</span><span class="params">(AController* NewController)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//网络同步相关</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnRep_PlayerState</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitAbilityActorInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>源文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Character/AuraCharacter.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::PossessedBy</span><span class="params">(AController* NewController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">PossessedBy</span>(NewController);</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::OnRep_PlayerState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnRep_PlayerState</span>();</span><br><span class="line"><span class="built_in">InitAbilityActorInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCharacter::InitAbilityActorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取玩家状态单例</span></span><br><span class="line">AAuraPlayerState* AuraPlayerState = <span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line"><span class="built_in">check</span>(AuraPlayerState);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这行代码的作用是初始化 AbilitySystemComponent 的 Actor 信息。</span></span><br><span class="line"><span class="comment">// 具体来说，它将 AuraPlayerState 和 当前对象 (this) 作为参数传递给 InitAbilityActorInfo 方法。</span></span><br><span class="line">AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>()-&gt;<span class="built_in">InitAbilityActorInfo</span>(AuraPlayerState, <span class="keyword">this</span>); <span class="comment">//如果是怪物则AuraPlayerState改为this</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>())-&gt;<span class="built_in">AbilityActorInfoSet</span>();<span class="comment">//绑定委托,未实现</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将玩玩家的属性和能力设置为玩家状态单例的属性和能力</span></span><br><span class="line">AbilitySystemComponent = AuraPlayerState-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">AttributeSet = AuraPlayerState-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>Intstats 在能力组件中通过数据表格初始化</p><p>在AttributeSet中构造函数初始化：适用于静态初始化，通常在类定义时使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    UMyAttributeSet::<span class="built_in">UMyAttributeSet</span>()</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">InitHealth</span>(<span class="number">100.f</span>);</span><br><span class="line"><span class="built_in">InitMaxHealth</span>(<span class="number">100.f</span>);</span><br><span class="line"><span class="built_in">InitMana</span>(<span class="number">50.f</span>);</span><br><span class="line"><span class="built_in">InitMaxMana</span>(<span class="number">50.f</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>InitFromStruct 方法：适用于从结构体中初始化属性。自定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::InitFromStruct</span><span class="params">(<span class="type">const</span> FGameplayAttributeData&amp; Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Health = Data.Health;</span><br><span class="line">    MaxHealth = Data.MaxHealth;</span><br><span class="line">    Mana = Data.Mana;</span><br><span class="line">    MaxMana = Data.MaxMana;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PostGameplayEffectExecute 方法：适用于在应用游戏效果时动态更新属性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::PostGameplayEffectExecute</span><span class="params">(<span class="type">const</span> FGameplayEffectModCallbackData&amp; Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">PostGameplayEffectExecute</span>(Data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据游戏效果的数据来更新属性</span></span><br><span class="line">    <span class="keyword">if</span> (Data.EvaluatedData.Attribute == <span class="built_in">GetHealthAttribute</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SetHealth</span>(FMath::<span class="built_in">Clamp</span>(Data.EvaluatedData.Value, <span class="number">0.0f</span>, <span class="built_in">GetMaxHealth</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OnRep_ 函数：适用于在网络复制属性后进行初始化或更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(Replicated, BlueprintReadWrite, Category = <span class="string">&quot;Attributes&quot;</span>)</span><br><span class="line"><span class="type">float</span> Health;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyAttributeSet::OnRep_Health</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在属性网络复制后进行初始化或更新</span></span><br><span class="line">    <span class="comment">// 例如，触发事件或更新 UI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><table><thead><tr><th>虚函数</th><th>说明</th></tr></thead><tbody><tr><td>virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>&amp; OutLifetimeProps) const override;</td><td>获取需要在网络上传输的属性</td></tr><tr><td>virtual void PreAttributeChange(const FGameplayAttribute&amp; Attribute, float&amp; NewValue) override;</td><td>在属性值变化前调用的回调函数</td></tr><tr><td>virtual void PostGameplayEffectExecute(const FGameplayEffectModCallbackData&amp; Data) override;</td><td>在游戏效果执行后调用的回调函数</td></tr></tbody></table><h3 id="属性函数"><a href="#属性函数" class="headerlink" title="属性函数"></a>属性函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>OnRep</td><td>属性变化回调</td></tr><tr><td>Clamp</td><td>限制最大值NewValue &#x3D; FMath::Clamp(NewValue, 0.f, GetMaxHealth());</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><ul><li>数据层</li><li>Widget 主要函数(设置控制器),(设置控制器时发出蓝图事件)是要控件都继承该类</li><li>HUD:,初始化控制层,拥有控制层实例,并提供获取控制层的方法</li></ul><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><ul><li>继承自UObject 在HUD创建实例</li><li>拥有玩家控制器,玩家状态,玩家能力组件,玩家属性集(用结构体获取这些对象)</li><li>拥有两个虚函数,在HUD里调用,分别为初始化属性和绑定属性回调,还有匿名通知捡起物品</li><li>Widget从HUD获取控制层,当Widget获取到控制层时会发出事件给自己</li></ul><h3 id="派生子类Overlay"><a href="#派生子类Overlay" class="headerlink" title="派生子类Overlay"></a>派生子类Overlay</h3><ul><li>负责更新血量和通知捡到物品</li></ul><h3 id="派生子类Attrib"><a href="#派生子类Attrib" class="headerlink" title="派生子类Attrib"></a>派生子类Attrib</h3><ul><li><p>用了函数库,可以全局获取到控制层</p></li><li><p>负责同步属性面板</p></li></ul><h3 id="Widget代码"><a href="#Widget代码" class="headerlink" title="Widget代码"></a>Widget代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户界面基类</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetWidgetController</span><span class="params">(UObject* InWidgetController)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly)</span><br><span class="line">TObjectPtr&lt;UObject&gt; WidgetController;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintImplementableEvent)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WidgetControllerSet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/Widget/AuraUserWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraUserWidget::SetWidgetController</span><span class="params">(UObject* InWidgetController)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 将传入的Widget控制器对象赋值给类成员变量WidgetController</span></span><br><span class="line">WidgetController = InWidgetController;</span><br><span class="line"><span class="comment">// 调用WidgetControllerSet函数，通知已经设置了Widget控制器对象</span></span><br><span class="line"><span class="built_in">WidgetControllerSet</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HUD代码"><a href="#HUD代码" class="headerlink" title="HUD代码"></a>HUD代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/HUD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/Widget/AuraUserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraHUD.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UOverlayWidgetController</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAuraUserWidget</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FWidgetControllerParame</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩家HUD,负责创建覆盖控件和绑定控制器</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable, BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> AAuraHUD : <span class="keyword">public</span> AHUD</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//覆盖控件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAuraUserWidget&gt; OverlayWidget;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过结构体创建或者获取控制器</span></span><br><span class="line"><span class="function">UOverlayWidgetController *<span class="title">GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化控制器数据</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitOverlay</span><span class="params">(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* ASC, UAttributeSet* AS)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//覆盖控件类引用</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UAuraUserWidget&gt; OverlayWidgetClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器实例指针</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UOverlayWidgetController&gt; OverlayWidgetController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器类引用</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UOverlayWidgetController&gt; OverlayWidgetControllerClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//*面板属性**//</span></span><br><span class="line"><span class="function">UAttributeMenuWidgetController* <span class="title">GetAttributeMenuWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAttributeMenuWidgetController&gt; AttributeMenuWidgetController;</span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere)</span><br><span class="line">TSubclassOf&lt;UAttributeMenuWidgetController&gt; AttributeMenuWidgetControllerClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/HUD/AuraHUD.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AttributeMenuWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/OverlayWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">UOverlayWidgetController* <span class="title">AAuraHUD::GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(OverlayWidgetController == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">OverlayWidgetController = <span class="built_in">NewObject</span>&lt;UOverlayWidgetController&gt;(<span class="keyword">this</span>, OverlayWidgetControllerClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">OverlayWidgetController-&gt;<span class="built_in">SetWidgetControllerParams</span>(WCParams);</span><br><span class="line"><span class="comment">// 绑定回调</span></span><br><span class="line">OverlayWidgetController-&gt;<span class="built_in">BindCallbacksToDependencies</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OverlayWidgetController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraHUD::InitOverlay</span><span class="params">(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* ASC, UAttributeSet* AS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断控制器类类引用和状态UI类引用是否有效</span></span><br><span class="line"><span class="built_in">checkf</span>(OverlayWidgetClass, <span class="built_in">TEXT</span>(<span class="string">&quot;OverlayWidgetClass is nullptr&quot;</span>))</span><br><span class="line"><span class="built_in">checkf</span>(OverlayWidgetControllerClass, <span class="built_in">TEXT</span>(<span class="string">&quot;OverlayWidgetControllerClass is nullptr&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建覆盖控件</span></span><br><span class="line">UUserWidget * Widget = <span class="built_in">CreateWidget</span>&lt;UUserWidget&gt;(<span class="built_in">GetWorld</span>(), OverlayWidgetClass);</span><br><span class="line">OverlayWidget= <span class="built_in">Cast</span>&lt;UAuraUserWidget&gt;(Widget);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体并将参数构造</span></span><br><span class="line"><span class="type">const</span> FWidgetControllerParame FWidgetControllerParame = &#123;PC, PS, ASC, AS&#125;;</span><br><span class="line"><span class="comment">//获取OverlayWidgetController</span></span><br><span class="line">UOverlayWidgetController * WidgetController = <span class="built_in">GetOverlayWidgetController</span>(FWidgetControllerParame);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置覆盖控件的控制器,发出事件</span></span><br><span class="line">OverlayWidget-&gt;<span class="built_in">SetWidgetController</span>(WidgetController); <span class="comment">//设置用户控件的控制层</span></span><br><span class="line">WidgetController-&gt;<span class="built_in">BroadcastInitialValues</span>(); <span class="comment">//初始化广播的值,在所以UI绑定后调用一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到视口</span></span><br><span class="line">Widget-&gt;<span class="built_in">AddToViewport</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UAttributeMenuWidgetController* <span class="title">AAuraHUD::GetAttributeMenuWidgetController</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(AttributeMenuWidgetController == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">AttributeMenuWidgetController = <span class="built_in">NewObject</span>&lt;UAttributeMenuWidgetController&gt;(<span class="keyword">this</span>, AttributeMenuWidgetControllerClass);</span><br><span class="line">AttributeMenuWidgetController-&gt;<span class="built_in">SetWidgetControllerParams</span>(WCParams);</span><br><span class="line">AttributeMenuWidgetController-&gt;<span class="built_in">BindCallbacksToDependencies</span>(); <span class="comment">//绑定监听数值变化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> AttributeMenuWidgetController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h2><h3 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraWidgetController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeSet</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilitySystemComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储玩家控制器、玩家状态、能力组件、属性集的结构体</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FWidgetControllerParame</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FWidgetControllerParame</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">FWidgetControllerParame</span>(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* InAbiliASCtySystemComponent, UAttributeSet* AS)</span><br><span class="line">: <span class="built_in">PlayerController</span>(PC), <span class="built_in">PlayerState</span>(PS), <span class="built_in">AbilitySystemComponent</span>(InAbiliASCtySystemComponent), <span class="built_in">AttributeSet</span>(AS)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;APlayerController&gt; PlayerController=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;APlayerState&gt; PlayerState=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite)</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器基类</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraWidgetController : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetWidgetControllerParams</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化属性(在HUD调用)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BroadcastInitialValues</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 绑定回调(在HUD调用)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BindCallbacksToDependencies</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取对象数据*/</span></span><br><span class="line"><span class="comment">//获取玩家控制器</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;APlayerController&gt; PlayerController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取玩家状态</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;APlayerState&gt; PlayerState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取能力组件</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UAbilitySystemComponent&gt; AbilitySystemComponent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性集</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadOnly, Category=<span class="string">&quot;WidgetController&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UAttributeSet&gt; AttributeSet;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::SetWidgetControllerParams</span><span class="params">(<span class="type">const</span> FWidgetControllerParame&amp; WCParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PlayerController = WCParams.PlayerController;</span><br><span class="line">PlayerState = WCParams.PlayerState;</span><br><span class="line">AbilitySystemComponent = WCParams.AbilitySystemComponent;</span><br><span class="line">AttributeSet = WCParams.AttributeSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::BroadcastInitialValues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraWidgetController::BindCallbacksToDependencies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生命值-魔法值子类"><a href="#生命值-魔法值子类" class="headerlink" title="生命值&#x2F;魔法值子类"></a>生命值&#x2F;魔法值子类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayTagContainer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OverlayWidgetController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据传入的表格和Tag返回查找到的数据，表格类型不确定，所以使用T来表示，在使用此函数时，需要指定对应类型</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">GetDataTableRowByTag</span><span class="params">(UDataTable* DataTable, <span class="type">const</span> FGameplayTag&amp; Tag)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T* <span class="title">GetDataTableRowByTag</span><span class="params">(UDataTable* DataTable, <span class="type">const</span> FGameplayTag&amp; Tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T* Row = DataTable-&gt;<span class="built_in">FindRow</span>&lt;T&gt;(Tag.<span class="built_in">GetTagName</span>(), <span class="built_in">TEXT</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> Row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//捡到物品的结构</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FUIWidgetRow</span> : <span class="keyword">public</span> FTableRowBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly)</span><br><span class="line">FGameplayTag MessageTag = <span class="built_in">FGameplayTag</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly)</span><br><span class="line">FText Message = <span class="built_in">FText</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly)</span><br><span class="line">TSubclassOf&lt;<span class="keyword">class</span> <span class="title class_">UAuraUserWidget</span>&gt; MessageWidget;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly)</span><br><span class="line">UTexture2D* Image = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FOnAttributeChangeData</span>;</span><br><span class="line"><span class="comment">//生命值改变时发出通知</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnHealtChangedSignature, <span class="type">float</span>, NewHealt);</span><br><span class="line"><span class="comment">//最大生命值改变时发出通知</span></span><br><span class="line"><span class="comment">// DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMaxHealtChangedSignature,float , NewMaxHealt);</span></span><br><span class="line"><span class="comment">// DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnManaChangedSignature, float, NewMana);</span></span><br><span class="line"><span class="comment">// DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMaxManaChangedSignature,float , NewMaxMana);</span></span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FOnAttributeChangedSignature, <span class="type">float</span>, NewAttribute);</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FMessageWidgetRowSignature, FUIWidgetRow, Row);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖层控制器子类</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable,BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UOverlayWidgetController : <span class="keyword">public</span> UAuraWidgetController</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//当属性改变时发出通知</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BroadcastInitialValues</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="comment">//当属性改变时绑定回调</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BindCallbacksToDependencies</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件:生命值改变时发出</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnHealtChangedSignature OnHealtChanged;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件:声明最大值改变时发出</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnAttributeChangedSignature OnMaxHealtChanged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnAttributeChangedSignature OnManaChanged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category = <span class="string">&quot;GAS|Attributes&quot;</span>)</span><br><span class="line">FOnAttributeChangedSignature OnMaxManaChanged;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category=<span class="string">&quot;GAS|Messages&quot;</span>)</span><br><span class="line">FMessageWidgetRowSignature MessageWidgetRowDelegate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EditDefaultsOnly 说明此属性可以通过属性窗口编辑，但只能在原型上进行。</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly, BlueprintReadOnly, Category=<span class="string">&quot;Widget Data&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UDataTable&gt; MessageWidgetDataTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 生命值改变时发出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 最大生命值改变时发出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaxHealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MaxManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/OverlayWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化属性时发出通知*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::BroadcastInitialValues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BroadcastInitialValues</span>();</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AuraAttributeSet = <span class="built_in">CastChecked</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line">OnHealtChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetHealth</span>());</span><br><span class="line">OnMaxHealtChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMaxHealth</span>());</span><br><span class="line">OnManaChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMana</span>());</span><br><span class="line">OnMaxManaChanged.<span class="built_in">Broadcast</span>(AuraAttributeSet-&gt;<span class="built_in">GetMaxMana</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*绑定属性回调*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::BindCallbacksToDependencies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BindCallbacksToDependencies</span>();</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AuraAttributeSet = <span class="built_in">CastChecked</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定生命值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetHealthAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::HealthChanged);</span><br><span class="line"><span class="comment">//绑定最大生命值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetMaxHealthAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::MaxHealthChanged);</span><br><span class="line"><span class="comment">//绑定法力值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetManaAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::ManaChanged);</span><br><span class="line"><span class="comment">//绑定最大法力值回调</span></span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(</span><br><span class="line">AuraAttributeSet-&gt;<span class="built_in">GetMaxManaAttribute</span>()).<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UOverlayWidgetController::MaxManaChanged);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数调用</span></span><br><span class="line"><span class="comment">// AbilitySystemComponent-&gt;GetGameplayAttributeValueChangeDelegate(AuraAttributeSet-&gt;GetHealthAttribute()</span></span><br><span class="line"><span class="comment">// ).AddLambda([this](const FOnAttributeChangeData&amp; Data)&#123;OnHealtChanged.Broadcast(Data.NewValue);&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AddLambda 绑定匿名函数(效果添加Tag时触发)</span></span><br><span class="line"><span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(AbilitySystemComponent)-&gt;EffectAssetTags.<span class="built_in">AddLambda</span>(</span><br><span class="line">[<span class="keyword">this</span>](<span class="type">const</span> FGameplayTagContainer&amp; AssetTags) <span class="comment">//中括号添加this是为了保证内部能够获取类的对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> FGameplayTag&amp; Tag : AssetTags)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const FString Msg = FString::Printf(TEXT(&quot;添加标签: %s&quot;), *Tag.ToString()); //获取Asset Tag</span></span><br><span class="line"><span class="comment">// GEngine-&gt;AddOnScreenDebugMessage(-1, 8.f, FColor::Cyan, Msg); //打印到屏幕上 -1 不会被覆盖</span></span><br><span class="line"><span class="comment">//对标签进行检测，如果不是信息标签，将无法进行广播</span></span><br><span class="line">FGameplayTag MessageTag = FGameplayTag::<span class="built_in">RequestGameplayTag</span>(<span class="built_in">FName</span>(<span class="string">&quot;Message&quot;</span>));</span><br><span class="line"><span class="comment">// &quot;A.1&quot;.MatchesTag(&quot;A&quot;) will return True, &quot;A&quot;.MatchesTag(&quot;A.1&quot;) will return False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Tag.<span class="built_in">MatchesTag</span>(MessageTag))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FString Msg = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;添加标签: %s&quot;</span>), *Tag.<span class="built_in">ToString</span>()); <span class="comment">//获取Asset Tag</span></span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">8.f</span>, FColor::Cyan, Msg); </span><br><span class="line"></span><br><span class="line">FUIWidgetRow* Row = <span class="built_in">GetDataTableRowByTag</span>&lt;FUIWidgetRow&gt;(MessageWidgetDataTable, Tag);</span><br><span class="line">MessageWidgetRowDelegate.<span class="built_in">Broadcast</span>(*Row); <span class="comment">//前面加*取消指针引用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                       <span class="comment">/*当属性改变时发出通知*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::HealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnHealtChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::MaxHealthChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnMaxHealtChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::ManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnManaChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOverlayWidgetController::MaxManaChanged</span><span class="params">(<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OnMaxManaChanged.<span class="built_in">Broadcast</span>(Data.NewValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AuraWidgetController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AttributeMenuWidgetController.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAbilityInfo</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FAttributeInfo</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FGameplayTag</span>;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span>(FAttibuteInfoSignature, <span class="type">const</span> FAttributeInfo&amp;, Info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播属性用的控制层</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable, BlueprintType)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAttributeMenuWidgetController : <span class="keyword">public</span> UAuraWidgetController</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BroadcastInitialValues</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">//广播初始值</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BindCallbacksToDependencies</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">//绑定数值变动后回调广播</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintAssignable, Category=<span class="string">&quot;GAS|Attributes&quot;</span>)<span class="comment">//设置BlueprintAssignable可以在蓝图作为委托绑定监听</span></span><br><span class="line">FAttibuteInfoSignature AttributeInfoDelegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly)<span class="comment">//EditDefaultsOnly只能在UE面板编辑</span></span><br><span class="line">TObjectPtr&lt;UAbilityInfo&gt; AttributeInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BroadcastAttributeInfo</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; AttributeTag, <span class="type">const</span> FGameplayAttribute&amp; Attribute)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/WidgetController/AttributeMenuWidgetController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/Data/AbilityInfo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAttributeMenuWidgetController::BindCallbacksToDependencies</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BindCallbacksToDependencies</span>();</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AS = <span class="built_in">Cast</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line"><span class="built_in">check</span>(AttributeInfo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : AS-&gt;TagsToAttributes)</span><br><span class="line">&#123;</span><br><span class="line">AbilitySystemComponent-&gt;<span class="built_in">GetGameplayAttributeValueChangeDelegate</span>(Pair.<span class="built_in">Value</span>()).<span class="built_in">AddLambda</span>(</span><br><span class="line">[<span class="keyword">this</span>,Pair,AS](<span class="type">const</span> FOnAttributeChangeData&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//BroadcastAttributeInfo(Pair.Key,Pair.Value());</span></span><br><span class="line">FAttributeInfo Info = AttributeInfo-&gt;<span class="built_in">FindAttributeInfoForTag</span>(Pair.Key);</span><br><span class="line">Info.AttributeValue = Pair.<span class="built_in">Value</span>().<span class="built_in">GetNumericValue</span>(AS);</span><br><span class="line">AttributeInfoDelegate.<span class="built_in">Broadcast</span>(Info);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAttributeMenuWidgetController::BroadcastInitialValues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> UAuraAttributeSet* AS = <span class="built_in">Cast</span>&lt;UAuraAttributeSet&gt;(AttributeSet);</span><br><span class="line"><span class="built_in">check</span>(AttributeInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (auto&amp; Pair : AS-&gt;TagsToAttributes)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// FAttributeInfo Info = AttributeInfo-&gt;FindAttributeInfoForTag(Pair.Key);</span></span><br><span class="line"><span class="comment">// FGameplayAttribute Attr = Pair.Value.Execute();</span></span><br><span class="line"><span class="comment">// Info.AttributeValue = Attr.GetNumericValue(AS);</span></span><br><span class="line"><span class="comment">// AttributeInfoDelegate.Broadcast(Info);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : AS-&gt;TagsToAttributes)</span><br><span class="line">&#123;</span><br><span class="line">FAttributeInfo Info = AttributeInfo-&gt;<span class="built_in">FindAttributeInfoForTag</span>(Pair.Key);</span><br><span class="line">Info.AttributeValue = Pair.<span class="built_in">Value</span>().<span class="built_in">GetNumericValue</span>(AS);</span><br><span class="line">AttributeInfoDelegate.<span class="built_in">Broadcast</span>(Info);</span><br><span class="line"><span class="comment">//BroadcastAttributeInfo(Pair.Key,Pair.Value());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAttributeMenuWidgetController::BroadcastAttributeInfo</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; AttributeTag,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FGameplayAttribute&amp; Attribute)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FAttributeInfo Info = AttributeInfo-&gt;<span class="built_in">FindAttributeInfoForTag</span>(AttributeTag);</span><br><span class="line">Info.AttributeValue = Attribute.<span class="built_in">GetNumericValue</span>(AttributeSet);</span><br><span class="line">AttributeInfoDelegate.<span class="built_in">Broadcast</span>(Info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void UAttributeMenuWidgetController::BroadcastAttributeInfo(const FGameplayTag&amp; AttributeTag, const FGameplayAttribute&amp; Attribute) const</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// FAttributeInfo Info = AttributeInfo-&gt;FindAttributeInfoForTag(AttributeTag);</span></span><br><span class="line"><span class="comment">// Info.AttributeValue = Attribute.GetNumericValue(AttributeSet);</span></span><br><span class="line"><span class="comment">// AttributeInfoDelegate.Broadcast(Info);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="控制层函数库代码"><a href="#控制层函数库代码" class="headerlink" title="控制层函数库代码"></a>控制层函数库代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraAbilitySystemLibrary.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAttributeMenuWidgetController</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UOverlayWidgetController</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraAbilitySystemLibrary : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">////获取生命值控制层</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category=<span class="string">&quot;MyAbilitySystemLibrary|WidgetController&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> UOverlayWidgetController* <span class="title">GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取属性集控制层</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category=<span class="string">&quot;MyAbilitySystemLibrary|WidgetController&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> UAttributeMenuWidgetController* <span class="title">GetAttributeMenuWidgetController</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemLibrary.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/GameplayStatics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Player/AuraPlayerState.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UI/HUD/AuraHUD.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取生命值控制层</span></span><br><span class="line"><span class="function">UOverlayWidgetController* <span class="title">UAuraAbilitySystemLibrary::GetOverlayWidgetController</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取到playerController， 需要传入一个世界空间上下文的对象，用于得到对应世界中的PC列表，0为本地使用的PC</span></span><br><span class="line"><span class="keyword">if</span>(APlayerController* PC = UGameplayStatics::<span class="built_in">GetPlayerController</span>(WorldContextObject, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从PC获取到HUD，我们就可以从HUD获得对应的Controller</span></span><br><span class="line"><span class="keyword">if</span>(AAuraHUD* HUD = <span class="built_in">Cast</span>&lt;AAuraHUD&gt;(PC-&gt;<span class="built_in">GetHUD</span>()))</span><br><span class="line">&#123;</span><br><span class="line">AAuraPlayerState* PS = PC-&gt;<span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line">UAbilitySystemComponent* ASC = PS-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">UAttributeSet* AS = PS-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line"><span class="function"><span class="type">const</span> FWidgetControllerParame <span class="title">WidgetControllerParams</span><span class="params">(PC, PS, ASC, AS)</span></span>;</span><br><span class="line"><span class="keyword">return</span> HUD-&gt;<span class="built_in">GetOverlayWidgetController</span>(WidgetControllerParams);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性集控制层</span></span><br><span class="line"><span class="function">UAttributeMenuWidgetController* <span class="title">UAuraAbilitySystemLibrary::GetAttributeMenuWidgetController</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取到playerController， 需要传入一个世界空间上下文的对象，用于得到对应世界中的PC列表，0为本地使用的PC</span></span><br><span class="line"><span class="keyword">if</span>(APlayerController* PC = UGameplayStatics::<span class="built_in">GetPlayerController</span>(WorldContextObject, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从PC获取到HUD，我们就可以从HUD获得对应的Controller</span></span><br><span class="line"><span class="keyword">if</span>(AAuraHUD* HUD = <span class="built_in">Cast</span>&lt;AAuraHUD&gt;(PC-&gt;<span class="built_in">GetHUD</span>()))</span><br><span class="line">&#123;</span><br><span class="line">AAuraPlayerState* PS = PC-&gt;<span class="built_in">GetPlayerState</span>&lt;AAuraPlayerState&gt;();</span><br><span class="line">UAbilitySystemComponent* ASC = PS-&gt;<span class="built_in">GetAbilitySystemComponent</span>();</span><br><span class="line">UAttributeSet* AS = PS-&gt;<span class="built_in">GetAttributeSet</span>();</span><br><span class="line"><span class="function"><span class="type">const</span> FWidgetControllerParame <span class="title">WidgetControllerParams</span><span class="params">(PC, PS, ASC, AS)</span></span>;</span><br><span class="line"><span class="keyword">return</span> HUD-&gt;<span class="built_in">GetAttributeMenuWidgetController</span>(WidgetControllerParams);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GE-效果配置"><a href="#GE-效果配置" class="headerlink" title="GE 效果配置"></a>GE 效果配置</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="持续时间"><a href="#持续时间" class="headerlink" title="持续时间"></a>持续时间</h3><table><thead><tr><th>属性名</th><th>描述</th><th></th></tr></thead><tbody><tr><td>Insant</td><td>立即执行</td><td></td></tr><tr><td>Infinite</td><td>无限 比如泉水持续回血,记得添加移除事件,比如玩家离开泉水后不再执行效果</td><td>+ Period  间隔时间<br />+ bExecutePeriodicEffectOnApplication 立即执行或者倒数再执行<br />+ PeriodicInhibitionPolicy</td></tr><tr><td>Has Duration</td><td>有时间</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="堆叠Stacking"><a href="#堆叠Stacking" class="headerlink" title="堆叠Stacking"></a>堆叠Stacking</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Aggregate by Source</td><td>那么角色可以对每个目标叠加三层效果</td></tr><tr><td>Aggregate by Target</td><td>那么就是不管多少人对目标叠加了多少层效果，目标身上只能叠加三层效果</td></tr></tbody></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>StackLimitCount</strong></td><td>堆叠次数</td></tr><tr><td><strong>Stack Duration Refresh Polic</strong></td><td><code>Refresh on Successfull Application</code>： 叠加效果时，刷新持续时间，即使层数不增加也会更新。<br /><code>Never Refresh</code>： 即使叠加效果，也不会刷新。。</td></tr><tr><td><strong>Stack Period Reset Policy</strong></td><td><code>Refresh on Successfull Application</code>：叠加效果时，每次都会更新周期时间 Period<br /><code>Never Refresh</code>： 即使叠加效果，也不会刷新。</td></tr><tr><td><strong>Stack Expiration Policy</strong></td><td><code>Clear Entire Stack</code>:Duration结束时清楚所有层数<br /><code>Remove Single Stack And Refresh Duration</code>：Duration结束时减少一层，然后重新经历一个Duration，一直持续到层数减为0<br /><code>Refresh Duration</code>：Duration结束时再次刷新Duration，这相当于无限Duration，可以通过调用</td></tr></tbody></table><table><thead><tr><th>属性Overflow</th><th></th></tr></thead><tbody><tr><td><strong>OverflowEffects</strong></td><td>超过StackLimitCount数量的Effect被Apply时将会调用该OverflowEffects，可以设置多个</td></tr><tr><td><strong>DenyOverflowApplication</strong></td><td>对应于StackDurationRefreshPolicy，如果为True则多余的Apply不会刷新Duration</td></tr><tr><td><strong>ClearStackOnOverflow</strong></td><td>当DenyOverflowApplication为True是才有效，当Overflow时是否直接删除所有层数</td></tr></tbody></table><h2 id="叠加触发"><a href="#叠加触发" class="headerlink" title="叠加触发"></a>叠加触发</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable) </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyEffectToTarget</span><span class="params">(AActor* TargetActor, TSubclassOf&lt;UGameplayEffect&gt; GameplayEffectClass)</span></span>;<span class="comment">//给与目标添加GameplayEffect</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraCtestCharacter::ApplyEffectToTarget</span><span class="params">(AActor* TargetActor, TSubclassOf&lt;UGameplayEffect&gt; GameplayEffectClass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取角色能力组件</span></span><br><span class="line">UAbilitySystemComponent* TargetASC = UAbilitySystemBlueprintLibrary::<span class="built_in">GetAbilitySystemComponent</span>(TargetActor);</span><br><span class="line"><span class="comment">//生成游戏效果上下文</span></span><br><span class="line">FGameplayEffectContextHandle EffectContextHandle = TargetASC-&gt;<span class="built_in">MakeEffectContext</span>();</span><br><span class="line"><span class="comment">//设置游戏效果上下文的源对象</span></span><br><span class="line">EffectContextHandle.<span class="built_in">AddSourceObject</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//生成游戏效果规格</span></span><br><span class="line"><span class="type">const</span> FGameplayEffectSpecHandle EffectSpecHandle = TargetASC-&gt;<span class="built_in">MakeOutgoingSpec</span>(GameplayEffectClass, <span class="number">1.f</span>, EffectContextHandle);</span><br><span class="line"><span class="comment">//将游戏效果规格应用到目标对象上</span></span><br><span class="line">TargetASC-&gt;<span class="built_in">ApplyGameplayEffectSpecToSelf</span>(*EffectSpecHandle.Data.<span class="built_in">Get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gameplay-Effect-游戏效果"><a href="#Gameplay-Effect-游戏效果" class="headerlink" title="Gameplay Effect 游戏效果"></a>Gameplay Effect 游戏效果</h3><ul><li><p>GEComponents 这个组件主要是在GameplayEffect激活时，可以向目标添加的GameplayAbility</p><table><thead><tr><th>名称</th><th>效果</th></tr></thead><tbody><tr><td><strong>Abilities Gameplay Effect component</strong></td><td>这个组件主要是在GameplayEffect激活时，可以向目标添加的GameplayAbility</td></tr><tr><td><strong>Addtional Effects Gameplay Effect Component</strong></td><td>当此效果添加时或完成时，需要额外添加的效果。<br/>On Appliaciton Gameplay Effects 在添加此效果时，额外添加的效果<br/>On Complete Always 当此效果完成时，不管正常结束还是不正常结束时，添加的效果<br/>On Complete Normal 当此效果正常结束时，添加的额外的效果<br/>On Complete Prematurely 当此效果提前结束时，添加的额外的效果<br/></td></tr><tr><td><strong>Asset Tags Gameplay Effect Component</strong></td><td>在添加此GE时，需要额外处理的标签（添加 和 删除），这个标签将放置在GE上面，只是作为一个GE的标记</td></tr><tr><td><strong>Block Ability Tags Gameplay Component</strong></td><td>添加或删除能够阻挡技能的Tags的组件，这些Tags会在GE运行时添加到Actor身上，用于阻挡其它拥有此Tag的GE或者GA的激活。</td></tr><tr><td><strong>Chance to Apply Gameplay Effect Component</strong></td><td>当前GE应用到Actor身上的几率，0为百分之0几率，1为百分之百几率</td></tr><tr><td><strong>Custom Can Apply Gameplay Effect Component</strong></td><td>自定义能够应用GE的组件，可以自定义条件来设置应用是否成功。</td></tr><tr><td><strong>Gameplay Effect UIData Text Only</strong></td><td>用于配置GE的UI信息，这里只有一个简单的TEXT，有需要的可以派生UGameplayEffectUIData类去添加自己需要的数据信息</td></tr><tr><td><strong>Immunity Gameplay Effect Component</strong></td><td>配置角色免疫其它GE的条件</td></tr><tr><td><strong>Remove Other Gameplay Effect Component</strong></td><td>配置移除其它的GE，满足设置的标签或者资源满足条件的GE都会被移除掉</td></tr><tr><td><strong>Target Tag Requirements Gameplay Effect Component</strong></td><td>根据目标的Tag设置当前的GE的状态<br/>Appliaction 为GE添加到目标身上时Tag的状态<br/>Ongoing 为GE激活时Tag的状态<br/>Removal 为GE被删除时Tag的状态</td></tr><tr><td><strong>Target Tags Gameplay Effect Component</strong></td><td>添加此GE后，对Actor身上带有的Tag进行操作（添加或删除），这个会随着GE的添加修改，在GE失效时移除。非Instant使用</td></tr></tbody></table></li></ul><h3 id="Gameplay-Cues-游戏提示"><a href="#Gameplay-Cues-游戏提示" class="headerlink" title="Gameplay Cues  游戏提示"></a>Gameplay Cues  游戏提示</h3><h3 id="Stackong-堆叠"><a href="#Stackong-堆叠" class="headerlink" title="Stackong 堆叠"></a>Stackong 堆叠</h3><ul><li><p><strong>Stack Duration Refresh Policy</strong> 叠加效果时，是否更新持续时间 Duration<br>Refresh on Successfull Application： 叠加效果时，刷新持续时间，即使层数不增加也会更新。<br>Never Refresh： 即使叠加效果，也不会刷新。</p></li><li><p><strong>Stack Period Reset Policy</strong> 叠加效果时，是否更新周期时间 Period<br>Refresh on Successfull Application：叠加效果时，每次都会更新周期时间 Period<br>Never Refresh： 即使叠加效果，也不会刷新</p></li><li><p><strong>Stack Expiration Policy</strong></p><p>Clear Entire Stack:Duration结束时清楚所有层数<br>Remove Single Stack And Refresh Duration：Duration结束时减少一层，然后重新经历一个Duration，一直持续到层数减为0<br>Refresh Duration：Duration结束时再次刷新Duration，这相当于无限Duration，可以通过调用</p></li><li><p><strong>Overflow</strong></p><p>OverflowEffects：超过StackLimitCount数量的Effect被Apply时将会调用该OverflowEffects，可以设置多个<br>DenyOverflowApplication：对应于StackDurationRefreshPolicy，如果为True则多余的Apply不会刷新Duration<br>ClearStackOnOverflow：当DenyOverflowApplication为True是才有效，当Overflow时是否直接删除所有层数</p></li></ul><h1 id="GE-MMC"><a href="#GE-MMC" class="headerlink" title="GE-MMC"></a>GE-MMC</h1><ul><li>通过等级更新玩家属性,MMC在GE效果类修改数值里设置,效果为覆盖</li></ul><ol><li>首先，玩家角色的等级需要创建在PlayerState里面，如果玩家角色Actor被销毁掉，等级信息也能够被保存下来</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(VisibleAnywhere, ReplicatedUsing=OnRep_Level)</span><br><span class="line">int32 Level;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnRep_Level</span><span class="params">(int32 OldLevel)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">APlayerStateBase::OnRep_Level</span><span class="params">(int32 OldLevel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// GAMEPLAYATTRIBUTE_REPNOTIFY(UAttributeSetBase, Level, OldLevel);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器同步</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等级获取函数,声明在玩家状态里</span></span><br><span class="line"><span class="function">FORCEINLINE int32 <span class="title">GetPlayerLevel</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> Level;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DOREPLIFETIME</span></span><br><span class="line"><span class="comment">//DOREPLIFETIME_CONDITION</span></span><br><span class="line"><span class="comment">//DOREPLIFETIME_CONDITION_NOTIFY</span></span><br><span class="line"><span class="comment">//它们三种是一次递进的，</span></span><br><span class="line"><span class="comment">//第一种就是基础的注册宏，在服务器变化时，会同步所有的客户端，</span></span><br><span class="line"><span class="comment">//第二种增加了CONDITION 也就是条件，条件的参数有多种，按需设置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">APlayerStateBase::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line"><span class="built_in">DOREPLIFETIME</span>(APlayerStateBase, Level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//敌人等级</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category=<span class="string">&quot;Character Class Defaults&quot;</span>)</span><br><span class="line">int32 Level = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建接口,用于获取等级的虚函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span>  int32 <span class="title">GetPlayerLevel</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">int32 <span class="title">ICombatInterface::GetPlayerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>玩家继承接口并实现&#96;GetPlayerLevel()</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> int32 <span class="title">GetPlayerLevel</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">int32 <span class="title">AHeroCharacter::GetPlayerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> APlayerStateBase* PlayerStateBase = <span class="built_in">GetPlayerState</span>&lt;APlayerStateBase&gt;();</span><br><span class="line"><span class="built_in">check</span>(PlayerStateBase); <span class="comment">//检测是否有效，无限会暂停游戏</span></span><br><span class="line"><span class="keyword">return</span> PlayerStateBase-&gt;<span class="built_in">GetPlayerLevel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>敌人实现</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">int32 <span class="title">AEnemyBase::GetPlayerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于根据等级配置生命值和魔法值最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayModMagnitudeCalculation.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MMC_MaxHealth.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MMC类(用于通过蓝图或本机代码执行自定义玩法效果修改器计算)</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UMMC_MaxHealth : <span class="keyword">public</span> UGameplayModMagnitudeCalculation</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">UMMC_MaxHealth</span>();</span><br><span class="line"><span class="comment">//重写自UGameplayModMagnitudeCalculation,返回计算后的数值</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">float</span> <span class="title">CalculateBaseMagnitude_Implementation</span><span class="params">(<span class="type">const</span> FGameplayEffectSpec&amp; Spec)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//捕获Vigor属性</span></span><br><span class="line">FGameplayEffectAttributeCaptureDefinition VigorDef;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/ModMagCalc/MMC_MaxHealth.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAttributeSet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface/CombatInterface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UMMC_MaxHealth::<span class="built_in">UMMC_MaxHealth</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 捕获属性</span></span><br><span class="line">VigorDef.AttributeToCapture = UAuraAttributeSet::<span class="built_in">GetVigorAttribute</span>(); <span class="comment">//设置需要获取的属性对象</span></span><br><span class="line"><span class="comment">// 设置源对象 枚举选项，从哪里捕捉游戏效果的游戏属性</span></span><br><span class="line">VigorDef.AttributeSource = EGameplayEffectAttributeCaptureSource::Target; <span class="comment">//设置拾取对象为GE的应用目标</span></span><br><span class="line"><span class="comment">//快照模式：当 bSnapshot 设置为 true 时，表示在游戏效果应用时对目标对象的属性进行一次“快照”（即一次性捕获），并将该快照值用于整个游戏效果的持续期间。</span></span><br><span class="line"><span class="comment">//动态更新：当 bSnapshot 设置为 false 时，表示在游戏效果持续期间，属性值会根据目标对象的实际变化动态更新。</span></span><br><span class="line">VigorDef.bSnapshot = <span class="literal">false</span>; <span class="comment">//是否应该对属性进行快照</span></span><br><span class="line"></span><br><span class="line">RelevantAttributesToCapture.<span class="built_in">Add</span>(VigorDef); <span class="comment">//添加到捕获属性数值，只有添加到列表，才会去获取属性值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">UMMC_MaxHealth::CalculateBaseMagnitude_Implementation</span><span class="params">(<span class="type">const</span> FGameplayEffectSpec&amp; Spec)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  从 source 和 target 获取 Tag</span></span><br><span class="line"><span class="type">const</span> FGameplayTagContainer* SourceTags = Spec.CapturedSourceTags.<span class="built_in">GetAggregatedTags</span>();</span><br><span class="line"><span class="type">const</span> FGameplayTagContainer* TargetTags = Spec.CapturedTargetTags.<span class="built_in">GetAggregatedTags</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合器评估中使用的数据，从调用者/游戏代码中传递</span></span><br><span class="line">FAggregatorEvaluateParameters EvaluateParameters;</span><br><span class="line">EvaluateParameters.SourceTags = SourceTags;</span><br><span class="line">EvaluateParameters.TargetTags = TargetTags;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取体力值</span></span><br><span class="line"><span class="type">float</span> Vigor = <span class="number">0.f</span>;</span><br><span class="line"><span class="comment">//在CalculateMagnitude调用期间获取属性大小的方便方法</span></span><br><span class="line"><span class="built_in">GetCapturedAttributeMagnitude</span>(VigorDef, Spec, EvaluateParameters, Vigor);</span><br><span class="line">Vigor = FMath::<span class="built_in">Max</span>&lt;<span class="type">float</span>&gt;(Vigor, <span class="number">0.f</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从GE获取上下文再获取对象</span></span><br><span class="line">ICombatInterface* CombatInterface = <span class="built_in">Cast</span>&lt;ICombatInterface&gt;(Spec.<span class="built_in">GetContext</span>().<span class="built_in">GetSourceObject</span>());</span><br><span class="line"><span class="comment">//获取等级</span></span><br><span class="line"><span class="type">const</span> int32 Level = CombatInterface-&gt;<span class="built_in">GetPlayerLevel</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算最大血量</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">80.f</span> + Vigor * <span class="number">2.5f</span> + Level * <span class="number">10.f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GAS系统组件事件和回调等"><a href="#GAS系统组件事件和回调等" class="headerlink" title="GAS系统组件事件和回调等"></a>GAS系统组件事件和回调等</h1><ul><li><p>添加TAG触发,返回TAG,用于处理捡到物品</p></li><li><p>添加GE触发,用于刷新血量? AbilitySystemComponent里写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/AuraAbilitySystemComponent.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAbilitySystemComponent::AbilityActorInfoSet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绑定委托? 当添加效果时调用</span></span><br><span class="line">OnGameplayEffectAppliedDelegateToSelf.<span class="built_in">AddUObject</span>(<span class="keyword">this</span>, &amp;UAuraAbilitySystemComponent::ClientEffectApplied);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAbilitySystemComponent::ClientEffectApplied_Implementation</span><span class="params">(UAbilitySystemComponent* AbilitySystemComponent,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FGameplayEffectSpec&amp; EffectSpec, FActiveGameplayEffectHandle ActiveEffectHandle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FGameplayTagContainer TagContainer;</span><br><span class="line">EffectSpec.<span class="built_in">GetAllAssetTags</span>(TagContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当添加效果时发送委托,参数为标签容器</span></span><br><span class="line">EffectAssetTags.<span class="built_in">Broadcast</span>(TagContainer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="GA-技能配置"><a href="#GA-技能配置" class="headerlink" title="GA 技能配置"></a>GA 技能配置</h1><h1 id="Tag标签配置"><a href="#Tag标签配置" class="headerlink" title="Tag标签配置"></a>Tag标签配置</h1><ul><li>Aura方案-结构体 UAssetManager在项目设置’’’资源管理器设置’</li><li>通过结构体获取单例<code>const FMyGameplayTags&amp; GameplayTags = FMyGameplayTags::Get();</code></li><li>副本:改增强输入系统单例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 版权归暮志未晚所有。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayTagContainer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GameplayTags 标签 单例模式</span></span><br><span class="line"><span class="comment"> * 内部包含原生的项目中使用的标签</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FAuraGameplayTags</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//静态函数,返回标签</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">const</span> FAuraGameplayTags&amp; <span class="title">Get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> GameplayTags; &#125;</span><br><span class="line"><span class="comment">////用于初始化内部的Tag标签</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">InitializeNativeGameplayTags</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化角色属性GameplayTags</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">InitializeAttributeGameplayTags</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化输入GameplayTags</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">InitializeInputGameplayTags</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Primary Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FGameplayTag Attributes_Primary_Strength; <span class="comment">//力量</span></span><br><span class="line">FGameplayTag Attributes_Primary_Intelligence; <span class="comment">//智力</span></span><br><span class="line">FGameplayTag Attributes_Primary_Resilience; <span class="comment">//韧性</span></span><br><span class="line">FGameplayTag Attributes_Primary_Vigor; <span class="comment">//体质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Secondary Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FGameplayTag Attributes_Secondary_Armor; <span class="comment">//盔甲</span></span><br><span class="line">FGameplayTag Attributes_Secondary_ArmorPenetration; <span class="comment">//盔甲穿透</span></span><br><span class="line">FGameplayTag Attributes_Secondary_BlockChance; <span class="comment">//格挡</span></span><br><span class="line">FGameplayTag Attributes_Secondary_CriticalHitChance; <span class="comment">//暴击</span></span><br><span class="line">FGameplayTag Attributes_Secondary_CriticalHitDamage; <span class="comment">//暴击伤害</span></span><br><span class="line">FGameplayTag Attributes_Secondary_CriticalHitResistance; <span class="comment">//暴击抗性</span></span><br><span class="line">FGameplayTag Attributes_Secondary_HealthRegeneration; <span class="comment">//生命回复</span></span><br><span class="line">FGameplayTag Attributes_Secondary_ManaRegeneration; <span class="comment">//法力回复</span></span><br><span class="line">FGameplayTag Attributes_Secondary_MaxHealth; <span class="comment">//最大生命</span></span><br><span class="line">FGameplayTag Attributes_Secondary_MaxMana; <span class="comment">//最大法力</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Input</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FGameplayTag InputTag_LMB; <span class="comment">//鼠标左键</span></span><br><span class="line">FGameplayTag InputTag_RMB; <span class="comment">//鼠标右键</span></span><br><span class="line">FGameplayTag InputTag_1; <span class="comment">//1键</span></span><br><span class="line">FGameplayTag InputTag_2; <span class="comment">//2键</span></span><br><span class="line">FGameplayTag InputTag_3; <span class="comment">//3键</span></span><br><span class="line">FGameplayTag InputTag_4; <span class="comment">//4键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//属性GameplayTags用于存储单例</span></span><br><span class="line"><span class="type">static</span> FAuraGameplayTags GameplayTags;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/GameplayTags/AuraGameplayTags.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayTagsManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">FAuraGameplayTags FAuraGameplayTags::GameplayTags;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FAuraGameplayTags::InitializeNativeGameplayTags</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">InitializeAttributeGameplayTags</span>();</span><br><span class="line"><span class="built_in">InitializeInputGameplayTags</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FAuraGameplayTags::InitializeAttributeGameplayTags</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Primary Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">GameplayTags.Attributes_Primary_Strength = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Primary.Strength&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Increases physical damage&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Primary_Intelligence = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Primary.Intelligence&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Increases magical damage&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Primary_Resilience = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Primary.Resilience&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Increases Armor and Armor Penetration&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Primary_Vigor = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Primary.Vigor&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Increases Health&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Secondary Attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">GameplayTags.Attributes_Secondary_Armor = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.Armor&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Reduces damage taken, improves Block Chance&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_ArmorPenetration = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.ArmorPenetration&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Ignores Percentage of enemy Armor, increases Critical Hit Chance&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_BlockChance = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.BlockChance&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Chance to cut incoming damage in half&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_CriticalHitChance = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.CriticalHitChance&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Chance to double damage plus critical hit bonus&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_CriticalHitDamage = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.CriticalHitDamage&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Bonus damage added when a critical hit is scored&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_CriticalHitResistance = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.CriticalHitResistance&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Reduces Critical Hit Chance of attacking enemies&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_HealthRegeneration = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.HealthRegeneration&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Amount of Health regenerated every 1 second&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_ManaRegeneration = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.ManaRegeneration&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Amount of Mana regenerated every 1 second&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_MaxHealth = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.MaxHealth&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Maximum amount of Health obtainable&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.Attributes_Secondary_MaxMana = UGameplayTagsManager::<span class="built_in">Get</span>().<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.Secondary.MaxMana&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;Maximum amount of Mana obtainable&quot;</span>)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FAuraGameplayTags::InitializeInputGameplayTags</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Input Tags</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">GameplayTags.InputTag_LMB = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.LMB&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;鼠标左键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_RMB = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.RMB&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;鼠标右键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_1 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.1&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘1键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_2 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.2&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘2键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_3 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.3&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘3键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_4 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.4&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘4键&quot;</span>)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/AssetManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AuraAssetManager.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UAuraAssetManager : <span class="keyword">public</span> UAssetManager</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//获取资源管理器</span></span><br><span class="line"><span class="function"><span class="type">static</span> UAuraAssetManager&amp; <span class="title">Get</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StartInitialLoading</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/GameplayTags/AuraAssetManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AbilitySystem/GameplayTags/AuraGameplayTags.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">UAuraAssetManager&amp; <span class="title">UAuraAssetManager::Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(GEngine);</span><br><span class="line">UAuraAssetManager* MyAssetManager = <span class="built_in">Cast</span>&lt;UAuraAssetManager&gt;(GEngine-&gt;AssetManager);</span><br><span class="line"><span class="keyword">return</span> *MyAssetManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAssetManager::StartInitialLoading</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化gameplay tags</span></span><br><span class="line">FAuraGameplayTags::<span class="built_in">InitializeNativeGameplayTags</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><h2 id="TAGS-声明"><a href="#TAGS-声明" class="headerlink" title="TAGS 声明"></a>TAGS 声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly)</span><br><span class="line">FGameplayTag PassiveSpellTag; </span><br></pre></td></tr></table></figure><h1 id="AI行为树"><a href="#AI行为树" class="headerlink" title="AI行为树"></a>AI行为树</h1><ul><li><p>需要蓝图类:AI控制器,行为树,黑板,任务</p></li><li><p>添加导航区域</p></li><li><p>创建AI控制器</p></li><li><p>打开角色蓝图选择AI控制器</p></li><li><p>创建行为树</p></li><li><p>AI控制器执行行为树(开始执行非循环)</p></li><li><p>行为树添加序列执行</p></li><li><p>添加计时</p></li><li><p>添加移动至</p></li><li><p>添加倒计时</p></li><li><p>创建黑板(声明变量的)比如向量</p></li><li><p>创建任务(负责写逻辑)比如获取玩家位置,将黑板值设置为向量</p></li></ul><h1 id="UE开发测试"><a href="#UE开发测试" class="headerlink" title="UE开发测试"></a>UE开发测试</h1><h2 id="角色移动"><a href="#角色移动" class="headerlink" title="角色移动"></a>角色移动</h2><ul><li>基础第三人称蓝图设置<ul><li>角色移动节点:旋转朝向移动打开</li><li>弹簧臂组件:pawn控制旋转打开</li><li>玩家关闭使用控制器旋转yaw</li></ul></li><li>增强输入<ul><li>引入控制器调用事件,判断控制器,添加增强输入,添加输入映射上下文</li><li>移动:获取控制器旋转,获取向前向量,添加移动输入</li><li>鼠标:添加pawn输入,添加PAW输入</li></ul></li></ul><h2 id="模型资产"><a href="#模型资产" class="headerlink" title="模型资产"></a>模型资产</h2><ul><li>玩家</li><li>怪物</li><li>武器:剑,刀,枪—</li><li>子弹</li><li>树</li><li>草</li></ul><h1 id="能力系统"><a href="#能力系统" class="headerlink" title="能力系统"></a>能力系统</h1><ul><li>能力组件添加函数,用于通过数组学习技能</li><li>玩家组件添加能力数组属性,用于 设置玩家要学习的技能</li></ul><h2 id="配置增强输入"><a href="#配置增强输入" class="headerlink" title="配置增强输入"></a>配置增强输入</h2><p>+　创建DataAsset类,文件夹input,然后创建资产文件给控制器(控制器需要声明)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameplayTagContainer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/DataAsset.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InputConfig.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FInputActionStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly)</span><br><span class="line"><span class="type">const</span> <span class="keyword">class</span> <span class="title class_">UInputAction</span>* InputAction = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly)</span><br><span class="line">FGameplayTag InputTag = <span class="built_in">FGameplayTag</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(BlueprintType,Blueprintable)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UInputConfig : <span class="keyword">public</span> UDataAsset</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly, BlueprintReadOnly)</span><br><span class="line">TArray&lt;FInputActionStruct&gt; AbilityInputActions;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> UInputAction* <span class="title">FindAbilityInputActionForTag</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag, <span class="type">bool</span> bLogNotFound = <span class="literal">false</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Input/InputConfig.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> UInputAction* <span class="title">UInputConfig::FindAbilityInputActionForTag</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag, <span class="type">bool</span> bLogNotFound)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> FInputActionStruct&amp; Action : AbilityInputActions)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Action.InputAction &amp;&amp; Action.InputTag == InputTag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Action.InputAction;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bLogNotFound)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;无法从InputConfig[%s]中找到InputTag[%s]对应的技能InputAction&quot;</span>), *<span class="built_in">GetNameSafe</span>(<span class="keyword">this</span>), *InputTag.<span class="built_in">ToString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>增强输入系统基类,项目设置:默认组件输入</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EnhancedInputComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InputConfig.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;InputComponentBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(ClassGroup=(Custom), meta=(BlueprintSpawnableComponent))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UInputComponentBase : <span class="keyword">public</span> UEnhancedInputComponent</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> UserClass, <span class="keyword">typename</span> PressedFuncType, <span class="keyword">typename</span> ReleasedFuncType, <span class="keyword">typename</span> HoldFuncType&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BindAbilityAction</span><span class="params">(<span class="type">const</span> UInputConfig* InputConfig, UserClass* Object, PressedFuncType PressedFunc, ReleasedFuncType ReleasedFunc, HoldFuncType HoldFunc)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Input/InputComponentBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values for this component&#x27;s properties</span></span><br><span class="line">UInputComponentBase::<span class="built_in">UInputComponentBase</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features</span></span><br><span class="line"><span class="comment">// off to improve performance if you don&#x27;t need them.</span></span><br><span class="line">PrimaryComponentTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">UserClass</span>, <span class="keyword">typename</span> PressedFuncType, <span class="keyword">typename</span> ReleasedFuncType, <span class="keyword">typename</span> HoldFuncType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UInputComponentBase::BindAbilityAction</span><span class="params">(<span class="type">const</span> UInputConfig* InputConfig, UserClass* Object,</span></span></span><br><span class="line"><span class="params"><span class="function">PressedFuncType PressedFunc, ReleasedFuncType ReleasedFunc, HoldFuncType HoldFunc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(InputConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> FInputActionStruct&amp; Action : InputConfig-&gt;AbilityInputActions)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Action.InputAction &amp;&amp; Action.InputTag.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(PressedFunc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">BindAction</span>(Action.InputAction, ETriggerEvent::Started, Object, PressedFunc, Action.InputTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HoldFunc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">BindAction</span>(Action.InputAction, ETriggerEvent::Triggered, Object, HoldFunc, Action.InputTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ReleasedFunc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">BindAction</span>(Action.InputAction, ETriggerEvent::Completed, Object, ReleasedFunc, Action.InputTag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建技能基类"><a href="#创建技能基类" class="headerlink" title="创建技能基类"></a>创建技能基类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Abilities/GameplayAbility.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GamePlayAbilityBase.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AURADEMO_API</span> UGamePlayAbilityBase : <span class="keyword">public</span> UGameplayAbility</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//技能输入Tag,通过这个tag触发对于技能 </span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">FGameplayTag StartupInputTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="添加输入Tag-可以换其他方法"><a href="#添加输入Tag-可以换其他方法" class="headerlink" title="添加输入Tag,可以换其他方法"></a>添加输入Tag,可以换其他方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FGameplayTag InputTag_LMB; <span class="comment">//鼠标左键</span></span><br><span class="line">FGameplayTag InputTag_RMB; <span class="comment">//鼠标右键</span></span><br><span class="line">FGameplayTag InputTag_1; <span class="comment">//1键</span></span><br><span class="line">FGameplayTag InputTag_2; <span class="comment">//2键</span></span><br><span class="line">FGameplayTag InputTag_3; <span class="comment">//3键</span></span><br><span class="line">FGameplayTag InputTag_4; <span class="comment">//4键</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FMyGameplayTags::InitializeInputGameplayTags</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GameplayTags.InputTag_LMB = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.LMB&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;鼠标左键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_RMB = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.RMB&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;鼠标右键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_1 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.1&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘1键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_2 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.2&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘2键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_3 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.3&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘3键&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GameplayTags.InputTag_4 = UGameplayTagsManager::<span class="built_in">Get</span>()</span><br><span class="line">.<span class="built_in">AddNativeGameplayTag</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Attributes.InputTag.4&quot;</span>),</span><br><span class="line"><span class="built_in">FString</span>(<span class="string">&quot;键盘4键&quot;</span>)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制器调用"><a href="#控制器调用" class="headerlink" title="控制器调用"></a>控制器调用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditDefaultsOnly, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">TObjectPtr&lt;UInputConfig&gt; InputConfig;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilityInputTagPressed</span><span class="params">(FGameplayTag InputTag)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilityInputTagReleased</span><span class="params">(FGameplayTag InputTag)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilityInputTagHold</span><span class="params">(FGameplayTag InputTag)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取能力组件,后期调用技能</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TObjectPtr&lt;UAuraAbilitySystemComponent&gt; AbilitySystemComponentBase;</span><br><span class="line"><span class="function">UAuraAbilitySystemComponent* <span class="title">GetASC</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::AbilityInputTagPressed</span><span class="params">(FGameplayTag InputTag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">3.f</span>, FColor::Red, *InputTag.<span class="built_in">ToString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::AbilityInputTagReleased</span><span class="params">(FGameplayTag InputTag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">2</span>, <span class="number">3.f</span>, FColor::Blue, *InputTag.<span class="built_in">ToString</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">GetASC</span>() == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">GetASC</span>()-&gt;<span class="built_in">AbilityInputTagReleased</span>(InputTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAuraPlayerController::AbilityInputTagHold</span><span class="params">(FGameplayTag InputTag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">3</span>, <span class="number">3.f</span>, FColor::Yellow, *InputTag.<span class="built_in">ToString</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">GetASC</span>() == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">GetASC</span>()-&gt;<span class="built_in">AbilityInputTagHold</span>(InputTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取能力组件</span></span><br><span class="line"><span class="function">UAuraAbilitySystemComponent* <span class="title">AAuraPlayerController::GetASC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(AbilitySystemComponentBase == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">AbilitySystemComponentBase = <span class="built_in">Cast</span>&lt;UAuraAbilitySystemComponent&gt;(UAbilitySystemBlueprintLibrary::<span class="built_in">GetAbilitySystemComponent</span>(<span class="built_in">GetPawn</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> AbilitySystemComponentBase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="能力组件"><a href="#能力组件" class="headerlink" title="能力组件"></a>能力组件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//技能</span></span><br><span class="line"><span class="comment">//传入技能数组并学习</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddCharacterAbilities</span><span class="params">(<span class="type">const</span> TArray&lt;TSubclassOf&lt;UGameplayAbility&gt;&gt;&amp; StartupAbilities)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//激活事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilityInputTagHold</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag)</span></span>;</span><br><span class="line"><span class="comment">//取消事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AbilityInputTagReleased</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAbilitySystemComponent::AddCharacterAbilities</span><span class="params">(<span class="type">const</span> TArray&lt;TSubclassOf&lt;UGameplayAbility&gt;&gt;&amp; StartupAbilities)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> TSubclassOf&lt;UGameplayAbility&gt; AbilityClass : StartupAbilities)</span><br><span class="line">&#123;</span><br><span class="line">FGameplayAbilitySpec AbilitySpec = <span class="built_in">FGameplayAbilitySpec</span>(AbilityClass, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="type">const</span> UGamePlayAbilityBase* AbilityBase = <span class="built_in">Cast</span>&lt;UGamePlayAbilityBase&gt;(AbilitySpec.Ability))</span><br><span class="line">&#123;</span><br><span class="line">AbilitySpec.DynamicAbilityTags.<span class="built_in">AddTag</span>(AbilityBase-&gt;StartupInputTag);</span><br><span class="line"><span class="built_in">GiveAbility</span>(AbilitySpec); <span class="comment">//只应用不激活</span></span><br><span class="line"><span class="comment">// GiveAbilityAndActivateOnce(AbilitySpec); //应用技能并激活一次</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAbilitySystemComponent::AbilityInputTagHold</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!InputTag.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> AbilitySpec : <span class="built_in">GetActivatableAbilities</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(AbilitySpec.DynamicAbilityTags.<span class="built_in">HasTagExact</span>(InputTag))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AbilitySpecInputPressed</span>(AbilitySpec);</span><br><span class="line"><span class="keyword">if</span>(!AbilitySpec.<span class="built_in">IsActive</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">TryActivateAbility</span>(AbilitySpec.Handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UAuraAbilitySystemComponent::AbilityInputTagReleased</span><span class="params">(<span class="type">const</span> FGameplayTag&amp; InputTag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!InputTag.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> AbilitySpec : <span class="built_in">GetActivatableAbilities</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(AbilitySpec.DynamicAbilityTags.<span class="built_in">HasTagExact</span>(InputTag))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AbilitySpecInputReleased</span>(AbilitySpec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ue5模板</title>
      <link href="/2024/03/30/ue5/%E5%8F%98%E9%87%8F/%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/03/30/ue5/%E5%8F%98%E9%87%8F/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="img-抽象工厂模式-png"><a href="#img-抽象工厂模式-png" class="headerlink" title="\img\抽象工厂模式.png"></a>\img\抽象工厂模式.png</h1><h1 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a>行为树</h1><p>怪物实时移动向玩家</p>]]></content>
      
      
      <categories>
          
          <category> ue5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ue5蓝图</title>
      <link href="/2024/03/30/ue5/%E5%8F%98%E9%87%8F/%E8%93%9D%E5%9B%BE/"/>
      <url>/2024/03/30/ue5/%E5%8F%98%E9%87%8F/%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                                                                                                                                                                                                                                                                        </p><h1 id="蓝图开发"><a href="#蓝图开发" class="headerlink" title="蓝图开发"></a>蓝图开发</h1><h2 id="获取场景对象"><a href="#获取场景对象" class="headerlink" title="获取场景对象"></a>获取场景对象</h2><p><img src="/..%5C%E8%93%9D%E5%9B%BE%5C2024921-170634.jpg" alt="2024921-170634"></p><p>了解您的需求，以下是一个整理成表格的UE5中常用蓝图节点和功能的示例：</p><table><thead><tr><th>类别</th><th>常用蓝图节点&#x2F;功能</th><th>描述</th></tr></thead><tbody><tr><td>事件处理</td><td>Event BeginPlay</td><td>游戏开始时执行的事件，常用于初始化设置</td></tr><tr><td></td><td>Event Tick</td><td>每帧执行的事件，可用于实现持续更新的逻辑</td></tr><tr><td></td><td>按键事件（如KeyPress, KeyRelease）</td><td>处理玩家的按键输入</td></tr><tr><td>变量与函数</td><td>变量</td><td>存储数据，可以在蓝图中添加、设置和获取</td></tr><tr><td></td><td>函数</td><td>将一系列节点封装成一个可复用的函数</td></tr><tr><td>流程控制</td><td>Sequence</td><td>按顺序执行多个节点</td></tr><tr><td></td><td>Delay</td><td>延迟执行节点后的逻辑</td></tr><tr><td></td><td>Branch</td><td>根据条件执行不同的逻辑（类似if语句）</td></tr><tr><td></td><td>Loop（如ForLoop, WhileLoop）</td><td>重复执行某段逻辑</td></tr><tr><td>信息获取</td><td>Get Actor Location</td><td>获取当前对象的位置信息</td></tr><tr><td></td><td>Get Actor Rotation</td><td>获取当前对象的旋转信息</td></tr><tr><td></td><td>Get Player Pawn</td><td>获取指定索引的玩家信息</td></tr><tr><td></td><td>Get Display Name</td><td>获取对象的名称</td></tr><tr><td>物理与交互</td><td>GetMass</td><td>获取物体的质量（物体需要设置为可移动）</td></tr><tr><td></td><td>Add Impulse</td><td>给物体添加一个力，使其移动或旋转</td></tr><tr><td></td><td>Apply Damage</td><td>对目标应用伤害，并触发相应的伤害事件</td></tr><tr><td>数组与字符串操作</td><td>数组操作（如Add to Array, Remove from Array, Loop Body for Each Element）</td><td>处理数组类型的数据</td></tr><tr><td></td><td>字符串操作（如Concat Strings, String Length, String to Int）</td><td>处理文本数据</td></tr><tr><td>场景与关卡</td><td>Spawn Actor from Class</td><td>根据蓝图类创建对象，并将其放入场景中</td></tr><tr><td></td><td>Open Level</td><td>加载新的关卡</td></tr><tr><td>调试与可视化</td><td>DrawDebug（如DrawDebugLine, DrawDebugSphere）</td><td>在游戏中绘制调试信息，帮助开发者理解游戏状态</td></tr><tr><td>其他常用节点</td><td>Set Actor Hidden In Game</td><td>设置对象在游戏中隐藏，但在编辑器中可见</td></tr><tr><td></td><td>Move Actor To Location</td><td>将对象移动到指定位置</td></tr><tr><td></td><td>Rotate Actor To Rotation</td><td>将对象旋转到指定角度</td></tr></tbody></table><p>请注意，这个表格只是一个示例，UE5中的蓝图功能非常丰富，这里只列出了其中的一部分常用节点和功能。在实际开发中，您可能会根据项目的需求使用到更多的蓝图节点和功能。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>创建接口蓝图,并<code>命名</code></li><li>添加函数,添加属性</li><li>在A蓝图通过接口名添加接口调用接口事件</li><li>在B直接通过函数执行接口</li></ul><h2 id="曲线弹"><a href="#曲线弹" class="headerlink" title="曲线弹"></a>曲线弹</h2><ul><li>需要发射器蓝图和子弹蓝图</li><li></li></ul><h1 id="游戏系统"><a href="#游戏系统" class="headerlink" title="游戏系统"></a>游戏系统</h1><h2 id="玩家"><a href="#玩家" class="headerlink" title="玩家"></a>玩家</h2><ul><li>玩家动作系统</li><li>属性系统</li><li>背包</li><li>UI系统</li><li>装备</li><li>技能</li></ul><h2 id="怪物"><a href="#怪物" class="headerlink" title="怪物"></a>怪物</h2><ul><li>AI</li><li>属性</li><li>UI</li><li>掉落</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>任务</li></ul><h1 id="三渲二"><a href="#三渲二" class="headerlink" title="三渲二"></a>三渲二</h1><h2 id="兰伯特光照模型"><a href="#兰伯特光照模型" class="headerlink" title="兰伯特光照模型"></a>兰伯特光照模型</h2><h2 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h2><ul><li>颜色贴图</li><li>阴影贴图 </li><li>本村线贴图 二次UV</li><li>反光贴图<ul><li>R 收到反光的强度,类似GODOT卡通渲染的粗糙的?</li><li>G 颜色阴影</li><li>B 反光形状</li><li>A 内描边</li></ul></li></ul><h1 id="碰撞"><a href="#碰撞" class="headerlink" title="碰撞"></a>碰撞</h1><ul><li>检测响应会检测对应类型的检测标记,对像类型值会被检测区域感应到的区域</li></ul><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p>游戏开发架构的分层设计是游戏开发过程中的重要环节，它有助于开发人员更好地组织代码、提高开发效率，并确保游戏的稳定性和可扩展性。一般而言，游戏开发架构可以分为以下几个主要层次：</p><h3 id="一、视图层（View）"><a href="#一、视图层（View）" class="headerlink" title="一、视图层（View）"></a>一、视图层（View）</h3><p>视图层主要负责处理游戏的用户界面（UI）和图形渲染。它接收用户的输入，并显示游戏的战斗画面、业务界面和特效等。视图层通常包括以下几个部分：</p><ul><li><strong>游戏输入</strong>：处理用户的键盘、鼠标、触摸屏等输入设备的信息。</li><li><strong>战斗View</strong>：显示游戏的战斗画面，包括角色、怪物、技能特效等。</li><li><strong>业务UI</strong>：显示游戏的业务界面，如登录界面、设置界面、商店界面等。</li><li><strong>特效</strong>：处理游戏中的各种特效，如技能特效、爆炸特效等。</li></ul><h3 id="二、业务层（Model、Control）"><a href="#二、业务层（Model、Control）" class="headerlink" title="二、业务层（Model、Control）"></a>二、业务层（Model、Control）</h3><p>业务层是游戏开发架构中的核心部分，它负责处理游戏的核心玩法和业务逻辑。业务层通常分为模型（Model）和控制（Control）两个部分：</p><ul><li><strong>模型（Model）</strong>：负责游戏中的数据存储和状态管理。它定义了游戏的规则、角色、怪物、道具等对象的属性和行为。模型层还负责处理游戏的状态转换，如角色的移动、攻击、死亡等。</li><li><strong>控制（Control）</strong>：负责处理用户的输入和游戏事件的响应。它接收视图层传来的用户输入信息，并根据业务逻辑进行处理，然后更新模型层的状态，并通知视图层进行渲染。</li></ul><h3 id="三、服务层"><a href="#三、服务层" class="headerlink" title="三、服务层"></a>三、服务层</h3><p>服务层是游戏开发架构中的支撑部分，它提供了一系列的基础服务，以支持游戏的核心玩法和业务逻辑。服务层通常包括以下几个部分：</p><ul><li><strong>配置管理</strong>：管理游戏的配置文件，如角色属性、怪物掉落等。</li><li><strong>模块管理</strong>：管理游戏的不同模块，如登录模块、战斗模块等。</li><li><strong>数据管理</strong>：处理游戏中的数据存储和查询，如角色数据、道具数据等。</li><li><strong>资源管理</strong>：管理游戏中的资源文件，如图片、音频、视频等。</li><li><strong>对象池</strong>：用于管理游戏中的对象实例，以提高性能和减少内存占用。</li><li><strong>有限状态机</strong>：用于管理游戏中的角色、怪物等对象的状态转换。</li><li><strong>本地化</strong>：支持游戏的多语言版本，如中文、英文等。</li><li><strong>消息管理</strong>：处理游戏中的消息传递和事件通知。</li><li><strong>网络</strong>：处理游戏的网络通信，如玩家之间的交互、服务器与客户端的通信等。</li><li><strong>界面</strong>：提供游戏界面的布局和样式管理。</li><li><strong>声音</strong>：处理游戏中的声音效果，如背景音乐、角色配音等。</li><li><strong>镜头控制</strong>：管理游戏中的镜头视角和移动。</li><li><strong>场景管理</strong>：管理游戏中的不同场景和地图。</li><li><strong>Native</strong>：提供与原生平台的交互接口，如调用设备的摄像头、麦克风等。</li><li><strong>日志</strong>：记录游戏的运行日志和错误信息，以便于开发和调试。</li><li><strong>数据打点</strong>：用于收集和分析游戏数据，以优化游戏的性能和用户体验。</li><li><strong>热更</strong>：支持游戏的在线更新，以便于及时修复漏洞和添加新功能。</li><li><strong>支付</strong>：处理游戏中的支付功能，如购买道具、皮肤等。</li><li><strong>广告</strong>：在游戏中展示广告，以获取收入。</li></ul><h3 id="四、基础类库"><a href="#四、基础类库" class="headerlink" title="四、基础类库"></a>四、基础类库</h3><p>基础类库是游戏开发架构中的底层部分，它提供了一系列的基础功能和工具，以支持上层架构的开发和运行。基础类库通常包括以下几个部分：</p><ul><li><strong>储存</strong>：提供数据存储和访问的接口，如文件存储、数据库存储等。</li><li><strong>数学</strong>：提供数学运算和几何计算的接口，如向量运算、矩阵运算等。</li><li><strong>字符串</strong>：提供字符串处理和格式化的接口。</li><li><strong>网络</strong>：提供网络通信的接口，如TCP&#x2F;IP、UDP等。</li><li><strong>声音</strong>：提供声音处理和播放的接口。</li></ul><h3 id="五、确定依赖关系"><a href="#五、确定依赖关系" class="headerlink" title="五、确定依赖关系"></a>五、确定依赖关系</h3><p>在游戏开发架构中，各层之间需要明确依赖关系，以确保代码的模块化和可维护性。通常，上层可以调用下层的功能，但下层不能调用上层的功能。这种依赖关系可以通过接口或抽象类来实现，以便于在需要时进行替换和扩展。同时，为了实现各层之间的通信和协作，可以使用消息机制来传递信息和事件通知。</p><p>综上所述，游戏开发架构的分层设计有助于开发人员更好地组织代码、提高开发效率，并确保游戏的稳定性和可扩展性。在实际开发中，可以根据游戏的具体需求和特点进行适当的调整和优化。</p><h1 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h1><h2 id="vscode代码折叠"><a href="#vscode代码折叠" class="headerlink" title="vscode代码折叠#"></a>vscode代码折叠<a href="https://www.cnblogs.com/zhaoqingqing/p/17627281.html#3252757114">#</a></h2><p>vscode的支持性非常好，以上折叠写法都支持，附上vscode官网不同编程语言的折叠代码写法：<a href="https://code.visualstudio.com/docs/editor/codebasics#_folding">Basic Editing in Visual Studio Code</a></p><table><thead><tr><th>Language</th><th>Start region</th><th>End region</th></tr></thead><tbody><tr><td>Bat</td><td>::#region or REM #region</td><td>::#endregion or REM #endregion</td></tr><tr><td>C#</td><td>#region</td><td>#endregion</td></tr><tr><td>C&#x2F;C++</td><td>#pragma region</td><td>#pragma endregion</td></tr><tr><td>CSS&#x2F;Less&#x2F;SCSS</td><td>&#x2F;<em>#region</em>&#x2F;</td><td>&#x2F;<em>#endregion</em>&#x2F;</td></tr><tr><td>Coffeescript</td><td>#region</td><td>#endregion</td></tr><tr><td>F#</td><td>&#x2F;&#x2F;#region or (#_region)</td><td>&#x2F;&#x2F;#endregion or (#_endregion)</td></tr><tr><td>Java</td><td>&#x2F;&#x2F;#region or &#x2F;&#x2F;</td><td>&#x2F;&#x2F; #endregion or &#x2F;&#x2F;</td></tr><tr><td>Markdown</td><td></td><td></td></tr><tr><td>Perl5</td><td>#region or &#x3D;pod</td><td>#endregion or &#x3D;cut</td></tr><tr><td>PHP</td><td>#region</td><td>#endregion</td></tr><tr><td>PowerShell</td><td>#region</td><td>#endregion</td></tr><tr><td>Python</td><td>#region or # region</td><td>#endregion or # endregion</td></tr><tr><td>TypeScript&#x2F;JavaScript</td><td>&#x2F;&#x2F;#region</td><td>&#x2F;&#x2F;#endregion</td></tr><tr><td>Visual Basic</td><td>#Region</td><td>#End Region</td></tr></tbody></table><h1 id="骨骼命名"><a href="#骨骼命名" class="headerlink" title="骨骼命名"></a>骨骼命名</h1><ul><li>Root 根</li><li>Pelvis 盆骨</li><li>spine 脊柱*3…</li></ul><h2 id="分左右"><a href="#分左右" class="headerlink" title="分左右"></a>分左右</h2><ul><li>clavivle_l 锁骨左</li><li>clavivle_r 锁骨右</li></ul><h3 id="手"><a href="#手" class="headerlink" title="手:"></a>手:</h3><ul><li>upperarm 上肩膀</li><li>lowerarm 下肩膀</li><li>hand 手</li><li>index_metacarpal 指数_掌骨</li><li>index_01</li><li>index_02</li><li>index_03</li><li>middle_metacarpal 1 2 3 中指</li><li>pinky_metacarpal 小指</li><li>ring_metacarpal 无名</li><li>thumb_01 拇子</li><li>lowerarm_twist_01_l 手捩1</li><li>lowerarm_twist_02_l 手捩2</li><li>upperarm_twist_01_l 上臂</li><li>upperarm_twist_02_l  上臂</li></ul><h3 id="头"><a href="#头" class="headerlink" title="头:"></a>头:</h3><p>neck_01 脖颈<br>neck_02<br>head 头</p><h3 id="退"><a href="#退" class="headerlink" title="退"></a>退</h3><p>thigh_l 大腿</p><p>calf_l 小腿</p><p>calf_twist_01_l 小腿下旋1</p><p>calf_twist_02_l 小腿下旋2</p><p>thigh_twist_01_l</p><p>thigh_twist_02_l</p><p>foot_l 脚</p><p>ball_l 脚指</p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
